/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AdvancedSearch;
import org.openapitools.client.model.DataSearchResult;
import org.openapitools.client.model.EntitySet;
import java.util.*;
import java.util.Map;
import org.openapitools.client.model.NeighborEntityDetails;
import org.openapitools.client.model.NeighborSearchFilter;
import org.openapitools.client.model.Search;
import org.openapitools.client.model.SearchConstraints;
import org.openapitools.client.model.SearchResult;
import org.openapitools.client.model.SearchTerm;
import java.util.UUID;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class SearchApi {
  String basePath = "https://api.openlattice.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Executes a search over the data of a given entity set to find rows that match the search term
  * 
   * @param entitySetId 
   * @param advancedSearch 
   * @return DataSearchResult
  */
  public DataSearchResult executeAdvancedEntitySetDataQuery (UUID entitySetId, AdvancedSearch advancedSearch) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = advancedSearch;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling executeAdvancedEntitySetDataQuery",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling executeAdvancedEntitySetDataQuery"));
    }
    // verify the required parameter 'advancedSearch' is set
    if (advancedSearch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'advancedSearch' when calling executeAdvancedEntitySetDataQuery",
        new ApiException(400, "Missing the required parameter 'advancedSearch' when calling executeAdvancedEntitySetDataQuery"));
    }

    // create path and map variables
    String path = "/datastore/search/advanced/{entitySetId}".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DataSearchResult) ApiInvoker.deserialize(localVarResponse, "", DataSearchResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Executes a search over the data of a given entity set to find rows that match the search term
   * 
   * @param entitySetId    * @param advancedSearch 
  */
  public void executeAdvancedEntitySetDataQuery (UUID entitySetId, AdvancedSearch advancedSearch, final Response.Listener<DataSearchResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = advancedSearch;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling executeAdvancedEntitySetDataQuery",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling executeAdvancedEntitySetDataQuery"));
    }
    // verify the required parameter 'advancedSearch' is set
    if (advancedSearch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'advancedSearch' when calling executeAdvancedEntitySetDataQuery",
        new ApiException(400, "Missing the required parameter 'advancedSearch' when calling executeAdvancedEntitySetDataQuery"));
    }

    // create path and map variables
    String path = "/datastore/search/advanced/{entitySetId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DataSearchResult) ApiInvoker.deserialize(localVarResponse,  "", DataSearchResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Executes a search for all neighbors of an entity that are connected by an association
  * 
   * @param entitySetId 
   * @param entityKeyId 
   * @return List<NeighborEntityDetails>
  */
  public List<NeighborEntityDetails> executeEntityNeighborSearch (UUID entitySetId, UUID entityKeyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling executeEntityNeighborSearch",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling executeEntityNeighborSearch"));
    }
    // verify the required parameter 'entityKeyId' is set
    if (entityKeyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityKeyId' when calling executeEntityNeighborSearch",
        new ApiException(400, "Missing the required parameter 'entityKeyId' when calling executeEntityNeighborSearch"));
    }

    // create path and map variables
    String path = "/datastore/search/{entitySetId}/{entityKeyId}".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "entityKeyId" + "\\}", apiInvoker.escapeString(entityKeyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<NeighborEntityDetails>) ApiInvoker.deserialize(localVarResponse, "array", NeighborEntityDetails.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Executes a search for all neighbors of an entity that are connected by an association
   * 
   * @param entitySetId    * @param entityKeyId 
  */
  public void executeEntityNeighborSearch (UUID entitySetId, UUID entityKeyId, final Response.Listener<List<NeighborEntityDetails>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling executeEntityNeighborSearch",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling executeEntityNeighborSearch"));
    }
    // verify the required parameter 'entityKeyId' is set
    if (entityKeyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityKeyId' when calling executeEntityNeighborSearch",
        new ApiException(400, "Missing the required parameter 'entityKeyId' when calling executeEntityNeighborSearch"));
    }

    // create path and map variables
    String path = "/datastore/search/{entitySetId}/{entityKeyId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "entityKeyId" + "\\}", apiInvoker.escapeString(entityKeyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<NeighborEntityDetails>) ApiInvoker.deserialize(localVarResponse,  "array", NeighborEntityDetails.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association
  * 
   * @param entitySetId 
   * @param UUID 
   * @return Map<String, List<NeighborEntityDetails>>
  */
  public Map<String, List<NeighborEntityDetails>> executeEntityNeighborSearchBulk (UUID entitySetId, List<UUID> UUID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = UUID;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling executeEntityNeighborSearchBulk",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling executeEntityNeighborSearchBulk"));
    }
    // verify the required parameter 'UUID' is set
    if (UUID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'UUID' when calling executeEntityNeighborSearchBulk",
        new ApiException(400, "Missing the required parameter 'UUID' when calling executeEntityNeighborSearchBulk"));
    }

    // create path and map variables
    String path = "/datastore/search/{entitySetId}/neighbors".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, List<NeighborEntityDetails>>) ApiInvoker.deserialize(localVarResponse, "map", List.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association
   * 
   * @param entitySetId    * @param UUID 
  */
  public void executeEntityNeighborSearchBulk (UUID entitySetId, List<UUID> UUID, final Response.Listener<Map<String, List<NeighborEntityDetails>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = UUID;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling executeEntityNeighborSearchBulk",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling executeEntityNeighborSearchBulk"));
    }
    // verify the required parameter 'UUID' is set
    if (UUID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'UUID' when calling executeEntityNeighborSearchBulk",
        new ApiException(400, "Missing the required parameter 'UUID' when calling executeEntityNeighborSearchBulk"));
    }

    // create path and map variables
    String path = "/datastore/search/{entitySetId}/neighbors".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, List<NeighborEntityDetails>>) ApiInvoker.deserialize(localVarResponse,  "map", List.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Executes a search over the data of a given entity set to find rows that match the search term
  * 
   * @param entitySetId 
   * @param searchTerm A JSON object that contains three parameters, \&quot;start\&quot;, which specifies the hit number to start returning results on for paging, \&quot;maxHits\&quot;, which specifies the maximum number of hits to return, and \&quot;searchTerm\&quot;, which is the search term results will match on.
   * @return DataSearchResult
  */
  public DataSearchResult executeEntitySetDataQuery (UUID entitySetId, SearchTerm searchTerm) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = searchTerm;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling executeEntitySetDataQuery",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling executeEntitySetDataQuery"));
    }
    // verify the required parameter 'searchTerm' is set
    if (searchTerm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'searchTerm' when calling executeEntitySetDataQuery",
        new ApiException(400, "Missing the required parameter 'searchTerm' when calling executeEntitySetDataQuery"));
    }

    // create path and map variables
    String path = "/datastore/search/{entitySetId}".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DataSearchResult) ApiInvoker.deserialize(localVarResponse, "", DataSearchResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Executes a search over the data of a given entity set to find rows that match the search term
   * 
   * @param entitySetId    * @param searchTerm A JSON object that contains three parameters, \&quot;start\&quot;, which specifies the hit number to start returning results on for paging, \&quot;maxHits\&quot;, which specifies the maximum number of hits to return, and \&quot;searchTerm\&quot;, which is the search term results will match on.
  */
  public void executeEntitySetDataQuery (UUID entitySetId, SearchTerm searchTerm, final Response.Listener<DataSearchResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = searchTerm;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling executeEntitySetDataQuery",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling executeEntitySetDataQuery"));
    }
    // verify the required parameter 'searchTerm' is set
    if (searchTerm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'searchTerm' when calling executeEntitySetDataQuery",
        new ApiException(400, "Missing the required parameter 'searchTerm' when calling executeEntitySetDataQuery"));
    }

    // create path and map variables
    String path = "/datastore/search/{entitySetId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DataSearchResult) ApiInvoker.deserialize(localVarResponse,  "", DataSearchResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * The query, entityType, and propertyTypes params are all optional, but at least one must be specified otherwise an error will be thrown. All specified params are required to be present in each entity set returned. If entityType and propertyTypes are both specified, the propertyTypes param will be ignored.
  * 
   * @param search 
   * @return Map<String, Map<String, Map<String, List<NeighborEntityIds>>>>
  */
  public Map<String, Map<String, Map<String, List<NeighborEntityIds>>>> executeEntitySetKeywordQuery (Search search) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = search;
    // verify the required parameter 'search' is set
    if (search == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'search' when calling executeEntitySetKeywordQuery",
        new ApiException(400, "Missing the required parameter 'search' when calling executeEntitySetKeywordQuery"));
    }

    // create path and map variables
    String path = "/datastore/search";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, Map<String, Map<String, List<NeighborEntityIds>>>>) ApiInvoker.deserialize(localVarResponse, "map", Map.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * The query, entityType, and propertyTypes params are all optional, but at least one must be specified otherwise an error will be thrown. All specified params are required to be present in each entity set returned. If entityType and propertyTypes are both specified, the propertyTypes param will be ignored.
   * 
   * @param search 
  */
  public void executeEntitySetKeywordQuery (Search search, final Response.Listener<Map<String, Map<String, Map<String, List<NeighborEntityIds>>>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = search;

    // verify the required parameter 'search' is set
    if (search == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'search' when calling executeEntitySetKeywordQuery",
        new ApiException(400, "Missing the required parameter 'search' when calling executeEntitySetKeywordQuery"));
    }

    // create path and map variables
    String path = "/datastore/search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, Map<String, Map<String, List<NeighborEntityIds>>>>) ApiInvoker.deserialize(localVarResponse,  "map", Map.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association and returns a simple version of the neighborDetails
  * 
   * @param entitySetId 
   * @param neighborSearchFilter 
   * @return Map<String, Map<String, Map<String, List<NeighborEntityIds>>>>
  */
  public Map<String, Map<String, Map<String, List<NeighborEntityIds>>>> executeFilteredEntityNeighborIdSearch (UUID entitySetId, NeighborSearchFilter neighborSearchFilter) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = neighborSearchFilter;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling executeFilteredEntityNeighborIdSearch",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling executeFilteredEntityNeighborIdSearch"));
    }
    // verify the required parameter 'neighborSearchFilter' is set
    if (neighborSearchFilter == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'neighborSearchFilter' when calling executeFilteredEntityNeighborIdSearch",
        new ApiException(400, "Missing the required parameter 'neighborSearchFilter' when calling executeFilteredEntityNeighborIdSearch"));
    }

    // create path and map variables
    String path = "/datastore/search/{entitySetId}/neighbors/advanced/ids".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, Map<String, Map<String, List<NeighborEntityIds>>>>) ApiInvoker.deserialize(localVarResponse, "map", Map.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association and returns a simple version of the neighborDetails
   * 
   * @param entitySetId    * @param neighborSearchFilter 
  */
  public void executeFilteredEntityNeighborIdSearch (UUID entitySetId, NeighborSearchFilter neighborSearchFilter, final Response.Listener<Map<String, Map<String, Map<String, List<NeighborEntityIds>>>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = neighborSearchFilter;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling executeFilteredEntityNeighborIdSearch",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling executeFilteredEntityNeighborIdSearch"));
    }
    // verify the required parameter 'neighborSearchFilter' is set
    if (neighborSearchFilter == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'neighborSearchFilter' when calling executeFilteredEntityNeighborIdSearch",
        new ApiException(400, "Missing the required parameter 'neighborSearchFilter' when calling executeFilteredEntityNeighborIdSearch"));
    }

    // create path and map variables
    String path = "/datastore/search/{entitySetId}/neighbors/advanced/ids".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, Map<String, Map<String, List<NeighborEntityIds>>>>) ApiInvoker.deserialize(localVarResponse,  "map", Map.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association
  * 
   * @param entitySetId 
   * @param neighborSearchFilter 
   * @return Map<String, List<NeighborEntityDetails>>
  */
  public Map<String, List<NeighborEntityDetails>> executeFilteredEntityNeighborSearch (UUID entitySetId, NeighborSearchFilter neighborSearchFilter) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = neighborSearchFilter;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling executeFilteredEntityNeighborSearch",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling executeFilteredEntityNeighborSearch"));
    }
    // verify the required parameter 'neighborSearchFilter' is set
    if (neighborSearchFilter == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'neighborSearchFilter' when calling executeFilteredEntityNeighborSearch",
        new ApiException(400, "Missing the required parameter 'neighborSearchFilter' when calling executeFilteredEntityNeighborSearch"));
    }

    // create path and map variables
    String path = "/datastore/search/{entitySetId}/neighbors/advanced".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, List<NeighborEntityDetails>>) ApiInvoker.deserialize(localVarResponse, "map", List.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association
   * 
   * @param entitySetId    * @param neighborSearchFilter 
  */
  public void executeFilteredEntityNeighborSearch (UUID entitySetId, NeighborSearchFilter neighborSearchFilter, final Response.Listener<Map<String, List<NeighborEntityDetails>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = neighborSearchFilter;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling executeFilteredEntityNeighborSearch",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling executeFilteredEntityNeighborSearch"));
    }
    // verify the required parameter 'neighborSearchFilter' is set
    if (neighborSearchFilter == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'neighborSearchFilter' when calling executeFilteredEntityNeighborSearch",
        new ApiException(400, "Missing the required parameter 'neighborSearchFilter' when calling executeFilteredEntityNeighborSearch"));
    }

    // create path and map variables
    String path = "/datastore/search/{entitySetId}/neighbors/advanced".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, List<NeighborEntityDetails>>) ApiInvoker.deserialize(localVarResponse,  "map", List.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Executes a search over all existing entity sets to populate the home page. The path parameters instruct which page to return and how large the page should be.
  * 
   * @param start The first result number to return
   * @param numResults The total number of results to return
   * @return List<SearchResult>
  */
  public List<SearchResult> getEntitySets (Integer start, Integer numResults) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'start' is set
    if (start == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'start' when calling getEntitySets",
        new ApiException(400, "Missing the required parameter 'start' when calling getEntitySets"));
    }
    // verify the required parameter 'numResults' is set
    if (numResults == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'numResults' when calling getEntitySets",
        new ApiException(400, "Missing the required parameter 'numResults' when calling getEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/search/entity-sets/{start}/{numResults}".replaceAll("\\{" + "start" + "\\}", apiInvoker.escapeString(start.toString())).replaceAll("\\{" + "numResults" + "\\}", apiInvoker.escapeString(numResults.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<SearchResult>) ApiInvoker.deserialize(localVarResponse, "array", SearchResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Executes a search over all existing entity sets to populate the home page. The path parameters instruct which page to return and how large the page should be.
   * 
   * @param start The first result number to return   * @param numResults The total number of results to return
  */
  public void getEntitySets (Integer start, Integer numResults, final Response.Listener<List<SearchResult>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'start' is set
    if (start == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'start' when calling getEntitySets",
        new ApiException(400, "Missing the required parameter 'start' when calling getEntitySets"));
    }
    // verify the required parameter 'numResults' is set
    if (numResults == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'numResults' when calling getEntitySets",
        new ApiException(400, "Missing the required parameter 'numResults' when calling getEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/search/entity-sets/{start}/{numResults}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "start" + "\\}", apiInvoker.escapeString(start.toString())).replaceAll("\\{" + "numResults" + "\\}", apiInvoker.escapeString(numResults.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<SearchResult>) ApiInvoker.deserialize(localVarResponse,  "array", SearchResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the most popular entity sets.
  * 
   * @return List<EntitySet>
  */
  public List<EntitySet> getPopularEntitySet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/datastore/search/popular";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<EntitySet>) ApiInvoker.deserialize(localVarResponse, "array", EntitySet.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the most popular entity sets.
   * 

  */
  public void getPopularEntitySet (final Response.Listener<List<EntitySet>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/datastore/search/popular".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<EntitySet>) ApiInvoker.deserialize(localVarResponse,  "array", EntitySet.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Executes a search over the data of a given entity set to find rows that match the search term
  * 
   * @param searchConstraints 
   * @return DataSearchResult
  */
  public DataSearchResult searchEntitySetData (SearchConstraints searchConstraints) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = searchConstraints;
    // verify the required parameter 'searchConstraints' is set
    if (searchConstraints == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'searchConstraints' when calling searchEntitySetData",
        new ApiException(400, "Missing the required parameter 'searchConstraints' when calling searchEntitySetData"));
    }

    // create path and map variables
    String path = "/datastore/search";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DataSearchResult) ApiInvoker.deserialize(localVarResponse, "", DataSearchResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Executes a search over the data of a given entity set to find rows that match the search term
   * 
   * @param searchConstraints 
  */
  public void searchEntitySetData (SearchConstraints searchConstraints, final Response.Listener<DataSearchResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = searchConstraints;

    // verify the required parameter 'searchConstraints' is set
    if (searchConstraints == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'searchConstraints' when calling searchEntitySetData",
        new ApiException(400, "Missing the required parameter 'searchConstraints' when calling searchEntitySetData"));
    }

    // create path and map variables
    String path = "/datastore/search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DataSearchResult) ApiInvoker.deserialize(localVarResponse,  "", DataSearchResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
