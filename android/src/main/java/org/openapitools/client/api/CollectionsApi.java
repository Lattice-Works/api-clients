/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CollectionTemplateType;
import org.openapitools.client.model.EntitySetCollection;
import org.openapitools.client.model.EntityTypeCollection;
import java.util.Map;
import org.openapitools.client.model.MetadataUpdate;
import java.util.UUID;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CollectionsApi {
  String basePath = "https://api.openlattice.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Appends type to template of the specified EntityTypeCollection
  * 
   * @param entityTypeCollectionId 
   * @param collectionTemplateType 
   * @return void
  */
  public void addTypeToEntityTypeCollectionTemplate (UUID entityTypeCollectionId, CollectionTemplateType collectionTemplateType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = collectionTemplateType;
    // verify the required parameter 'entityTypeCollectionId' is set
    if (entityTypeCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeCollectionId' when calling addTypeToEntityTypeCollectionTemplate",
        new ApiException(400, "Missing the required parameter 'entityTypeCollectionId' when calling addTypeToEntityTypeCollectionTemplate"));
    }
    // verify the required parameter 'collectionTemplateType' is set
    if (collectionTemplateType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionTemplateType' when calling addTypeToEntityTypeCollectionTemplate",
        new ApiException(400, "Missing the required parameter 'collectionTemplateType' when calling addTypeToEntityTypeCollectionTemplate"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/type/{entityTypeCollectionId}/template".replaceAll("\\{" + "entityTypeCollectionId" + "\\}", apiInvoker.escapeString(entityTypeCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Appends type to template of the specified EntityTypeCollection
   * 
   * @param entityTypeCollectionId    * @param collectionTemplateType 
  */
  public void addTypeToEntityTypeCollectionTemplate (UUID entityTypeCollectionId, CollectionTemplateType collectionTemplateType, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = collectionTemplateType;

    // verify the required parameter 'entityTypeCollectionId' is set
    if (entityTypeCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeCollectionId' when calling addTypeToEntityTypeCollectionTemplate",
        new ApiException(400, "Missing the required parameter 'entityTypeCollectionId' when calling addTypeToEntityTypeCollectionTemplate"));
    }
    // verify the required parameter 'collectionTemplateType' is set
    if (collectionTemplateType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionTemplateType' when calling addTypeToEntityTypeCollectionTemplate",
        new ApiException(400, "Missing the required parameter 'collectionTemplateType' when calling addTypeToEntityTypeCollectionTemplate"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/type/{entityTypeCollectionId}/template".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeCollectionId" + "\\}", apiInvoker.escapeString(entityTypeCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a new EntitySetCollection
  * 
   * @param entitySetCollection 
   * @return UUID
  */
  public UUID createEntitySetCollection (EntitySetCollection entitySetCollection) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = entitySetCollection;
    // verify the required parameter 'entitySetCollection' is set
    if (entitySetCollection == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetCollection' when calling createEntitySetCollection",
        new ApiException(400, "Missing the required parameter 'entitySetCollection' when calling createEntitySetCollection"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/set";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UUID) ApiInvoker.deserialize(localVarResponse, "", UUID.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a new EntitySetCollection
   * 
   * @param entitySetCollection 
  */
  public void createEntitySetCollection (EntitySetCollection entitySetCollection, final Response.Listener<UUID> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = entitySetCollection;

    // verify the required parameter 'entitySetCollection' is set
    if (entitySetCollection == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetCollection' when calling createEntitySetCollection",
        new ApiException(400, "Missing the required parameter 'entitySetCollection' when calling createEntitySetCollection"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/set".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UUID) ApiInvoker.deserialize(localVarResponse,  "", UUID.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a new EntityTypeCollection
  * 
   * @param entityTypeCollection 
   * @return UUID
  */
  public UUID createEntityTypeCollection (EntityTypeCollection entityTypeCollection) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = entityTypeCollection;
    // verify the required parameter 'entityTypeCollection' is set
    if (entityTypeCollection == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeCollection' when calling createEntityTypeCollection",
        new ApiException(400, "Missing the required parameter 'entityTypeCollection' when calling createEntityTypeCollection"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/type";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UUID) ApiInvoker.deserialize(localVarResponse, "", UUID.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a new EntityTypeCollection
   * 
   * @param entityTypeCollection 
  */
  public void createEntityTypeCollection (EntityTypeCollection entityTypeCollection, final Response.Listener<UUID> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = entityTypeCollection;

    // verify the required parameter 'entityTypeCollection' is set
    if (entityTypeCollection == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeCollection' when calling createEntityTypeCollection",
        new ApiException(400, "Missing the required parameter 'entityTypeCollection' when calling createEntityTypeCollection"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/type".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UUID) ApiInvoker.deserialize(localVarResponse,  "", UUID.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes the specified EntitySetCollection
  * 
   * @param entitySetCollectionId 
   * @return void
  */
  public void deleteEntitySetCollection (UUID entitySetCollectionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetCollectionId' is set
    if (entitySetCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetCollectionId' when calling deleteEntitySetCollection",
        new ApiException(400, "Missing the required parameter 'entitySetCollectionId' when calling deleteEntitySetCollection"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/set/{entitySetCollectionId}".replaceAll("\\{" + "entitySetCollectionId" + "\\}", apiInvoker.escapeString(entitySetCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes the specified EntitySetCollection
   * 
   * @param entitySetCollectionId 
  */
  public void deleteEntitySetCollection (UUID entitySetCollectionId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetCollectionId' is set
    if (entitySetCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetCollectionId' when calling deleteEntitySetCollection",
        new ApiException(400, "Missing the required parameter 'entitySetCollectionId' when calling deleteEntitySetCollection"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/set/{entitySetCollectionId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetCollectionId" + "\\}", apiInvoker.escapeString(entitySetCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes the specified EntityTypeCollection
  * 
   * @param entityTypeCollectionId 
   * @return void
  */
  public void deleteEntityTypeCollection (UUID entityTypeCollectionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entityTypeCollectionId' is set
    if (entityTypeCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeCollectionId' when calling deleteEntityTypeCollection",
        new ApiException(400, "Missing the required parameter 'entityTypeCollectionId' when calling deleteEntityTypeCollection"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/type/{entityTypeCollectionId}".replaceAll("\\{" + "entityTypeCollectionId" + "\\}", apiInvoker.escapeString(entityTypeCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes the specified EntityTypeCollection
   * 
   * @param entityTypeCollectionId 
  */
  public void deleteEntityTypeCollection (UUID entityTypeCollectionId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entityTypeCollectionId' is set
    if (entityTypeCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeCollectionId' when calling deleteEntityTypeCollection",
        new ApiException(400, "Missing the required parameter 'entityTypeCollectionId' when calling deleteEntityTypeCollection"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/type/{entityTypeCollectionId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeCollectionId" + "\\}", apiInvoker.escapeString(entityTypeCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns all EntitySetCollection objects
  * 
   * @return List<EntitySetCollection>
  */
  public List<EntitySetCollection> getAllEntitySetCollections () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/datastore/collections/entity/set";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<EntitySetCollection>) ApiInvoker.deserialize(localVarResponse, "array", EntitySetCollection.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns all EntitySetCollection objects
   * 

  */
  public void getAllEntitySetCollections (final Response.Listener<List<EntitySetCollection>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/datastore/collections/entity/set".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<EntitySetCollection>) ApiInvoker.deserialize(localVarResponse,  "array", EntitySetCollection.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns all EntityTypeCollection objects
  * 
   * @return List<EntityTypeCollection>
  */
  public List<EntityTypeCollection> getAllEntityTypeCollections () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/datastore/collections/entity/type";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<EntityTypeCollection>) ApiInvoker.deserialize(localVarResponse, "array", EntityTypeCollection.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns all EntityTypeCollection objects
   * 

  */
  public void getAllEntityTypeCollections (final Response.Listener<List<EntityTypeCollection>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/datastore/collections/entity/type".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<EntityTypeCollection>) ApiInvoker.deserialize(localVarResponse,  "array", EntityTypeCollection.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns the EntitySetCollection object for a given id
  * 
   * @param entitySetCollectionId 
   * @return EntitySetCollection
  */
  public EntitySetCollection getEntitySetCollection (UUID entitySetCollectionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetCollectionId' is set
    if (entitySetCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetCollectionId' when calling getEntitySetCollection",
        new ApiException(400, "Missing the required parameter 'entitySetCollectionId' when calling getEntitySetCollection"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/set/{entitySetCollectionId}".replaceAll("\\{" + "entitySetCollectionId" + "\\}", apiInvoker.escapeString(entitySetCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EntitySetCollection) ApiInvoker.deserialize(localVarResponse, "", EntitySetCollection.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns the EntitySetCollection object for a given id
   * 
   * @param entitySetCollectionId 
  */
  public void getEntitySetCollection (UUID entitySetCollectionId, final Response.Listener<EntitySetCollection> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetCollectionId' is set
    if (entitySetCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetCollectionId' when calling getEntitySetCollection",
        new ApiException(400, "Missing the required parameter 'entitySetCollectionId' when calling getEntitySetCollection"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/set/{entitySetCollectionId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetCollectionId" + "\\}", apiInvoker.escapeString(entitySetCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EntitySetCollection) ApiInvoker.deserialize(localVarResponse,  "", EntitySetCollection.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns all authorized EntitySetCollections for a given EntityTypeCollection id
  * 
   * @param entitySetCollectionId 
   * @return List<EntitySetCollection>
  */
  public List<EntitySetCollection> getEntitySetCollectionsOfType (UUID entitySetCollectionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetCollectionId' is set
    if (entitySetCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetCollectionId' when calling getEntitySetCollectionsOfType",
        new ApiException(400, "Missing the required parameter 'entitySetCollectionId' when calling getEntitySetCollectionsOfType"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/set/entity/type/{entitySetCollectionId}".replaceAll("\\{" + "entitySetCollectionId" + "\\}", apiInvoker.escapeString(entitySetCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<EntitySetCollection>) ApiInvoker.deserialize(localVarResponse, "array", EntitySetCollection.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns all authorized EntitySetCollections for a given EntityTypeCollection id
   * 
   * @param entitySetCollectionId 
  */
  public void getEntitySetCollectionsOfType (UUID entitySetCollectionId, final Response.Listener<List<EntitySetCollection>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetCollectionId' is set
    if (entitySetCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetCollectionId' when calling getEntitySetCollectionsOfType",
        new ApiException(400, "Missing the required parameter 'entitySetCollectionId' when calling getEntitySetCollectionsOfType"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/set/entity/type/{entitySetCollectionId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetCollectionId" + "\\}", apiInvoker.escapeString(entitySetCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<EntitySetCollection>) ApiInvoker.deserialize(localVarResponse,  "array", EntitySetCollection.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns the EntityTypeCollection object for a given id
  * 
   * @param entityTypeCollectionId 
   * @return EntityTypeCollection
  */
  public EntityTypeCollection getEntityTypeCollection (UUID entityTypeCollectionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entityTypeCollectionId' is set
    if (entityTypeCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeCollectionId' when calling getEntityTypeCollection",
        new ApiException(400, "Missing the required parameter 'entityTypeCollectionId' when calling getEntityTypeCollection"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/type/{entityTypeCollectionId}".replaceAll("\\{" + "entityTypeCollectionId" + "\\}", apiInvoker.escapeString(entityTypeCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EntityTypeCollection) ApiInvoker.deserialize(localVarResponse, "", EntityTypeCollection.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns the EntityTypeCollection object for a given id
   * 
   * @param entityTypeCollectionId 
  */
  public void getEntityTypeCollection (UUID entityTypeCollectionId, final Response.Listener<EntityTypeCollection> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entityTypeCollectionId' is set
    if (entityTypeCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeCollectionId' when calling getEntityTypeCollection",
        new ApiException(400, "Missing the required parameter 'entityTypeCollectionId' when calling getEntityTypeCollection"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/type/{entityTypeCollectionId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeCollectionId" + "\\}", apiInvoker.escapeString(entityTypeCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EntityTypeCollection) ApiInvoker.deserialize(localVarResponse,  "", EntityTypeCollection.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Removes a key from an EntityTypeCollection template
  * 
   * @param entityTypeCollectionId 
   * @param typeId 
   * @return void
  */
  public void removeTypeFromEntityTypeCollectionTemplate (UUID entityTypeCollectionId, UUID typeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entityTypeCollectionId' is set
    if (entityTypeCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeCollectionId' when calling removeTypeFromEntityTypeCollectionTemplate",
        new ApiException(400, "Missing the required parameter 'entityTypeCollectionId' when calling removeTypeFromEntityTypeCollectionTemplate"));
    }
    // verify the required parameter 'typeId' is set
    if (typeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'typeId' when calling removeTypeFromEntityTypeCollectionTemplate",
        new ApiException(400, "Missing the required parameter 'typeId' when calling removeTypeFromEntityTypeCollectionTemplate"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/type/{entityTypeCollectionId}/template/{typeId}".replaceAll("\\{" + "entityTypeCollectionId" + "\\}", apiInvoker.escapeString(entityTypeCollectionId.toString())).replaceAll("\\{" + "typeId" + "\\}", apiInvoker.escapeString(typeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Removes a key from an EntityTypeCollection template
   * 
   * @param entityTypeCollectionId    * @param typeId 
  */
  public void removeTypeFromEntityTypeCollectionTemplate (UUID entityTypeCollectionId, UUID typeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entityTypeCollectionId' is set
    if (entityTypeCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeCollectionId' when calling removeTypeFromEntityTypeCollectionTemplate",
        new ApiException(400, "Missing the required parameter 'entityTypeCollectionId' when calling removeTypeFromEntityTypeCollectionTemplate"));
    }
    // verify the required parameter 'typeId' is set
    if (typeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'typeId' when calling removeTypeFromEntityTypeCollectionTemplate",
        new ApiException(400, "Missing the required parameter 'typeId' when calling removeTypeFromEntityTypeCollectionTemplate"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/type/{entityTypeCollectionId}/template/{typeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeCollectionId" + "\\}", apiInvoker.escapeString(entityTypeCollectionId.toString())).replaceAll("\\{" + "typeId" + "\\}", apiInvoker.escapeString(typeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates metadata of the specified EntitySetCollection
  * 
   * @param entitySetCollectionId 
   * @param metadataUpdate 
   * @return void
  */
  public void updateEntitySetCollectionMetadata (UUID entitySetCollectionId, MetadataUpdate metadataUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = metadataUpdate;
    // verify the required parameter 'entitySetCollectionId' is set
    if (entitySetCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetCollectionId' when calling updateEntitySetCollectionMetadata",
        new ApiException(400, "Missing the required parameter 'entitySetCollectionId' when calling updateEntitySetCollectionMetadata"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updateEntitySetCollectionMetadata",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updateEntitySetCollectionMetadata"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/set/{entitySetCollectionId}".replaceAll("\\{" + "entitySetCollectionId" + "\\}", apiInvoker.escapeString(entitySetCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates metadata of the specified EntitySetCollection
   * 
   * @param entitySetCollectionId    * @param metadataUpdate 
  */
  public void updateEntitySetCollectionMetadata (UUID entitySetCollectionId, MetadataUpdate metadataUpdate, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = metadataUpdate;

    // verify the required parameter 'entitySetCollectionId' is set
    if (entitySetCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetCollectionId' when calling updateEntitySetCollectionMetadata",
        new ApiException(400, "Missing the required parameter 'entitySetCollectionId' when calling updateEntitySetCollectionMetadata"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updateEntitySetCollectionMetadata",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updateEntitySetCollectionMetadata"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/set/{entitySetCollectionId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetCollectionId" + "\\}", apiInvoker.escapeString(entitySetCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates template of the specified EntitySetCollection
  * 
   * @param entitySetCollectionId 
   * @param requestBody 
   * @return void
  */
  public void updateEntitySetCollectionTemplate (UUID entitySetCollectionId, Map<String, UUID> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;
    // verify the required parameter 'entitySetCollectionId' is set
    if (entitySetCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetCollectionId' when calling updateEntitySetCollectionTemplate",
        new ApiException(400, "Missing the required parameter 'entitySetCollectionId' when calling updateEntitySetCollectionTemplate"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling updateEntitySetCollectionTemplate",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling updateEntitySetCollectionTemplate"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/set/{entitySetCollectionId}/template".replaceAll("\\{" + "entitySetCollectionId" + "\\}", apiInvoker.escapeString(entitySetCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates template of the specified EntitySetCollection
   * 
   * @param entitySetCollectionId    * @param requestBody 
  */
  public void updateEntitySetCollectionTemplate (UUID entitySetCollectionId, Map<String, UUID> requestBody, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;

    // verify the required parameter 'entitySetCollectionId' is set
    if (entitySetCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetCollectionId' when calling updateEntitySetCollectionTemplate",
        new ApiException(400, "Missing the required parameter 'entitySetCollectionId' when calling updateEntitySetCollectionTemplate"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling updateEntitySetCollectionTemplate",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling updateEntitySetCollectionTemplate"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/set/{entitySetCollectionId}/template".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetCollectionId" + "\\}", apiInvoker.escapeString(entitySetCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates metadata of the specified EntityTypeCollection
  * 
   * @param entityTypeCollectionId 
   * @param metadataUpdate 
   * @return void
  */
  public void updateEntityTypeCollectionMetadata (UUID entityTypeCollectionId, MetadataUpdate metadataUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = metadataUpdate;
    // verify the required parameter 'entityTypeCollectionId' is set
    if (entityTypeCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeCollectionId' when calling updateEntityTypeCollectionMetadata",
        new ApiException(400, "Missing the required parameter 'entityTypeCollectionId' when calling updateEntityTypeCollectionMetadata"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updateEntityTypeCollectionMetadata",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updateEntityTypeCollectionMetadata"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/type/{entityTypeCollectionId}".replaceAll("\\{" + "entityTypeCollectionId" + "\\}", apiInvoker.escapeString(entityTypeCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates metadata of the specified EntityTypeCollection
   * 
   * @param entityTypeCollectionId    * @param metadataUpdate 
  */
  public void updateEntityTypeCollectionMetadata (UUID entityTypeCollectionId, MetadataUpdate metadataUpdate, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = metadataUpdate;

    // verify the required parameter 'entityTypeCollectionId' is set
    if (entityTypeCollectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeCollectionId' when calling updateEntityTypeCollectionMetadata",
        new ApiException(400, "Missing the required parameter 'entityTypeCollectionId' when calling updateEntityTypeCollectionMetadata"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updateEntityTypeCollectionMetadata",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updateEntityTypeCollectionMetadata"));
    }

    // create path and map variables
    String path = "/datastore/collections/entity/type/{entityTypeCollectionId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeCollectionId" + "\\}", apiInvoker.escapeString(entityTypeCollectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
