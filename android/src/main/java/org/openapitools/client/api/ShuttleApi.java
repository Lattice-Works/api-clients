/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.Integration;
import org.openapitools.client.model.IntegrationJob;
import org.openapitools.client.model.IntegrationStatus;
import org.openapitools.client.model.IntegrationUpdate;
import java.util.UUID;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ShuttleApi {
  String basePath = "https://api.openlattice.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Creates a new integration definition for running recurring integrations
  * 
   * @param integrationName 
   * @param integration 
   * @return UUID
  */
  public UUID createIntegrationDefinition (String integrationName, Integration integration) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = integration;
    // verify the required parameter 'integrationName' is set
    if (integrationName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integrationName' when calling createIntegrationDefinition",
        new ApiException(400, "Missing the required parameter 'integrationName' when calling createIntegrationDefinition"));
    }
    // verify the required parameter 'integration' is set
    if (integration == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integration' when calling createIntegrationDefinition",
        new ApiException(400, "Missing the required parameter 'integration' when calling createIntegrationDefinition"));
    }

    // create path and map variables
    String path = "/shuttle/integration/definition/{integrationName}".replaceAll("\\{" + "integrationName" + "\\}", apiInvoker.escapeString(integrationName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UUID) ApiInvoker.deserialize(localVarResponse, "", UUID.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a new integration definition for running recurring integrations
   * 
   * @param integrationName    * @param integration 
  */
  public void createIntegrationDefinition (String integrationName, Integration integration, final Response.Listener<UUID> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = integration;

    // verify the required parameter 'integrationName' is set
    if (integrationName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integrationName' when calling createIntegrationDefinition",
        new ApiException(400, "Missing the required parameter 'integrationName' when calling createIntegrationDefinition"));
    }
    // verify the required parameter 'integration' is set
    if (integration == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integration' when calling createIntegrationDefinition",
        new ApiException(400, "Missing the required parameter 'integration' when calling createIntegrationDefinition"));
    }

    // create path and map variables
    String path = "/shuttle/integration/definition/{integrationName}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "integrationName" + "\\}", apiInvoker.escapeString(integrationName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UUID) ApiInvoker.deserialize(localVarResponse,  "", UUID.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Replaces any number of fields within an existing integration definition
  * 
   * @param integrationName 
   * @return void
  */
  public void deleteIntegrationDefinition (String integrationName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'integrationName' is set
    if (integrationName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integrationName' when calling deleteIntegrationDefinition",
        new ApiException(400, "Missing the required parameter 'integrationName' when calling deleteIntegrationDefinition"));
    }

    // create path and map variables
    String path = "/shuttle/integration/definition/{integrationName}".replaceAll("\\{" + "integrationName" + "\\}", apiInvoker.escapeString(integrationName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Replaces any number of fields within an existing integration definition
   * 
   * @param integrationName 
  */
  public void deleteIntegrationDefinition (String integrationName, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'integrationName' is set
    if (integrationName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integrationName' when calling deleteIntegrationDefinition",
        new ApiException(400, "Missing the required parameter 'integrationName' when calling deleteIntegrationDefinition"));
    }

    // create path and map variables
    String path = "/shuttle/integration/definition/{integrationName}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "integrationName" + "\\}", apiInvoker.escapeString(integrationName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes an integration job status from the integrationJobs map
  * 
   * @param jobId the unique id of the integration job
   * @return void
  */
  public void deleteIntegrationJobStatus (UUID jobId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling deleteIntegrationJobStatus",
        new ApiException(400, "Missing the required parameter 'jobId' when calling deleteIntegrationJobStatus"));
    }

    // create path and map variables
    String path = "/shuttle/integration/status/{jobId}".replaceAll("\\{" + "jobId" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes an integration job status from the integrationJobs map
   * 
   * @param jobId the unique id of the integration job
  */
  public void deleteIntegrationJobStatus (UUID jobId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling deleteIntegrationJobStatus",
        new ApiException(400, "Missing the required parameter 'jobId' when calling deleteIntegrationJobStatus"));
    }

    // create path and map variables
    String path = "/shuttle/integration/status/{jobId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "jobId" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Enqueues an integration on Shuttle Server for a given integration
  * 
   * @param integrationName the name of the integration to be run
   * @param integrationKey the unique id used to authenticate an integration run
   * @return UUID
  */
  public UUID enqueueIntegration (String integrationName, UUID integrationKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'integrationName' is set
    if (integrationName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integrationName' when calling enqueueIntegration",
        new ApiException(400, "Missing the required parameter 'integrationName' when calling enqueueIntegration"));
    }
    // verify the required parameter 'integrationKey' is set
    if (integrationKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integrationKey' when calling enqueueIntegration",
        new ApiException(400, "Missing the required parameter 'integrationKey' when calling enqueueIntegration"));
    }

    // create path and map variables
    String path = "/shuttle/integration/{integrationName}/{integrationKey}".replaceAll("\\{" + "integrationName" + "\\}", apiInvoker.escapeString(integrationName.toString())).replaceAll("\\{" + "integrationKey" + "\\}", apiInvoker.escapeString(integrationKey.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UUID) ApiInvoker.deserialize(localVarResponse, "", UUID.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Enqueues an integration on Shuttle Server for a given integration
   * 
   * @param integrationName the name of the integration to be run   * @param integrationKey the unique id used to authenticate an integration run
  */
  public void enqueueIntegration (String integrationName, UUID integrationKey, final Response.Listener<UUID> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'integrationName' is set
    if (integrationName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integrationName' when calling enqueueIntegration",
        new ApiException(400, "Missing the required parameter 'integrationName' when calling enqueueIntegration"));
    }
    // verify the required parameter 'integrationKey' is set
    if (integrationKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integrationKey' when calling enqueueIntegration",
        new ApiException(400, "Missing the required parameter 'integrationKey' when calling enqueueIntegration"));
    }

    // create path and map variables
    String path = "/shuttle/integration/{integrationName}/{integrationKey}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "integrationName" + "\\}", apiInvoker.escapeString(integrationName.toString())).replaceAll("\\{" + "integrationKey" + "\\}", apiInvoker.escapeString(integrationKey.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UUID) ApiInvoker.deserialize(localVarResponse,  "", UUID.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Polls the statuses of all running integrations
  * 
   * @return Map<String, IntegrationJob>
  */
  public Map<String, IntegrationJob> pollAllIntegrations () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/shuttle/integration/status";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, IntegrationJob>) ApiInvoker.deserialize(localVarResponse, "map", IntegrationJob.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Polls the statuses of all running integrations
   * 

  */
  public void pollAllIntegrations (final Response.Listener<Map<String, IntegrationJob>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/shuttle/integration/status".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, IntegrationJob>) ApiInvoker.deserialize(localVarResponse,  "map", IntegrationJob.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Polls the status of an integration
  * 
   * @param jobId the unique id of the integration job
   * @return IntegrationStatus
  */
  public IntegrationStatus pollIntegration (UUID jobId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling pollIntegration",
        new ApiException(400, "Missing the required parameter 'jobId' when calling pollIntegration"));
    }

    // create path and map variables
    String path = "/shuttle/integration/status/{jobId}".replaceAll("\\{" + "jobId" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (IntegrationStatus) ApiInvoker.deserialize(localVarResponse, "", IntegrationStatus.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Polls the status of an integration
   * 
   * @param jobId the unique id of the integration job
  */
  public void pollIntegration (UUID jobId, final Response.Listener<IntegrationStatus> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling pollIntegration",
        new ApiException(400, "Missing the required parameter 'jobId' when calling pollIntegration"));
    }

    // create path and map variables
    String path = "/shuttle/integration/status/{jobId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "jobId" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((IntegrationStatus) ApiInvoker.deserialize(localVarResponse,  "", IntegrationStatus.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets an existing integration definition
  * 
   * @param integrationName 
   * @return Integration
  */
  public Integration readIntegrationDefinition (String integrationName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'integrationName' is set
    if (integrationName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integrationName' when calling readIntegrationDefinition",
        new ApiException(400, "Missing the required parameter 'integrationName' when calling readIntegrationDefinition"));
    }

    // create path and map variables
    String path = "/shuttle/integration/definition/{integrationName}".replaceAll("\\{" + "integrationName" + "\\}", apiInvoker.escapeString(integrationName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integration) ApiInvoker.deserialize(localVarResponse, "", Integration.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets an existing integration definition
   * 
   * @param integrationName 
  */
  public void readIntegrationDefinition (String integrationName, final Response.Listener<Integration> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'integrationName' is set
    if (integrationName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integrationName' when calling readIntegrationDefinition",
        new ApiException(400, "Missing the required parameter 'integrationName' when calling readIntegrationDefinition"));
    }

    // create path and map variables
    String path = "/shuttle/integration/definition/{integrationName}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "integrationName" + "\\}", apiInvoker.escapeString(integrationName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integration) ApiInvoker.deserialize(localVarResponse,  "", Integration.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Replaces any number of fields within an existing integration definition
  * 
   * @param integrationName 
   * @param integrationUpdate 
   * @return void
  */
  public void updateIntegrationDefinition (String integrationName, IntegrationUpdate integrationUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = integrationUpdate;
    // verify the required parameter 'integrationName' is set
    if (integrationName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integrationName' when calling updateIntegrationDefinition",
        new ApiException(400, "Missing the required parameter 'integrationName' when calling updateIntegrationDefinition"));
    }
    // verify the required parameter 'integrationUpdate' is set
    if (integrationUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integrationUpdate' when calling updateIntegrationDefinition",
        new ApiException(400, "Missing the required parameter 'integrationUpdate' when calling updateIntegrationDefinition"));
    }

    // create path and map variables
    String path = "/shuttle/integration/definition/{integrationName}".replaceAll("\\{" + "integrationName" + "\\}", apiInvoker.escapeString(integrationName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Replaces any number of fields within an existing integration definition
   * 
   * @param integrationName    * @param integrationUpdate 
  */
  public void updateIntegrationDefinition (String integrationName, IntegrationUpdate integrationUpdate, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = integrationUpdate;

    // verify the required parameter 'integrationName' is set
    if (integrationName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integrationName' when calling updateIntegrationDefinition",
        new ApiException(400, "Missing the required parameter 'integrationName' when calling updateIntegrationDefinition"));
    }
    // verify the required parameter 'integrationUpdate' is set
    if (integrationUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'integrationUpdate' when calling updateIntegrationDefinition",
        new ApiException(400, "Missing the required parameter 'integrationUpdate' when calling updateIntegrationDefinition"));
    }

    // create path and map variables
    String path = "/shuttle/integration/definition/{integrationName}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "integrationName" + "\\}", apiInvoker.escapeString(integrationName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
