/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.EntitySet;
import org.openapitools.client.model.EntitySetPropertyMetaData;
import java.util.*;
import java.util.Map;
import org.openapitools.client.model.MetadataUpdate;
import org.openapitools.client.model.PropertyType;
import java.util.UUID;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class EntitySetsApi {
  String basePath = "https://api.openlattice.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Adds the entity sets as linked entity sets to the linking entity set
  * 
   * @param linkingEntitySetId 
   * @param UUID 
   * @return Integer
  */
  public Integer addEntitySetsToLinkingEntitySet (UUID linkingEntitySetId, List<UUID> UUID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = UUID;
    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySet",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/{linkingEntitySetId}".replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds the entity sets as linked entity sets to the linking entity set
   * 
   * @param linkingEntitySetId    * @param UUID 
  */
  public void addEntitySetsToLinkingEntitySet (UUID linkingEntitySetId, List<UUID> UUID, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = UUID;

    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySet",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/{linkingEntitySetId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds the entity sets as linked entity sets to the linking entity sets
  * 
   * @param linkingEntitySetId 
   * @param requestBody 
   * @return Integer
  */
  public Integer addEntitySetsToLinkingEntitySets (String linkingEntitySetId, Map<String, List<UUID>> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;
    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySets"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling addEntitySetsToLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling addEntitySetsToLinkingEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/".replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds the entity sets as linked entity sets to the linking entity sets
   * 
   * @param linkingEntitySetId    * @param requestBody 
  */
  public void addEntitySetsToLinkingEntitySets (String linkingEntitySetId, Map<String, List<UUID>> requestBody, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;

    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySets"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling addEntitySetsToLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling addEntitySetsToLinkingEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates new EntitySet definitions if they don&#39;t exist.
  * 
   * @param entitySet 
   * @return void
  */
  public void createEntitySets (List<EntitySet> entitySet) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = entitySet;
    // verify the required parameter 'entitySet' is set
    if (entitySet == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySet' when calling createEntitySets",
        new ApiException(400, "Missing the required parameter 'entitySet' when calling createEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates new EntitySet definitions if they don&#39;t exist.
   * 
   * @param entitySet 
  */
  public void createEntitySets (List<EntitySet> entitySet, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = entitySet;

    // verify the required parameter 'entitySet' is set
    if (entitySet == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySet' when calling createEntitySets",
        new ApiException(400, "Missing the required parameter 'entitySet' when calling createEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes the EntitySet definition for the given EntitySet UUID.
  * 
   * @param entitySetId 
   * @return void
  */
  public void deleteEntitySet (UUID entitySetId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling deleteEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling deleteEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes the EntitySet definition for the given EntitySet UUID.
   * 
   * @param entitySetId 
  */
  public void deleteEntitySet (UUID entitySetId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling deleteEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling deleteEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all entity set property metadata.
  * 
   * @param entitySetId 
   * @return Map<String, EntitySetPropertyMetaData>
  */
  public Map<String, EntitySetPropertyMetaData> getAllEntitySetPropertyMetadata (UUID entitySetId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getAllEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getAllEntitySetPropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/metadata".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, EntitySetPropertyMetaData>) ApiInvoker.deserialize(localVarResponse, "map", EntitySetPropertyMetaData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all entity set property metadata.
   * 
   * @param entitySetId 
  */
  public void getAllEntitySetPropertyMetadata (UUID entitySetId, final Response.Listener<Map<String, EntitySetPropertyMetaData>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getAllEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getAllEntitySetPropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/metadata".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, EntitySetPropertyMetaData>) ApiInvoker.deserialize(localVarResponse,  "map", EntitySetPropertyMetaData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all EntitySet definitions.
  * 
   * @return List<EntitySet>
  */
  public List<EntitySet> getAllEntitySets () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/datastore/entity-sets";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<EntitySet>) ApiInvoker.deserialize(localVarResponse, "array", EntitySet.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all EntitySet definitions.
   * 

  */
  public void getAllEntitySets (final Response.Listener<List<EntitySet>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/datastore/entity-sets".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<EntitySet>) ApiInvoker.deserialize(localVarResponse,  "array", EntitySet.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the EntitySet definition for the given EntitySet UUID.
  * 
   * @param entitySetId 
   * @return EntitySet
  */
  public EntitySet getEntitySet (UUID entitySetId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EntitySet) ApiInvoker.deserialize(localVarResponse, "", EntitySet.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the EntitySet definition for the given EntitySet UUID.
   * 
   * @param entitySetId 
  */
  public void getEntitySet (UUID entitySetId, final Response.Listener<EntitySet> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EntitySet) ApiInvoker.deserialize(localVarResponse,  "", EntitySet.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the EntitySet UUID for the given EntitySet name.
  * 
   * @param entitySetName 
   * @return UUID
  */
  public UUID getEntitySetId (String entitySetName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetName' is set
    if (entitySetName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetName' when calling getEntitySetId",
        new ApiException(400, "Missing the required parameter 'entitySetName' when calling getEntitySetId"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/ids/{entitySetName}".replaceAll("\\{" + "entitySetName" + "\\}", apiInvoker.escapeString(entitySetName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UUID) ApiInvoker.deserialize(localVarResponse, "", UUID.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the EntitySet UUID for the given EntitySet name.
   * 
   * @param entitySetName 
  */
  public void getEntitySetId (String entitySetName, final Response.Listener<UUID> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetName' is set
    if (entitySetName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetName' when calling getEntitySetId",
        new ApiException(400, "Missing the required parameter 'entitySetName' when calling getEntitySetId"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/ids/{entitySetName}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetName" + "\\}", apiInvoker.escapeString(entitySetName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UUID) ApiInvoker.deserialize(localVarResponse,  "", UUID.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get IDs for entity sets given their names.
  * 
   * @param requestBody 
   * @return Map<String, UUID>
  */
  public Map<String, UUID> getEntitySetIds (List<String> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;

    // create path and map variables
    String path = "/datastore/entity-sets/ids/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, UUID>) ApiInvoker.deserialize(localVarResponse, "map", UUID.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get IDs for entity sets given their names.
   * 
   * @param requestBody 
  */
  public void getEntitySetIds (List<String> requestBody, final Response.Listener<Map<String, UUID>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;


    // create path and map variables
    String path = "/datastore/entity-sets/ids/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, UUID>) ApiInvoker.deserialize(localVarResponse,  "map", UUID.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get specified property type metadata for an entity set.
  * 
   * @param entitySetId 
   * @param propertyTypeId 
   * @return EntitySetPropertyMetaData
  */
  public EntitySetPropertyMetaData getEntitySetPropertyMetadata (UUID entitySetId, UUID propertyTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getEntitySetPropertyMetadata"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling getEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling getEntitySetPropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EntitySetPropertyMetaData) ApiInvoker.deserialize(localVarResponse, "", EntitySetPropertyMetaData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get specified property type metadata for an entity set.
   * 
   * @param entitySetId    * @param propertyTypeId 
  */
  public void getEntitySetPropertyMetadata (UUID entitySetId, UUID propertyTypeId, final Response.Listener<EntitySetPropertyMetaData> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getEntitySetPropertyMetadata"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling getEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling getEntitySetPropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EntitySetPropertyMetaData) ApiInvoker.deserialize(localVarResponse,  "", EntitySetPropertyMetaData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get property metadata for entity sets.
  * 
   * @param requestBody 
   * @return Map<String, Map<String, EntitySetPropertyMetaData>>
  */
  public Map<String, Map<String, EntitySetPropertyMetaData>> getPropertyMetadataForEntitySets (List<String> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;

    // create path and map variables
    String path = "/datastore/entity-sets/all/metadata";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, Map<String, EntitySetPropertyMetaData>>) ApiInvoker.deserialize(localVarResponse, "map", Map.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get property metadata for entity sets.
   * 
   * @param requestBody 
  */
  public void getPropertyMetadataForEntitySets (List<String> requestBody, final Response.Listener<Map<String, Map<String, EntitySetPropertyMetaData>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;


    // create path and map variables
    String path = "/datastore/entity-sets/all/metadata".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, Map<String, EntitySetPropertyMetaData>>) ApiInvoker.deserialize(localVarResponse,  "map", Map.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all Property Types for entity set
  * 
   * @param entitySetId 
   * @return Map<String, PropertyType>
  */
  public Map<String, PropertyType> getPropertyTypesForEntitySet (UUID entitySetId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getPropertyTypesForEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getPropertyTypesForEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/properties".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, PropertyType>) ApiInvoker.deserialize(localVarResponse, "map", PropertyType.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all Property Types for entity set
   * 
   * @param entitySetId 
  */
  public void getPropertyTypesForEntitySet (UUID entitySetId, final Response.Listener<Map<String, PropertyType>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getPropertyTypesForEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getPropertyTypesForEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/properties".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, PropertyType>) ApiInvoker.deserialize(localVarResponse,  "map", PropertyType.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Removes/unlinks the linked entity sets from the linking entity set
  * 
   * @param linkingEntitySetId 
   * @param UUID 
   * @return Integer
  */
  public Integer removeEntitySetsFromLinkingEntitySet (String linkingEntitySetId, List<UUID> UUID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = UUID;
    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySet",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/{linkingEntitySetId}".replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Removes/unlinks the linked entity sets from the linking entity set
   * 
   * @param linkingEntitySetId    * @param UUID 
  */
  public void removeEntitySetsFromLinkingEntitySet (String linkingEntitySetId, List<UUID> UUID, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = UUID;

    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySet",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/{linkingEntitySetId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Removes/unlinks the linked entity sets from the linking entity set
  * 
   * @param linkingEntitySetId 
   * @param requestBody 
   * @return Integer
  */
  public Integer removeEntitySetsFromLinkingEntitySets (UUID linkingEntitySetId, Map<String, List<UUID>> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;
    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySets"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling removeEntitySetsFromLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling removeEntitySetsFromLinkingEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/".replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Removes/unlinks the linked entity sets from the linking entity set
   * 
   * @param linkingEntitySetId    * @param requestBody 
  */
  public void removeEntitySetsFromLinkingEntitySets (UUID linkingEntitySetId, Map<String, List<UUID>> requestBody, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;

    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySets"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling removeEntitySetsFromLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling removeEntitySetsFromLinkingEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Used to repartition an entity set. This will shuffle corresponding ids, edges, and data table rows for the entity set.
  * 
   * @param entitySetId 
   * @param requestBody 
   * @return void
  */
  public void repartitionEntitySet (UUID entitySetId, List<Integer> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling repartitionEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling repartitionEntitySet"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling repartitionEntitySet",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling repartitionEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/{entitySetId}/partitions".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Used to repartition an entity set. This will shuffle corresponding ids, edges, and data table rows for the entity set.
   * 
   * @param entitySetId    * @param requestBody 
  */
  public void repartitionEntitySet (UUID entitySetId, List<Integer> requestBody, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling repartitionEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling repartitionEntitySet"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling repartitionEntitySet",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling repartitionEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/{entitySetId}/partitions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the EntitySet definition for the given EntitySet UUID with the given metadata.
  * 
   * @param entitySetId 
   * @param metadataUpdate 
   * @return Integer
  */
  public Integer updateEntitySetMetaData (UUID entitySetId, MetadataUpdate metadataUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = metadataUpdate;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling updateEntitySetMetaData",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling updateEntitySetMetaData"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updateEntitySetMetaData",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updateEntitySetMetaData"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/metadata/".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the EntitySet definition for the given EntitySet UUID with the given metadata.
   * 
   * @param entitySetId    * @param metadataUpdate 
  */
  public void updateEntitySetMetaData (UUID entitySetId, MetadataUpdate metadataUpdate, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = metadataUpdate;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling updateEntitySetMetaData",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling updateEntitySetMetaData"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updateEntitySetMetaData",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updateEntitySetMetaData"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/metadata/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the property type metadata for the given entity set.
  * 
   * @param entitySetId 
   * @param propertyTypeId 
   * @param metadataUpdate 
   * @return void
  */
  public void updateEntitySetPropertyMetadata (UUID entitySetId, UUID propertyTypeId, MetadataUpdate metadataUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = metadataUpdate;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling updateEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling updateEntitySetPropertyMetadata"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling updateEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling updateEntitySetPropertyMetadata"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updateEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updateEntitySetPropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the property type metadata for the given entity set.
   * 
   * @param entitySetId    * @param propertyTypeId    * @param metadataUpdate 
  */
  public void updateEntitySetPropertyMetadata (UUID entitySetId, UUID propertyTypeId, MetadataUpdate metadataUpdate, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = metadataUpdate;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling updateEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling updateEntitySetPropertyMetadata"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling updateEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling updateEntitySetPropertyMetadata"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updateEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updateEntitySetPropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
