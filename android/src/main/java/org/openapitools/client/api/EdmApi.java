/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AssociationType;
import org.openapitools.client.model.EDM;
import org.openapitools.client.model.EDMdiff;
import org.openapitools.client.model.EdmRequest;
import org.openapitools.client.model.EntitySet;
import org.openapitools.client.model.EntitySetPropertyMetaData;
import org.openapitools.client.model.EntityType;
import org.openapitools.client.model.EntityTypePropertyMetadata;
import java.util.*;
import java.util.Map;
import org.openapitools.client.model.MetadataUpdate;
import org.openapitools.client.model.PropertyType;
import org.openapitools.client.model.PropertyUsageSummary;
import org.openapitools.client.model.Schema;
import java.util.UUID;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class EdmApi {
  String basePath = "https://api.openlattice.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Update the AssociationType dst entity types for the given AssociationType UUID by adding the given EntityType UUID.
  * 
   * @param associationTypeId 
   * @param entityTypeId 
   * @return void
  */
  public void addDstEntityTypeToAssociationType (UUID associationTypeId, UUID entityTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling addDstEntityTypeToAssociationType",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling addDstEntityTypeToAssociationType"));
    }
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling addDstEntityTypeToAssociationType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling addDstEntityTypeToAssociationType"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}/dst/{entityTypeId}".replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString())).replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update the AssociationType dst entity types for the given AssociationType UUID by adding the given EntityType UUID.
   * 
   * @param associationTypeId    * @param entityTypeId 
  */
  public void addDstEntityTypeToAssociationType (UUID associationTypeId, UUID entityTypeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling addDstEntityTypeToAssociationType",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling addDstEntityTypeToAssociationType"));
    }
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling addDstEntityTypeToAssociationType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling addDstEntityTypeToAssociationType"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}/dst/{entityTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString())).replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds the entity sets as linked entity sets to the linking entity set
  * 
   * @param linkingEntitySetId 
   * @param UUID 
   * @return Integer
  */
  public Integer addEntitySetsToLinkingEntitySet (UUID linkingEntitySetId, List<UUID> UUID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = UUID;
    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySet",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/{linkingEntitySetId}".replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds the entity sets as linked entity sets to the linking entity set
   * 
   * @param linkingEntitySetId    * @param UUID 
  */
  public void addEntitySetsToLinkingEntitySet (UUID linkingEntitySetId, List<UUID> UUID, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = UUID;

    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySet",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/{linkingEntitySetId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds the entity sets as linked entity sets to the linking entity sets
  * 
   * @param linkingEntitySetId 
   * @param requestBody 
   * @return Integer
  */
  public Integer addEntitySetsToLinkingEntitySets (String linkingEntitySetId, Map<String, List<UUID>> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;
    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySets"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling addEntitySetsToLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling addEntitySetsToLinkingEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/".replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds the entity sets as linked entity sets to the linking entity sets
   * 
   * @param linkingEntitySetId    * @param requestBody 
  */
  public void addEntitySetsToLinkingEntitySets (String linkingEntitySetId, Map<String, List<UUID>> requestBody, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;

    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySets"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling addEntitySetsToLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling addEntitySetsToLinkingEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds a primary key with a given ID to an entity type with a given ID.
  * 
   * @param entityTypeId 
   * @param propertyTypeId 
   * @return void
  */
  public void addPrimaryKeyToEntityType (UUID entityTypeId, UUID propertyTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling addPrimaryKeyToEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling addPrimaryKeyToEntityType"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling addPrimaryKeyToEntityType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling addPrimaryKeyToEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/key/{entityTypeId}/{propertyTypeId}".replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds a primary key with a given ID to an entity type with a given ID.
   * 
   * @param entityTypeId    * @param propertyTypeId 
  */
  public void addPrimaryKeyToEntityType (UUID entityTypeId, UUID propertyTypeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling addPrimaryKeyToEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling addPrimaryKeyToEntityType"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling addPrimaryKeyToEntityType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling addPrimaryKeyToEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/key/{entityTypeId}/{propertyTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the EntityType definition for the given EntityType UUID by adding the given PropertyType UUID.
  * 
   * @param entityTypeId 
   * @param propertyTypeId 
   * @return void
  */
  public void addPropertyTypeToEntityType (UUID entityTypeId, UUID propertyTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling addPropertyTypeToEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling addPropertyTypeToEntityType"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling addPropertyTypeToEntityType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling addPropertyTypeToEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}".replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the EntityType definition for the given EntityType UUID by adding the given PropertyType UUID.
   * 
   * @param entityTypeId    * @param propertyTypeId 
  */
  public void addPropertyTypeToEntityType (UUID entityTypeId, UUID propertyTypeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling addPropertyTypeToEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling addPropertyTypeToEntityType"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling addPropertyTypeToEntityType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling addPropertyTypeToEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update the AssociationType src entity types for the given AssociationType UUID by adding the given EntityType UUID.
  * 
   * @param associationTypeId 
   * @param entityTypeId 
   * @return void
  */
  public void addSrcEntityTypeToAssociationType (UUID associationTypeId, UUID entityTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling addSrcEntityTypeToAssociationType",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling addSrcEntityTypeToAssociationType"));
    }
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling addSrcEntityTypeToAssociationType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling addSrcEntityTypeToAssociationType"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}/src/{entityTypeId}".replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString())).replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update the AssociationType src entity types for the given AssociationType UUID by adding the given EntityType UUID.
   * 
   * @param associationTypeId    * @param entityTypeId 
  */
  public void addSrcEntityTypeToAssociationType (UUID associationTypeId, UUID entityTypeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling addSrcEntityTypeToAssociationType",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling addSrcEntityTypeToAssociationType"));
    }
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling addSrcEntityTypeToAssociationType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling addSrcEntityTypeToAssociationType"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}/src/{entityTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString())).replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a new AssociationType definition, if it doesn&#39;t exist.
  * 
   * @param associationType 
   * @return void
  */
  public void createAssociationType (List<AssociationType> associationType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = associationType;
    // verify the required parameter 'associationType' is set
    if (associationType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationType' when calling createAssociationType",
        new ApiException(400, "Missing the required parameter 'associationType' when calling createAssociationType"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a new AssociationType definition, if it doesn&#39;t exist.
   * 
   * @param associationType 
  */
  public void createAssociationType (List<AssociationType> associationType, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = associationType;

    // verify the required parameter 'associationType' is set
    if (associationType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationType' when calling createAssociationType",
        new ApiException(400, "Missing the required parameter 'associationType' when calling createAssociationType"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates an empty schema, if it doesn&#39;t exist. If schema exists then no action is taken.
  * 
   * @param namespace 
   * @param name 
   * @return void
  */
  public void createEmptySchema (String namespace, String name) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'namespace' when calling createEmptySchema",
        new ApiException(400, "Missing the required parameter 'namespace' when calling createEmptySchema"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling createEmptySchema",
        new ApiException(400, "Missing the required parameter 'name' when calling createEmptySchema"));
    }

    // create path and map variables
    String path = "/datastore/edm/schema/{namespace}/{name}".replaceAll("\\{" + "namespace" + "\\}", apiInvoker.escapeString(namespace.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates an empty schema, if it doesn&#39;t exist. If schema exists then no action is taken.
   * 
   * @param namespace    * @param name 
  */
  public void createEmptySchema (String namespace, String name, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'namespace' when calling createEmptySchema",
        new ApiException(400, "Missing the required parameter 'namespace' when calling createEmptySchema"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling createEmptySchema",
        new ApiException(400, "Missing the required parameter 'name' when calling createEmptySchema"));
    }

    // create path and map variables
    String path = "/datastore/edm/schema/{namespace}/{name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "namespace" + "\\}", apiInvoker.escapeString(namespace.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates new EntitySet definitions if they don&#39;t exist.
  * 
   * @param entitySet 
   * @return void
  */
  public void createEntitySets (List<EntitySet> entitySet) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = entitySet;
    // verify the required parameter 'entitySet' is set
    if (entitySet == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySet' when calling createEntitySets",
        new ApiException(400, "Missing the required parameter 'entitySet' when calling createEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates new EntitySet definitions if they don&#39;t exist.
   * 
   * @param entitySet 
  */
  public void createEntitySets (List<EntitySet> entitySet, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = entitySet;

    // verify the required parameter 'entitySet' is set
    if (entitySet == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySet' when calling createEntitySets",
        new ApiException(400, "Missing the required parameter 'entitySet' when calling createEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a new EntityType definition, if it doesn&#39;t exist.
  * 
   * @param entityType 
   * @return void
  */
  public void createEntityType (EntityType entityType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = entityType;
    // verify the required parameter 'entityType' is set
    if (entityType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityType' when calling createEntityType",
        new ApiException(400, "Missing the required parameter 'entityType' when calling createEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a new EntityType definition, if it doesn&#39;t exist.
   * 
   * @param entityType 
  */
  public void createEntityType (EntityType entityType, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = entityType;

    // verify the required parameter 'entityType' is set
    if (entityType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityType' when calling createEntityType",
        new ApiException(400, "Missing the required parameter 'entityType' when calling createEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a new PropertyType definition, if it doesn\&quot;t exist.
  * 
   * @param propertyType 
   * @return void
  */
  public void createPropertyType (PropertyType propertyType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = propertyType;
    // verify the required parameter 'propertyType' is set
    if (propertyType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyType' when calling createPropertyType",
        new ApiException(400, "Missing the required parameter 'propertyType' when calling createPropertyType"));
    }

    // create path and map variables
    String path = "/datastore/edm/property/type/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a new PropertyType definition, if it doesn\&quot;t exist.
   * 
   * @param propertyType 
  */
  public void createPropertyType (PropertyType propertyType, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = propertyType;

    // verify the required parameter 'propertyType' is set
    if (propertyType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyType' when calling createPropertyType",
        new ApiException(400, "Missing the required parameter 'propertyType' when calling createPropertyType"));
    }

    // create path and map variables
    String path = "/datastore/edm/property/type/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates an empty schema, if it doesn&#39;t exist. If schema exists then no action is taken.
  * 
   * @param schema 
   * @return void
  */
  public void createSchemaIfNotExists (Schema schema) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = schema;
    // verify the required parameter 'schema' is set
    if (schema == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'schema' when calling createSchemaIfNotExists",
        new ApiException(400, "Missing the required parameter 'schema' when calling createSchemaIfNotExists"));
    }

    // create path and map variables
    String path = "/datastore/edm/schema";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates an empty schema, if it doesn&#39;t exist. If schema exists then no action is taken.
   * 
   * @param schema 
  */
  public void createSchemaIfNotExists (Schema schema, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = schema;

    // verify the required parameter 'schema' is set
    if (schema == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'schema' when calling createSchemaIfNotExists",
        new ApiException(400, "Missing the required parameter 'schema' when calling createSchemaIfNotExists"));
    }

    // create path and map variables
    String path = "/datastore/edm/schema".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes the AssociationType definition for the given AssociationType UUID.
  * 
   * @param associationTypeId 
   * @return void
  */
  public void deleteAssociationType (UUID associationTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling deleteAssociationType",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling deleteAssociationType"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}".replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes the AssociationType definition for the given AssociationType UUID.
   * 
   * @param associationTypeId 
  */
  public void deleteAssociationType (UUID associationTypeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling deleteAssociationType",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling deleteAssociationType"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes the EntitySet definition for the given EntitySet UUID.
  * 
   * @param entitySetId 
   * @return void
  */
  public void deleteEntitySet (UUID entitySetId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling deleteEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling deleteEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes the EntitySet definition for the given EntitySet UUID.
   * 
   * @param entitySetId 
  */
  public void deleteEntitySet (UUID entitySetId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling deleteEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling deleteEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes the EntityType definition for the given EntityType UUID.
  * 
   * @param entityTypeId 
   * @return void
  */
  public void deleteEntityType (UUID entityTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling deleteEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling deleteEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}".replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes the EntityType definition for the given EntityType UUID.
   * 
   * @param entityTypeId 
  */
  public void deleteEntityType (UUID entityTypeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling deleteEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling deleteEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes the PropertyType definition for the given PropertyType UUID.
  * 
   * @param propertyTypeId 
   * @return void
  */
  public void deletePropertyType (UUID propertyTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling deletePropertyType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling deletePropertyType"));
    }

    // create path and map variables
    String path = "/datastore/edm/property/type/{propertyTypeId}".replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes the PropertyType definition for the given PropertyType UUID.
   * 
   * @param propertyTypeId 
  */
  public void deletePropertyType (UUID propertyTypeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling deletePropertyType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling deletePropertyType"));
    }

    // create path and map variables
    String path = "/datastore/edm/property/type/{propertyTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes the PropertyType definition for the given PropertyType UUID regardless of whether or not there is data associated with it.
  * 
   * @param propertyTypeId 
   * @return void
  */
  public void forceDeletePropertyType (UUID propertyTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling forceDeletePropertyType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling forceDeletePropertyType"));
    }

    // create path and map variables
    String path = "/datastore/edm/property/type/{propertyTypeId}/force".replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes the PropertyType definition for the given PropertyType UUID regardless of whether or not there is data associated with it.
   * 
   * @param propertyTypeId 
  */
  public void forceDeletePropertyType (UUID propertyTypeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling forceDeletePropertyType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling forceDeletePropertyType"));
    }

    // create path and map variables
    String path = "/datastore/edm/property/type/{propertyTypeId}/force".replaceAll("\\{format\\}","json").replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the EntityType definition for the given EntityType UUID by removing the given PropertyType UUID, regardless of whether or not there is data associated with the entity type.
  * 
   * @param entityTypeId 
   * @param propertyTypeId 
   * @return void
  */
  public void forceRemovePropertyTypeFromEntityType (UUID entityTypeId, UUID propertyTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling forceRemovePropertyTypeFromEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling forceRemovePropertyTypeFromEntityType"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling forceRemovePropertyTypeFromEntityType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling forceRemovePropertyTypeFromEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}/force".replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the EntityType definition for the given EntityType UUID by removing the given PropertyType UUID, regardless of whether or not there is data associated with the entity type.
   * 
   * @param entityTypeId    * @param propertyTypeId 
  */
  public void forceRemovePropertyTypeFromEntityType (UUID entityTypeId, UUID propertyTypeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling forceRemovePropertyTypeFromEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling forceRemovePropertyTypeFromEntityType"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling forceRemovePropertyTypeFromEntityType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling forceRemovePropertyTypeFromEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}/force".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets all association EntityType definitions.
  * 
   * @return List<AssociationType>
  */
  public List<AssociationType> getAllAssociationEntityTypes () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/datastore/edm/association/type/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<AssociationType>) ApiInvoker.deserialize(localVarResponse, "array", AssociationType.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets all association EntityType definitions.
   * 

  */
  public void getAllAssociationEntityTypes (final Response.Listener<List<AssociationType>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/datastore/edm/association/type/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<AssociationType>) ApiInvoker.deserialize(localVarResponse,  "array", AssociationType.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all available associations for the given AssociationType UUID.
  * 
   * @param associationTypeId 
   * @return List<AssociationType>
  */
  public List<AssociationType> getAllAvailableAssociationTypes (UUID associationTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling getAllAvailableAssociationTypes",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling getAllAvailableAssociationTypes"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}/available".replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<AssociationType>) ApiInvoker.deserialize(localVarResponse, "array", AssociationType.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all available associations for the given AssociationType UUID.
   * 
   * @param associationTypeId 
  */
  public void getAllAvailableAssociationTypes (UUID associationTypeId, final Response.Listener<List<AssociationType>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling getAllAvailableAssociationTypes",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling getAllAvailableAssociationTypes"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}/available".replaceAll("\\{format\\}","json").replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<AssociationType>) ApiInvoker.deserialize(localVarResponse,  "array", AssociationType.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all entity set property metadata.
  * 
   * @param entitySetId 
   * @return Map<String, EntitySetPropertyMetaData>
  */
  public Map<String, EntitySetPropertyMetaData> getAllEntitySetPropertyMetadata (UUID entitySetId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getAllEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getAllEntitySetPropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/metadata".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, EntitySetPropertyMetaData>) ApiInvoker.deserialize(localVarResponse, "map", EntitySetPropertyMetaData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all entity set property metadata.
   * 
   * @param entitySetId 
  */
  public void getAllEntitySetPropertyMetadata (UUID entitySetId, final Response.Listener<Map<String, EntitySetPropertyMetaData>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getAllEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getAllEntitySetPropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/metadata".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, EntitySetPropertyMetaData>) ApiInvoker.deserialize(localVarResponse,  "map", EntitySetPropertyMetaData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all EntitySet definitions.
  * 
   * @return List<EntitySet>
  */
  public List<EntitySet> getAllEntitySets () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/datastore/entity-sets";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<EntitySet>) ApiInvoker.deserialize(localVarResponse, "array", EntitySet.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all EntitySet definitions.
   * 

  */
  public void getAllEntitySets (final Response.Listener<List<EntitySet>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/datastore/entity-sets".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<EntitySet>) ApiInvoker.deserialize(localVarResponse,  "array", EntitySet.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all EntityType propertyType metadata
  * 
   * @param entityTypeId 
   * @return Map<String, EntityTypePropertyMetadata>
  */
  public Map<String, EntityTypePropertyMetadata> getAllEntityTypePropertyMetadata (UUID entityTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling getAllEntityTypePropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling getAllEntityTypePropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/property/type".replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, EntityTypePropertyMetadata>) ApiInvoker.deserialize(localVarResponse, "map", EntityTypePropertyMetadata.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all EntityType propertyType metadata
   * 
   * @param entityTypeId 
  */
  public void getAllEntityTypePropertyMetadata (UUID entityTypeId, final Response.Listener<Map<String, EntityTypePropertyMetadata>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling getAllEntityTypePropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling getAllEntityTypePropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/property/type".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, EntityTypePropertyMetadata>) ApiInvoker.deserialize(localVarResponse,  "map", EntityTypePropertyMetadata.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets all EntityType definitions.
  * 
   * @return List<EntityType>
  */
  public List<EntityType> getAllEntityTypes () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/datastore/edm/entity/type/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<EntityType>) ApiInvoker.deserialize(localVarResponse, "array", EntityType.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets all EntityType definitions.
   * 

  */
  public void getAllEntityTypes (final Response.Listener<List<EntityType>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/datastore/edm/entity/type/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<EntityType>) ApiInvoker.deserialize(localVarResponse,  "array", EntityType.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets all PropertyType definitions.
  * 
   * @return List<PropertyType>
  */
  public List<PropertyType> getAllPropertyTypes () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/datastore/edm/property/type/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PropertyType>) ApiInvoker.deserialize(localVarResponse, "array", PropertyType.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets all PropertyType definitions.
   * 

  */
  public void getAllPropertyTypes (final Response.Listener<List<PropertyType>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/datastore/edm/property/type/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PropertyType>) ApiInvoker.deserialize(localVarResponse,  "array", PropertyType.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets all PropertyType definitions under the given namespace.
  * 
   * @param namespace 
   * @return List<PropertyType>
  */
  public List<PropertyType> getAllPropertyTypesInNamespace (String namespace) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'namespace' when calling getAllPropertyTypesInNamespace",
        new ApiException(400, "Missing the required parameter 'namespace' when calling getAllPropertyTypesInNamespace"));
    }

    // create path and map variables
    String path = "/datastore/edm/property/type/namespace/{namespace}".replaceAll("\\{" + "namespace" + "\\}", apiInvoker.escapeString(namespace.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PropertyType>) ApiInvoker.deserialize(localVarResponse, "array", PropertyType.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets all PropertyType definitions under the given namespace.
   * 
   * @param namespace 
  */
  public void getAllPropertyTypesInNamespace (String namespace, final Response.Listener<List<PropertyType>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'namespace' when calling getAllPropertyTypesInNamespace",
        new ApiException(400, "Missing the required parameter 'namespace' when calling getAllPropertyTypesInNamespace"));
    }

    // create path and map variables
    String path = "/datastore/edm/property/type/namespace/{namespace}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "namespace" + "\\}", apiInvoker.escapeString(namespace.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PropertyType>) ApiInvoker.deserialize(localVarResponse,  "array", PropertyType.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Property Usage Summary for all properties.
  * 
   * @return Map<String, PropertyUsageSummary>
  */
  public Map<String, PropertyUsageSummary> getAllPropertyUsageSummaries () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/datastore/edm/summary";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, PropertyUsageSummary>) ApiInvoker.deserialize(localVarResponse, "map", PropertyUsageSummary.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Property Usage Summary for all properties.
   * 

  */
  public void getAllPropertyUsageSummaries (final Response.Listener<Map<String, PropertyUsageSummary>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/datastore/edm/summary".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, PropertyUsageSummary>) ApiInvoker.deserialize(localVarResponse,  "map", PropertyUsageSummary.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the AssociationType definition for the given AssociationType UUID.
  * 
   * @param associationTypeId 
   * @return AssociationType
  */
  public AssociationType getAssociationType (UUID associationTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling getAssociationType",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling getAssociationType"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}".replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AssociationType) ApiInvoker.deserialize(localVarResponse, "", AssociationType.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the AssociationType definition for the given AssociationType UUID.
   * 
   * @param associationTypeId 
  */
  public void getAssociationType (UUID associationTypeId, final Response.Listener<AssociationType> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling getAssociationType",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling getAssociationType"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AssociationType) ApiInvoker.deserialize(localVarResponse,  "", AssociationType.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get details about the AssociationType for the given AssociationType UUID.
  * 
   * @param associationTypeId 
   * @return AssociationType
  */
  public AssociationType getAssociationTypeDetails (UUID associationTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling getAssociationTypeDetails",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling getAssociationTypeDetails"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}/detailed".replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AssociationType) ApiInvoker.deserialize(localVarResponse, "", AssociationType.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get details about the AssociationType for the given AssociationType UUID.
   * 
   * @param associationTypeId 
  */
  public void getAssociationTypeDetails (UUID associationTypeId, final Response.Listener<AssociationType> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling getAssociationTypeDetails",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling getAssociationTypeDetails"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}/detailed".replaceAll("\\{format\\}","json").replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AssociationType) ApiInvoker.deserialize(localVarResponse,  "", AssociationType.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the entity data model, including namespaces, schemas, entity types, association types, and property types.
  * 
   * @return EDM
  */
  public EDM getEntityDataModel () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/datastore/edm/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EDM) ApiInvoker.deserialize(localVarResponse, "", EDM.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the entity data model, including namespaces, schemas, entity types, association types, and property types.
   * 

  */
  public void getEntityDataModel (final Response.Listener<EDM> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/datastore/edm/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EDM) ApiInvoker.deserialize(localVarResponse,  "", EDM.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the changes between the existing entity data model and the entity data model passed in, including schemas, association types, entity types, and property types.
  * 
   * @param eDMdiff 
   * @return EDMdiff
  */
  public EDMdiff getEntityDataModelDiff (EDMdiff eDMdiff) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = eDMdiff;
    // verify the required parameter 'eDMdiff' is set
    if (eDMdiff == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'eDMdiff' when calling getEntityDataModelDiff",
        new ApiException(400, "Missing the required parameter 'eDMdiff' when calling getEntityDataModelDiff"));
    }

    // create path and map variables
    String path = "/datastore/edm/diff/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EDMdiff) ApiInvoker.deserialize(localVarResponse, "", EDMdiff.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the changes between the existing entity data model and the entity data model passed in, including schemas, association types, entity types, and property types.
   * 
   * @param eDMdiff 
  */
  public void getEntityDataModelDiff (EDMdiff eDMdiff, final Response.Listener<EDMdiff> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = eDMdiff;

    // verify the required parameter 'eDMdiff' is set
    if (eDMdiff == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'eDMdiff' when calling getEntityDataModelDiff",
        new ApiException(400, "Missing the required parameter 'eDMdiff' when calling getEntityDataModelDiff"));
    }

    // create path and map variables
    String path = "/datastore/edm/diff/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EDMdiff) ApiInvoker.deserialize(localVarResponse,  "", EDMdiff.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the EntitySet definition for the given EntitySet UUID.
  * 
   * @param entitySetId 
   * @return EntitySet
  */
  public EntitySet getEntitySet (UUID entitySetId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EntitySet) ApiInvoker.deserialize(localVarResponse, "", EntitySet.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the EntitySet definition for the given EntitySet UUID.
   * 
   * @param entitySetId 
  */
  public void getEntitySet (UUID entitySetId, final Response.Listener<EntitySet> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EntitySet) ApiInvoker.deserialize(localVarResponse,  "", EntitySet.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the EntitySet UUID for the given EntitySet name.
  * 
   * @param entitySetName 
   * @return UUID
  */
  public UUID getEntitySetId (String entitySetName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetName' is set
    if (entitySetName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetName' when calling getEntitySetId",
        new ApiException(400, "Missing the required parameter 'entitySetName' when calling getEntitySetId"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/ids/{entitySetName}".replaceAll("\\{" + "entitySetName" + "\\}", apiInvoker.escapeString(entitySetName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UUID) ApiInvoker.deserialize(localVarResponse, "", UUID.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the EntitySet UUID for the given EntitySet name.
   * 
   * @param entitySetName 
  */
  public void getEntitySetId (String entitySetName, final Response.Listener<UUID> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetName' is set
    if (entitySetName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetName' when calling getEntitySetId",
        new ApiException(400, "Missing the required parameter 'entitySetName' when calling getEntitySetId"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/ids/{entitySetName}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetName" + "\\}", apiInvoker.escapeString(entitySetName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UUID) ApiInvoker.deserialize(localVarResponse,  "", UUID.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get IDs for entity sets given their names.
  * 
   * @param requestBody 
   * @return Map<String, UUID>
  */
  public Map<String, UUID> getEntitySetIds (List<String> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;

    // create path and map variables
    String path = "/datastore/entity-sets/ids/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, UUID>) ApiInvoker.deserialize(localVarResponse, "map", UUID.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get IDs for entity sets given their names.
   * 
   * @param requestBody 
  */
  public void getEntitySetIds (List<String> requestBody, final Response.Listener<Map<String, UUID>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;


    // create path and map variables
    String path = "/datastore/entity-sets/ids/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, UUID>) ApiInvoker.deserialize(localVarResponse,  "map", UUID.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get specified property type metadata for an entity set.
  * 
   * @param entitySetId 
   * @param propertyTypeId 
   * @return EntitySetPropertyMetaData
  */
  public EntitySetPropertyMetaData getEntitySetPropertyMetadata (UUID entitySetId, UUID propertyTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getEntitySetPropertyMetadata"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling getEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling getEntitySetPropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EntitySetPropertyMetaData) ApiInvoker.deserialize(localVarResponse, "", EntitySetPropertyMetaData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get specified property type metadata for an entity set.
   * 
   * @param entitySetId    * @param propertyTypeId 
  */
  public void getEntitySetPropertyMetadata (UUID entitySetId, UUID propertyTypeId, final Response.Listener<EntitySetPropertyMetaData> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getEntitySetPropertyMetadata"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling getEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling getEntitySetPropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EntitySetPropertyMetaData) ApiInvoker.deserialize(localVarResponse,  "", EntitySetPropertyMetaData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the EntityType definition for the given EntityType UUID.
  * 
   * @param entityTypeId 
   * @return EntityType
  */
  public EntityType getEntityType (UUID entityTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling getEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling getEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}".replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EntityType) ApiInvoker.deserialize(localVarResponse, "", EntityType.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the EntityType definition for the given EntityType UUID.
   * 
   * @param entityTypeId 
  */
  public void getEntityType (UUID entityTypeId, final Response.Listener<EntityType> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling getEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling getEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EntityType) ApiInvoker.deserialize(localVarResponse,  "", EntityType.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the EntityType hierarchy for the given EntityType UUID.
  * 
   * @param entityTypeId 
   * @return void
  */
  public void getEntityTypeHierarchy (UUID entityTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling getEntityTypeHierarchy",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling getEntityTypeHierarchy"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/hierarchy".replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the EntityType hierarchy for the given EntityType UUID.
   * 
   * @param entityTypeId 
  */
  public void getEntityTypeHierarchy (UUID entityTypeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling getEntityTypeHierarchy",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling getEntityTypeHierarchy"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/hierarchy".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the EntityType UUID for the given EntityType FQN.
  * 
   * @param namespace 
   * @param name 
   * @return UUID
  */
  public UUID getEntityTypeId (String namespace, String name) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'namespace' when calling getEntityTypeId",
        new ApiException(400, "Missing the required parameter 'namespace' when calling getEntityTypeId"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getEntityTypeId",
        new ApiException(400, "Missing the required parameter 'name' when calling getEntityTypeId"));
    }

    // create path and map variables
    String path = "/datastore/edm/ids/entity/type/{namespace}/{name}".replaceAll("\\{" + "namespace" + "\\}", apiInvoker.escapeString(namespace.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UUID) ApiInvoker.deserialize(localVarResponse, "", UUID.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the EntityType UUID for the given EntityType FQN.
   * 
   * @param namespace    * @param name 
  */
  public void getEntityTypeId (String namespace, String name, final Response.Listener<UUID> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'namespace' when calling getEntityTypeId",
        new ApiException(400, "Missing the required parameter 'namespace' when calling getEntityTypeId"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getEntityTypeId",
        new ApiException(400, "Missing the required parameter 'name' when calling getEntityTypeId"));
    }

    // create path and map variables
    String path = "/datastore/edm/ids/entity/type/{namespace}/{name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "namespace" + "\\}", apiInvoker.escapeString(namespace.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UUID) ApiInvoker.deserialize(localVarResponse,  "", UUID.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get EntityType propertyType metadata
  * 
   * @param entityTypeId 
   * @param propertyTypeId 
   * @return EntityTypePropertyMetadata
  */
  public EntityTypePropertyMetadata getEntityTypePropertyMetadata (UUID entityTypeId, UUID propertyTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling getEntityTypePropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling getEntityTypePropertyMetadata"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling getEntityTypePropertyMetadata",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling getEntityTypePropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/property/type/{propertyTypeId}".replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EntityTypePropertyMetadata) ApiInvoker.deserialize(localVarResponse, "", EntityTypePropertyMetadata.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get EntityType propertyType metadata
   * 
   * @param entityTypeId    * @param propertyTypeId 
  */
  public void getEntityTypePropertyMetadata (UUID entityTypeId, UUID propertyTypeId, final Response.Listener<EntityTypePropertyMetadata> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling getEntityTypePropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling getEntityTypePropertyMetadata"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling getEntityTypePropertyMetadata",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling getEntityTypePropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/property/type/{propertyTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EntityTypePropertyMetadata) ApiInvoker.deserialize(localVarResponse,  "", EntityTypePropertyMetadata.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get property metadata for entity sets.
  * 
   * @param requestBody 
   * @return Map<String, Map<String, EntitySetPropertyMetaData>>
  */
  public Map<String, Map<String, EntitySetPropertyMetaData>> getPropertyMetadataForEntitySets (List<String> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;

    // create path and map variables
    String path = "/datastore/entity-sets/all/metadata";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, Map<String, EntitySetPropertyMetaData>>) ApiInvoker.deserialize(localVarResponse, "map", Map.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get property metadata for entity sets.
   * 
   * @param requestBody 
  */
  public void getPropertyMetadataForEntitySets (List<String> requestBody, final Response.Listener<Map<String, Map<String, EntitySetPropertyMetaData>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;


    // create path and map variables
    String path = "/datastore/entity-sets/all/metadata".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, Map<String, EntitySetPropertyMetaData>>) ApiInvoker.deserialize(localVarResponse,  "map", Map.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the PropertyType definition for the given PropertyType UUID.
  * 
   * @param propertyTypeId 
   * @return PropertyType
  */
  public PropertyType getPropertyType (UUID propertyTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling getPropertyType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling getPropertyType"));
    }

    // create path and map variables
    String path = "/datastore/edm/property/type/{propertyTypeId}".replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PropertyType) ApiInvoker.deserialize(localVarResponse, "", PropertyType.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the PropertyType definition for the given PropertyType UUID.
   * 
   * @param propertyTypeId 
  */
  public void getPropertyType (UUID propertyTypeId, final Response.Listener<PropertyType> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling getPropertyType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling getPropertyType"));
    }

    // create path and map variables
    String path = "/datastore/edm/property/type/{propertyTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PropertyType) ApiInvoker.deserialize(localVarResponse,  "", PropertyType.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the PropertyType UUID for the given PropertyType FQN.
  * 
   * @param namespace 
   * @param name 
   * @return UUID
  */
  public UUID getPropertyTypeId (String namespace, String name) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'namespace' when calling getPropertyTypeId",
        new ApiException(400, "Missing the required parameter 'namespace' when calling getPropertyTypeId"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getPropertyTypeId",
        new ApiException(400, "Missing the required parameter 'name' when calling getPropertyTypeId"));
    }

    // create path and map variables
    String path = "/datastore/edm/ids/property/type/{namespace}/{name}".replaceAll("\\{" + "namespace" + "\\}", apiInvoker.escapeString(namespace.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UUID) ApiInvoker.deserialize(localVarResponse, "", UUID.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the PropertyType UUID for the given PropertyType FQN.
   * 
   * @param namespace    * @param name 
  */
  public void getPropertyTypeId (String namespace, String name, final Response.Listener<UUID> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'namespace' when calling getPropertyTypeId",
        new ApiException(400, "Missing the required parameter 'namespace' when calling getPropertyTypeId"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getPropertyTypeId",
        new ApiException(400, "Missing the required parameter 'name' when calling getPropertyTypeId"));
    }

    // create path and map variables
    String path = "/datastore/edm/ids/property/type/{namespace}/{name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "namespace" + "\\}", apiInvoker.escapeString(namespace.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UUID) ApiInvoker.deserialize(localVarResponse,  "", UUID.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all Property Types for entity set
  * 
   * @param entitySetId 
   * @return Map<String, PropertyType>
  */
  public Map<String, PropertyType> getPropertyTypesForEntitySet (UUID entitySetId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getPropertyTypesForEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getPropertyTypesForEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/properties".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, PropertyType>) ApiInvoker.deserialize(localVarResponse, "map", PropertyType.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all Property Types for entity set
   * 
   * @param entitySetId 
  */
  public void getPropertyTypesForEntitySet (UUID entitySetId, final Response.Listener<Map<String, PropertyType>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getPropertyTypesForEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getPropertyTypesForEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/properties".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, PropertyType>) ApiInvoker.deserialize(localVarResponse,  "map", PropertyType.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Property Usage Summary for property with given ID.
  * 
   * @param propertyTypeId 
   * @return List<PropertyUsageSummary>
  */
  public List<PropertyUsageSummary> getPropertyUsageSummary (UUID propertyTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling getPropertyUsageSummary",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling getPropertyUsageSummary"));
    }

    // create path and map variables
    String path = "/datastore/edm/summary/{propertyTypeId}".replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PropertyUsageSummary>) ApiInvoker.deserialize(localVarResponse, "array", PropertyUsageSummary.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Property Usage Summary for property with given ID.
   * 
   * @param propertyTypeId 
  */
  public void getPropertyUsageSummary (UUID propertyTypeId, final Response.Listener<List<PropertyUsageSummary>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling getPropertyUsageSummary",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling getPropertyUsageSummary"));
    }

    // create path and map variables
    String path = "/datastore/edm/summary/{propertyTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PropertyUsageSummary>) ApiInvoker.deserialize(localVarResponse,  "array", PropertyUsageSummary.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the schema contents for a corresponding namespace and name.
  * 
   * @param namespace 
   * @param name 
   * @param fileType 
   * @return Schema
  */
  public Schema getSchemaContents (String namespace, String name, String fileType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'namespace' when calling getSchemaContents",
        new ApiException(400, "Missing the required parameter 'namespace' when calling getSchemaContents"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getSchemaContents",
        new ApiException(400, "Missing the required parameter 'name' when calling getSchemaContents"));
    }

    // create path and map variables
    String path = "/datastore/edm/schema/{namespace}/{name}".replaceAll("\\{" + "namespace" + "\\}", apiInvoker.escapeString(namespace.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fileType", fileType));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Schema) ApiInvoker.deserialize(localVarResponse, "", Schema.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the schema contents for a corresponding namespace and name.
   * 
   * @param namespace    * @param name    * @param fileType 
  */
  public void getSchemaContents (String namespace, String name, String fileType, final Response.Listener<Schema> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'namespace' when calling getSchemaContents",
        new ApiException(400, "Missing the required parameter 'namespace' when calling getSchemaContents"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling getSchemaContents",
        new ApiException(400, "Missing the required parameter 'name' when calling getSchemaContents"));
    }

    // create path and map variables
    String path = "/datastore/edm/schema/{namespace}/{name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "namespace" + "\\}", apiInvoker.escapeString(namespace.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "fileType", fileType));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Schema) ApiInvoker.deserialize(localVarResponse,  "", Schema.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets all schemas.
  * 
   * @return List<Schema>
  */
  public List<Schema> getSchemas () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/datastore/edm/schema";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Schema>) ApiInvoker.deserialize(localVarResponse, "array", Schema.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets all schemas.
   * 

  */
  public void getSchemas (final Response.Listener<List<Schema>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/datastore/edm/schema".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Schema>) ApiInvoker.deserialize(localVarResponse,  "array", Schema.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets all schemas associated with a given namespace and accessible by the caller.
  * 
   * @param namespace 
   * @return List<Schema>
  */
  public List<Schema> getSchemasInNamespace (String namespace) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'namespace' when calling getSchemasInNamespace",
        new ApiException(400, "Missing the required parameter 'namespace' when calling getSchemasInNamespace"));
    }

    // create path and map variables
    String path = "/datastore/edm/schema/{namespace}".replaceAll("\\{" + "namespace" + "\\}", apiInvoker.escapeString(namespace.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Schema>) ApiInvoker.deserialize(localVarResponse, "array", Schema.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets all schemas associated with a given namespace and accessible by the caller.
   * 
   * @param namespace 
  */
  public void getSchemasInNamespace (String namespace, final Response.Listener<List<Schema>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'namespace' when calling getSchemasInNamespace",
        new ApiException(400, "Missing the required parameter 'namespace' when calling getSchemasInNamespace"));
    }

    // create path and map variables
    String path = "/datastore/edm/schema/{namespace}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "namespace" + "\\}", apiInvoker.escapeString(namespace.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Schema>) ApiInvoker.deserialize(localVarResponse,  "array", Schema.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the AssociationType dst entity types for the given AssociationType UUID by removing the given EntityType UUID.
  * 
   * @param associationTypeId 
   * @param entityTypeId 
   * @return void
  */
  public void removeDstEntityTypeFromAssociationType (UUID associationTypeId, UUID entityTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling removeDstEntityTypeFromAssociationType",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling removeDstEntityTypeFromAssociationType"));
    }
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling removeDstEntityTypeFromAssociationType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling removeDstEntityTypeFromAssociationType"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}/dst/{entityTypeId}".replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString())).replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the AssociationType dst entity types for the given AssociationType UUID by removing the given EntityType UUID.
   * 
   * @param associationTypeId    * @param entityTypeId 
  */
  public void removeDstEntityTypeFromAssociationType (UUID associationTypeId, UUID entityTypeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling removeDstEntityTypeFromAssociationType",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling removeDstEntityTypeFromAssociationType"));
    }
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling removeDstEntityTypeFromAssociationType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling removeDstEntityTypeFromAssociationType"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}/dst/{entityTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString())).replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Removes/unlinks the linked entity sets from the linking entity set
  * 
   * @param linkingEntitySetId 
   * @param UUID 
   * @return Integer
  */
  public Integer removeEntitySetsFromLinkingEntitySet (String linkingEntitySetId, List<UUID> UUID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = UUID;
    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySet",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/{linkingEntitySetId}".replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Removes/unlinks the linked entity sets from the linking entity set
   * 
   * @param linkingEntitySetId    * @param UUID 
  */
  public void removeEntitySetsFromLinkingEntitySet (String linkingEntitySetId, List<UUID> UUID, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = UUID;

    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySet",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/{linkingEntitySetId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Removes/unlinks the linked entity sets from the linking entity set
  * 
   * @param linkingEntitySetId 
   * @param requestBody 
   * @return Integer
  */
  public Integer removeEntitySetsFromLinkingEntitySets (UUID linkingEntitySetId, Map<String, List<UUID>> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;
    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySets"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling removeEntitySetsFromLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling removeEntitySetsFromLinkingEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/".replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Removes/unlinks the linked entity sets from the linking entity set
   * 
   * @param linkingEntitySetId    * @param requestBody 
  */
  public void removeEntitySetsFromLinkingEntitySets (UUID linkingEntitySetId, Map<String, List<UUID>> requestBody, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;

    // verify the required parameter 'linkingEntitySetId' is set
    if (linkingEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySets"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling removeEntitySetsFromLinkingEntitySets",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling removeEntitySetsFromLinkingEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/linking/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "linkingEntitySetId" + "\\}", apiInvoker.escapeString(linkingEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Removes a primary key with a given ID from an entity type with a given ID.
  * 
   * @param entityTypeId 
   * @param propertyTypeId 
   * @return void
  */
  public void removePrimaryKeyFromEntityType (UUID entityTypeId, UUID propertyTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling removePrimaryKeyFromEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling removePrimaryKeyFromEntityType"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling removePrimaryKeyFromEntityType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling removePrimaryKeyFromEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/key/{entityTypeId}/{propertyTypeId}".replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Removes a primary key with a given ID from an entity type with a given ID.
   * 
   * @param entityTypeId    * @param propertyTypeId 
  */
  public void removePrimaryKeyFromEntityType (UUID entityTypeId, UUID propertyTypeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling removePrimaryKeyFromEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling removePrimaryKeyFromEntityType"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling removePrimaryKeyFromEntityType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling removePrimaryKeyFromEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/key/{entityTypeId}/{propertyTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the EntityType definition for the given EntityType UUID by removing the given PropertyType UUID.
  * 
   * @param entityTypeId 
   * @param propertyTypeId 
   * @return void
  */
  public void removePropertyTypeFromEntityType (UUID entityTypeId, UUID propertyTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling removePropertyTypeFromEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling removePropertyTypeFromEntityType"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling removePropertyTypeFromEntityType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling removePropertyTypeFromEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}".replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the EntityType definition for the given EntityType UUID by removing the given PropertyType UUID.
   * 
   * @param entityTypeId    * @param propertyTypeId 
  */
  public void removePropertyTypeFromEntityType (UUID entityTypeId, UUID propertyTypeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling removePropertyTypeFromEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling removePropertyTypeFromEntityType"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling removePropertyTypeFromEntityType",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling removePropertyTypeFromEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the AssociationType src entity types for the given AssociationType UUID by removing the given EntityType UUID.
  * 
   * @param associationTypeId 
   * @param entityTypeId 
   * @return void
  */
  public void removeSrcEntityTypeFromAssociationType (UUID associationTypeId, UUID entityTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling removeSrcEntityTypeFromAssociationType",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling removeSrcEntityTypeFromAssociationType"));
    }
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling removeSrcEntityTypeFromAssociationType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling removeSrcEntityTypeFromAssociationType"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}/src/{entityTypeId}".replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString())).replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the AssociationType src entity types for the given AssociationType UUID by removing the given EntityType UUID.
   * 
   * @param associationTypeId    * @param entityTypeId 
  */
  public void removeSrcEntityTypeFromAssociationType (UUID associationTypeId, UUID entityTypeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'associationTypeId' is set
    if (associationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'associationTypeId' when calling removeSrcEntityTypeFromAssociationType",
        new ApiException(400, "Missing the required parameter 'associationTypeId' when calling removeSrcEntityTypeFromAssociationType"));
    }
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling removeSrcEntityTypeFromAssociationType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling removeSrcEntityTypeFromAssociationType"));
    }

    // create path and map variables
    String path = "/datastore/edm/association/type/{associationTypeId}/src/{entityTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "associationTypeId" + "\\}", apiInvoker.escapeString(associationTypeId.toString())).replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the EntityType definition for the given EntityType UUID by reordering its properties as specified by the provided list.
  * 
   * @param entityTypeId 
   * @param propertyTypeIds 
   * @return void
  */
  public void reorderPropertyTypesInEntityType (UUID entityTypeId, List<UUID> propertyTypeIds) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling reorderPropertyTypesInEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling reorderPropertyTypesInEntityType"));
    }
    // verify the required parameter 'propertyTypeIds' is set
    if (propertyTypeIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeIds' when calling reorderPropertyTypesInEntityType",
        new ApiException(400, "Missing the required parameter 'propertyTypeIds' when calling reorderPropertyTypesInEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/property/type".replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeIds" + "\\}", apiInvoker.escapeString(propertyTypeIds.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the EntityType definition for the given EntityType UUID by reordering its properties as specified by the provided list.
   * 
   * @param entityTypeId    * @param propertyTypeIds 
  */
  public void reorderPropertyTypesInEntityType (UUID entityTypeId, List<UUID> propertyTypeIds, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling reorderPropertyTypesInEntityType",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling reorderPropertyTypesInEntityType"));
    }
    // verify the required parameter 'propertyTypeIds' is set
    if (propertyTypeIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeIds' when calling reorderPropertyTypesInEntityType",
        new ApiException(400, "Missing the required parameter 'propertyTypeIds' when calling reorderPropertyTypesInEntityType"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/property/type".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeIds" + "\\}", apiInvoker.escapeString(propertyTypeIds.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the entity data model, including schemas, entity types, association types, and property types.
  * 
   * @param EDM 
   * @return void
  */
  public void updateEntityDataModel (EDM EDM) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = EDM;
    // verify the required parameter 'EDM' is set
    if (EDM == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'EDM' when calling updateEntityDataModel",
        new ApiException(400, "Missing the required parameter 'EDM' when calling updateEntityDataModel"));
    }

    // create path and map variables
    String path = "/datastore/edm/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the entity data model, including schemas, entity types, association types, and property types.
   * 
   * @param EDM 
  */
  public void updateEntityDataModel (EDM EDM, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = EDM;

    // verify the required parameter 'EDM' is set
    if (EDM == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'EDM' when calling updateEntityDataModel",
        new ApiException(400, "Missing the required parameter 'EDM' when calling updateEntityDataModel"));
    }

    // create path and map variables
    String path = "/datastore/edm/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the EntitySet definition for the given EntitySet UUID with the given metadata.
  * 
   * @param entitySetId 
   * @param metadataUpdate 
   * @return Integer
  */
  public Integer updateEntitySetMetaData (UUID entitySetId, MetadataUpdate metadataUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = metadataUpdate;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling updateEntitySetMetaData",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling updateEntitySetMetaData"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updateEntitySetMetaData",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updateEntitySetMetaData"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/metadata/".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the EntitySet definition for the given EntitySet UUID with the given metadata.
   * 
   * @param entitySetId    * @param metadataUpdate 
  */
  public void updateEntitySetMetaData (UUID entitySetId, MetadataUpdate metadataUpdate, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = metadataUpdate;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling updateEntitySetMetaData",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling updateEntitySetMetaData"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updateEntitySetMetaData",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updateEntitySetMetaData"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/metadata/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the property type metadata for the given entity set.
  * 
   * @param entitySetId 
   * @param propertyTypeId 
   * @param metadataUpdate 
   * @return void
  */
  public void updateEntitySetPropertyMetadata (UUID entitySetId, UUID propertyTypeId, MetadataUpdate metadataUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = metadataUpdate;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling updateEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling updateEntitySetPropertyMetadata"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling updateEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling updateEntitySetPropertyMetadata"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updateEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updateEntitySetPropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the property type metadata for the given entity set.
   * 
   * @param entitySetId    * @param propertyTypeId    * @param metadataUpdate 
  */
  public void updateEntitySetPropertyMetadata (UUID entitySetId, UUID propertyTypeId, MetadataUpdate metadataUpdate, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = metadataUpdate;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling updateEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling updateEntitySetPropertyMetadata"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling updateEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling updateEntitySetPropertyMetadata"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updateEntitySetPropertyMetadata",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updateEntitySetPropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the EntityType definition for the given EntityType UUID with the given metadata.
  * 
   * @param entityTypeId 
   * @param metadataUpdate 
   * @return void
  */
  public void updateEntityTypeMetaData (UUID entityTypeId, MetadataUpdate metadataUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = metadataUpdate;
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling updateEntityTypeMetaData",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling updateEntityTypeMetaData"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updateEntityTypeMetaData",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updateEntityTypeMetaData"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}".replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the EntityType definition for the given EntityType UUID with the given metadata.
   * 
   * @param entityTypeId    * @param metadataUpdate 
  */
  public void updateEntityTypeMetaData (UUID entityTypeId, MetadataUpdate metadataUpdate, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = metadataUpdate;

    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling updateEntityTypeMetaData",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling updateEntityTypeMetaData"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updateEntityTypeMetaData",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updateEntityTypeMetaData"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update EntityType Property metadata
  * 
   * @param entityTypeId 
   * @param propertyTypeId 
   * @return void
  */
  public void updateEntityTypePropertyMetadata (UUID entityTypeId, UUID propertyTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling updateEntityTypePropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling updateEntityTypePropertyMetadata"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling updateEntityTypePropertyMetadata",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling updateEntityTypePropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/property/type/{propertyTypeId}".replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update EntityType Property metadata
   * 
   * @param entityTypeId    * @param propertyTypeId 
  */
  public void updateEntityTypePropertyMetadata (UUID entityTypeId, UUID propertyTypeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityTypeId' when calling updateEntityTypePropertyMetadata",
        new ApiException(400, "Missing the required parameter 'entityTypeId' when calling updateEntityTypePropertyMetadata"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling updateEntityTypePropertyMetadata",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling updateEntityTypePropertyMetadata"));
    }

    // create path and map variables
    String path = "/datastore/edm/entity/type/{entityTypeId}/property/type/{propertyTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entityTypeId" + "\\}", apiInvoker.escapeString(entityTypeId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the PropertyType definition for the given PropertyType UUID with the given metadata.
  * 
   * @param propertyTypeId 
   * @param metadataUpdate 
   * @return void
  */
  public void updatePropertyTypeMetaData (UUID propertyTypeId, MetadataUpdate metadataUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = metadataUpdate;
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling updatePropertyTypeMetaData",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling updatePropertyTypeMetaData"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updatePropertyTypeMetaData",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updatePropertyTypeMetaData"));
    }

    // create path and map variables
    String path = "/datastore/edm/property/type/{propertyTypeId}".replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the PropertyType definition for the given PropertyType UUID with the given metadata.
   * 
   * @param propertyTypeId    * @param metadataUpdate 
  */
  public void updatePropertyTypeMetaData (UUID propertyTypeId, MetadataUpdate metadataUpdate, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = metadataUpdate;

    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling updatePropertyTypeMetaData",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling updatePropertyTypeMetaData"));
    }
    // verify the required parameter 'metadataUpdate' is set
    if (metadataUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metadataUpdate' when calling updatePropertyTypeMetaData",
        new ApiException(400, "Missing the required parameter 'metadataUpdate' when calling updatePropertyTypeMetaData"));
    }

    // create path and map variables
    String path = "/datastore/edm/property/type/{propertyTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edits the schema contents for a corresponding namespace and name.
  * 
   * @param namespace 
   * @param name 
   * @param edmRequest 
   * @return void
  */
  public void updateSchema (String namespace, String name, EdmRequest edmRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = edmRequest;
    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'namespace' when calling updateSchema",
        new ApiException(400, "Missing the required parameter 'namespace' when calling updateSchema"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling updateSchema",
        new ApiException(400, "Missing the required parameter 'name' when calling updateSchema"));
    }
    // verify the required parameter 'edmRequest' is set
    if (edmRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'edmRequest' when calling updateSchema",
        new ApiException(400, "Missing the required parameter 'edmRequest' when calling updateSchema"));
    }

    // create path and map variables
    String path = "/datastore/edm/schema/{namespace}/{name}".replaceAll("\\{" + "namespace" + "\\}", apiInvoker.escapeString(namespace.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edits the schema contents for a corresponding namespace and name.
   * 
   * @param namespace    * @param name    * @param edmRequest 
  */
  public void updateSchema (String namespace, String name, EdmRequest edmRequest, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = edmRequest;

    // verify the required parameter 'namespace' is set
    if (namespace == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'namespace' when calling updateSchema",
        new ApiException(400, "Missing the required parameter 'namespace' when calling updateSchema"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling updateSchema",
        new ApiException(400, "Missing the required parameter 'name' when calling updateSchema"));
    }
    // verify the required parameter 'edmRequest' is set
    if (edmRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'edmRequest' when calling updateSchema",
        new ApiException(400, "Missing the required parameter 'edmRequest' when calling updateSchema"));
    }

    // create path and map variables
    String path = "/datastore/edm/schema/{namespace}/{name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "namespace" + "\\}", apiInvoker.escapeString(namespace.toString())).replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
