/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.Auth0userBasic;
import org.openapitools.client.model.InlineResponse200;
import java.util.*;
import java.util.Map;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.OrganizationMember;
import org.openapitools.client.model.Role;
import java.util.UUID;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class OrganizationsApi {
  String basePath = "https://api.openlattice.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Add member to an organization
  * 
   * @param organizationId 
   * @param userId 
   * @return void
  */
  public void addMember (UUID organizationId, UUID userId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling addMember",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling addMember"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling addMember",
        new ApiException(400, "Missing the required parameter 'userId' when calling addMember"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/members/{userId}".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add member to an organization
   * 
   * @param organizationId    * @param userId 
  */
  public void addMember (UUID organizationId, UUID userId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling addMember",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling addMember"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling addMember",
        new ApiException(400, "Missing the required parameter 'userId' when calling addMember"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/members/{userId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add a role to a user
  * 
   * @param organizationId 
   * @param roleId 
   * @param userId 
   * @return void
  */
  public void addRoleToUser (UUID organizationId, UUID roleId, UUID userId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling addRoleToUser",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling addRoleToUser"));
    }
    // verify the required parameter 'roleId' is set
    if (roleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleId' when calling addRoleToUser",
        new ApiException(400, "Missing the required parameter 'roleId' when calling addRoleToUser"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling addRoleToUser",
        new ApiException(400, "Missing the required parameter 'userId' when calling addRoleToUser"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles/{roleId}/members/{userId}".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "roleId" + "\\}", apiInvoker.escapeString(roleId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add a role to a user
   * 
   * @param organizationId    * @param roleId    * @param userId 
  */
  public void addRoleToUser (UUID organizationId, UUID roleId, UUID userId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling addRoleToUser",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling addRoleToUser"));
    }
    // verify the required parameter 'roleId' is set
    if (roleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleId' when calling addRoleToUser",
        new ApiException(400, "Missing the required parameter 'roleId' when calling addRoleToUser"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling addRoleToUser",
        new ApiException(400, "Missing the required parameter 'userId' when calling addRoleToUser"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles/{roleId}/members/{userId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "roleId" + "\\}", apiInvoker.escapeString(roleId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Materializes entity sets into the organization database.
  * 
   * @param organizationId 
   * @param requestBody 
   * @return Map<String, List<String>>
  */
  public Map<String, List<String>> assembleEntitySets (UUID organizationId, Map<String, Integer> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling assembleEntitySets",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling assembleEntitySets"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling assembleEntitySets",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling assembleEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/entity-sets/assemble".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, List<String>>) ApiInvoker.deserialize(localVarResponse, "map", List.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Materializes entity sets into the organization database.
   * 
   * @param organizationId    * @param requestBody 
  */
  public void assembleEntitySets (UUID organizationId, Map<String, Integer> requestBody, final Response.Listener<Map<String, List<String>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling assembleEntitySets",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling assembleEntitySets"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling assembleEntitySets",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling assembleEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/entity-sets/assemble".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, List<String>>) ApiInvoker.deserialize(localVarResponse,  "map", List.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates an organization if it doesn&#39;t exist.
  * 
   * @param organization 
   * @return UUID
  */
  public UUID createOrganizationIfNotExists (Organization organization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = organization;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling createOrganizationIfNotExists",
        new ApiException(400, "Missing the required parameter 'organization' when calling createOrganizationIfNotExists"));
    }

    // create path and map variables
    String path = "/datastore/organizations";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UUID) ApiInvoker.deserialize(localVarResponse, "", UUID.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates an organization if it doesn&#39;t exist.
   * 
   * @param organization 
  */
  public void createOrganizationIfNotExists (Organization organization, final Response.Listener<UUID> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = organization;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling createOrganizationIfNotExists",
        new ApiException(400, "Missing the required parameter 'organization' when calling createOrganizationIfNotExists"));
    }

    // create path and map variables
    String path = "/datastore/organizations".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UUID) ApiInvoker.deserialize(localVarResponse,  "", UUID.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates role
  * 
   * @param role 
   * @return UUID
  */
  public UUID createRole (Role role) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = role;
    // verify the required parameter 'role' is set
    if (role == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'role' when calling createRole",
        new ApiException(400, "Missing the required parameter 'role' when calling createRole"));
    }

    // create path and map variables
    String path = "/datastore/organizations/roles";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UUID) ApiInvoker.deserialize(localVarResponse, "", UUID.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates role
   * 
   * @param role 
  */
  public void createRole (Role role, final Response.Listener<UUID> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = role;

    // verify the required parameter 'role' is set
    if (role == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'role' when calling createRole",
        new ApiException(400, "Missing the required parameter 'role' when calling createRole"));
    }

    // create path and map variables
    String path = "/datastore/organizations/roles".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UUID) ApiInvoker.deserialize(localVarResponse,  "", UUID.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove role for an organization
  * 
   * @param organizationId 
   * @param roleId 
   * @return void
  */
  public void deleteRole (UUID organizationId, UUID roleId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling deleteRole",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling deleteRole"));
    }
    // verify the required parameter 'roleId' is set
    if (roleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleId' when calling deleteRole",
        new ApiException(400, "Missing the required parameter 'roleId' when calling deleteRole"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles/{roleId}".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "roleId" + "\\}", apiInvoker.escapeString(roleId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove role for an organization
   * 
   * @param organizationId    * @param roleId 
  */
  public void deleteRole (UUID organizationId, UUID roleId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling deleteRole",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling deleteRole"));
    }
    // verify the required parameter 'roleId' is set
    if (roleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleId' when calling deleteRole",
        new ApiException(400, "Missing the required parameter 'roleId' when calling deleteRole"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles/{roleId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "roleId" + "\\}", apiInvoker.escapeString(roleId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove an organization from the organizationId
  * 
   * @param organizationId 
   * @return void
  */
  public void destroyOrganization (UUID organizationId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling destroyOrganization",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling destroyOrganization"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove an organization from the organizationId
   * 
   * @param organizationId 
  */
  public void destroyOrganization (UUID organizationId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling destroyOrganization",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling destroyOrganization"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get members of a role for an organization from a roleId
  * 
   * @param organizationId 
   * @param roleId 
   * @return List<Auth0userBasic>
  */
  public List<Auth0userBasic> getAllUsersOfRole (UUID organizationId, UUID roleId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getAllUsersOfRole",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getAllUsersOfRole"));
    }
    // verify the required parameter 'roleId' is set
    if (roleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleId' when calling getAllUsersOfRole",
        new ApiException(400, "Missing the required parameter 'roleId' when calling getAllUsersOfRole"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles/{roleId}/members/".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "roleId" + "\\}", apiInvoker.escapeString(roleId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Auth0userBasic>) ApiInvoker.deserialize(localVarResponse, "array", Auth0userBasic.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get members of a role for an organization from a roleId
   * 
   * @param organizationId    * @param roleId 
  */
  public void getAllUsersOfRole (UUID organizationId, UUID roleId, final Response.Listener<List<Auth0userBasic>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getAllUsersOfRole",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getAllUsersOfRole"));
    }
    // verify the required parameter 'roleId' is set
    if (roleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleId' when calling getAllUsersOfRole",
        new ApiException(400, "Missing the required parameter 'roleId' when calling getAllUsersOfRole"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles/{roleId}/members/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "roleId" + "\\}", apiInvoker.escapeString(roleId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Auth0userBasic>) ApiInvoker.deserialize(localVarResponse,  "array", Auth0userBasic.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get auto-approved email domains
  * 
   * @param organizationId 
   * @return List<String>
  */
  public List<String> getAutoApprovedEmailDomains (UUID organizationId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getAutoApprovedEmailDomains",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getAutoApprovedEmailDomains"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/email-domains".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<String>) ApiInvoker.deserialize(localVarResponse, "array", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get auto-approved email domains
   * 
   * @param organizationId 
  */
  public void getAutoApprovedEmailDomains (UUID organizationId, final Response.Listener<List<String>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getAutoApprovedEmailDomains",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getAutoApprovedEmailDomains"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/email-domains".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<String>) ApiInvoker.deserialize(localVarResponse,  "array", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the entity sets for an organization for a certain flag
  * 
   * @param organizationId 
   * @param requestBody 
   * @return List<Map<String, List<String>>>
  */
  public List<Map<String, List<String>>> getFlaggedOrganizationEntitySets (UUID organizationId, Map<String, List<String>> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getFlaggedOrganizationEntitySets",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getFlaggedOrganizationEntitySets"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling getFlaggedOrganizationEntitySets",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling getFlaggedOrganizationEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/entity-sets".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Map<String, List<String>>>) ApiInvoker.deserialize(localVarResponse, "array", Map.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the entity sets for an organization for a certain flag
   * 
   * @param organizationId    * @param requestBody 
  */
  public void getFlaggedOrganizationEntitySets (UUID organizationId, Map<String, List<String>> requestBody, final Response.Listener<List<Map<String, List<String>>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getFlaggedOrganizationEntitySets",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getFlaggedOrganizationEntitySets"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling getFlaggedOrganizationEntitySets",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling getFlaggedOrganizationEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/entity-sets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Map<String, List<String>>>) ApiInvoker.deserialize(localVarResponse,  "array", Map.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get members of a certain organization
  * 
   * @param organizationId 
   * @return List<OrganizationMember>
  */
  public List<OrganizationMember> getMembers (UUID organizationId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getMembers",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getMembers"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/members".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<OrganizationMember>) ApiInvoker.deserialize(localVarResponse, "array", OrganizationMember.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get members of a certain organization
   * 
   * @param organizationId 
  */
  public void getMembers (UUID organizationId, final Response.Listener<List<OrganizationMember>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getMembers",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getMembers"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/members".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<OrganizationMember>) ApiInvoker.deserialize(localVarResponse,  "array", OrganizationMember.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get an organization from the organizationId
  * 
   * @param organizationId 
   * @return Organization
  */
  public Organization getOrganization (UUID organizationId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getOrganization",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getOrganization"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Organization) ApiInvoker.deserialize(localVarResponse, "", Organization.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get an organization from the organizationId
   * 
   * @param organizationId 
  */
  public void getOrganization (UUID organizationId, final Response.Listener<Organization> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getOrganization",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getOrganization"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Organization) ApiInvoker.deserialize(localVarResponse,  "", Organization.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the entity sets for an organization for a certain filter
  * 
   * @param organizationId 
   * @return Map<String, List<String>>
  */
  public Map<String, List<String>> getOrganizationEntitySets (UUID organizationId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getOrganizationEntitySets",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getOrganizationEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/entity-sets".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, List<String>>) ApiInvoker.deserialize(localVarResponse, "map", List.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the entity sets for an organization for a certain filter
   * 
   * @param organizationId 
  */
  public void getOrganizationEntitySets (UUID organizationId, final Response.Listener<Map<String, List<String>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getOrganizationEntitySets",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getOrganizationEntitySets"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/entity-sets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, List<String>>) ApiInvoker.deserialize(localVarResponse,  "map", List.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the integrations account for an organization from the organizationId
  * 
   * @param organizationId 
   * @return InlineResponse200
  */
  public InlineResponse200 getOrganizationIntegrationAccount (UUID organizationId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getOrganizationIntegrationAccount",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getOrganizationIntegrationAccount"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/integration".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the integrations account for an organization from the organizationId
   * 
   * @param organizationId 
  */
  public void getOrganizationIntegrationAccount (UUID organizationId, final Response.Listener<InlineResponse200> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getOrganizationIntegrationAccount",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getOrganizationIntegrationAccount"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/integration".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse200) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse200.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all organizations
  * 
   * @return List<Organization>
  */
  public List<Organization> getOrganizations () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/datastore/organizations";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Organization>) ApiInvoker.deserialize(localVarResponse, "array", Organization.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all organizations
   * 

  */
  public void getOrganizations (final Response.Listener<List<Organization>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/datastore/organizations".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Organization>) ApiInvoker.deserialize(localVarResponse,  "array", Organization.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get role for an organization from a roleId
  * 
   * @param organizationId 
   * @param roleId 
   * @return Role
  */
  public Role getRole (UUID organizationId, UUID roleId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getRole",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getRole"));
    }
    // verify the required parameter 'roleId' is set
    if (roleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleId' when calling getRole",
        new ApiException(400, "Missing the required parameter 'roleId' when calling getRole"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles/{roleId}".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "roleId" + "\\}", apiInvoker.escapeString(roleId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Role) ApiInvoker.deserialize(localVarResponse, "", Role.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get role for an organization from a roleId
   * 
   * @param organizationId    * @param roleId 
  */
  public void getRole (UUID organizationId, UUID roleId, final Response.Listener<Role> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getRole",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getRole"));
    }
    // verify the required parameter 'roleId' is set
    if (roleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleId' when calling getRole",
        new ApiException(400, "Missing the required parameter 'roleId' when calling getRole"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles/{roleId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "roleId" + "\\}", apiInvoker.escapeString(roleId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Role) ApiInvoker.deserialize(localVarResponse,  "", Role.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get roles for an organization
  * 
   * @param organizationId 
   * @return List<Role>
  */
  public List<Role> getRoles (UUID organizationId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getRoles",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getRoles"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Role>) ApiInvoker.deserialize(localVarResponse, "array", Role.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get roles for an organization
   * 
   * @param organizationId 
  */
  public void getRoles (UUID organizationId, final Response.Listener<List<Role>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getRoles",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getRoles"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Role>) ApiInvoker.deserialize(localVarResponse,  "array", Role.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Refreshes the requested materialized entity set with data changes in the organization.
  * 
   * @param organizationId 
   * @param entitySetId 
   * @return void
  */
  public void refreshDataChanges (UUID organizationId, UUID entitySetId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling refreshDataChanges",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling refreshDataChanges"));
    }
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling refreshDataChanges",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling refreshDataChanges"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/{entitySetId}/refresh".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Refreshes the requested materialized entity set with data changes in the organization.
   * 
   * @param organizationId    * @param entitySetId 
  */
  public void refreshDataChanges (UUID organizationId, UUID entitySetId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling refreshDataChanges",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling refreshDataChanges"));
    }
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling refreshDataChanges",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling refreshDataChanges"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/{entitySetId}/refresh".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove auto-approved email domains
  * 
   * @param organizationId 
   * @param requestBody 
   * @return void
  */
  public void removeAutoApprovedEmailDomains (UUID organizationId, List<String> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling removeAutoApprovedEmailDomains",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling removeAutoApprovedEmailDomains"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling removeAutoApprovedEmailDomains",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling removeAutoApprovedEmailDomains"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/email-domains".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove auto-approved email domains
   * 
   * @param organizationId    * @param requestBody 
  */
  public void removeAutoApprovedEmailDomains (UUID organizationId, List<String> requestBody, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling removeAutoApprovedEmailDomains",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling removeAutoApprovedEmailDomains"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling removeAutoApprovedEmailDomains",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling removeAutoApprovedEmailDomains"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/email-domains".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove member from an organization
  * 
   * @param organizationId 
   * @param userId 
   * @return void
  */
  public void removeMember (UUID organizationId, UUID userId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling removeMember",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling removeMember"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling removeMember",
        new ApiException(400, "Missing the required parameter 'userId' when calling removeMember"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/members/{userId}".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove member from an organization
   * 
   * @param organizationId    * @param userId 
  */
  public void removeMember (UUID organizationId, UUID userId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling removeMember",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling removeMember"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling removeMember",
        new ApiException(400, "Missing the required parameter 'userId' when calling removeMember"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/members/{userId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove a role from a user
  * 
   * @param organizationId 
   * @param roleId 
   * @param userId 
   * @return void
  */
  public void removeRoleFromUser (UUID organizationId, UUID roleId, UUID userId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling removeRoleFromUser",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling removeRoleFromUser"));
    }
    // verify the required parameter 'roleId' is set
    if (roleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleId' when calling removeRoleFromUser",
        new ApiException(400, "Missing the required parameter 'roleId' when calling removeRoleFromUser"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling removeRoleFromUser",
        new ApiException(400, "Missing the required parameter 'userId' when calling removeRoleFromUser"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles/{roleId}/members/{userId}".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "roleId" + "\\}", apiInvoker.escapeString(roleId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove a role from a user
   * 
   * @param organizationId    * @param roleId    * @param userId 
  */
  public void removeRoleFromUser (UUID organizationId, UUID roleId, UUID userId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling removeRoleFromUser",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling removeRoleFromUser"));
    }
    // verify the required parameter 'roleId' is set
    if (roleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleId' when calling removeRoleFromUser",
        new ApiException(400, "Missing the required parameter 'roleId' when calling removeRoleFromUser"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling removeRoleFromUser",
        new ApiException(400, "Missing the required parameter 'userId' when calling removeRoleFromUser"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles/{roleId}/members/{userId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "roleId" + "\\}", apiInvoker.escapeString(roleId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set auto-approved email domains
  * 
   * @param organizationId 
   * @param requestBody 
   * @return void
  */
  public void setAutoApprovedEmailDomain (UUID organizationId, List<String> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling setAutoApprovedEmailDomain",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling setAutoApprovedEmailDomain"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling setAutoApprovedEmailDomain",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling setAutoApprovedEmailDomain"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/email-domains".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Set auto-approved email domains
   * 
   * @param organizationId    * @param requestBody 
  */
  public void setAutoApprovedEmailDomain (UUID organizationId, List<String> requestBody, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling setAutoApprovedEmailDomain",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling setAutoApprovedEmailDomain"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling setAutoApprovedEmailDomain",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling setAutoApprovedEmailDomain"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/email-domains".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Synchronizes EDM changes to the requested materialized entity set in the organization.
  * 
   * @param organizationId 
   * @param entitySetId 
   * @return void
  */
  public void synchronizeEdmChanges (UUID organizationId, UUID entitySetId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling synchronizeEdmChanges",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling synchronizeEdmChanges"));
    }
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling synchronizeEdmChanges",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling synchronizeEdmChanges"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/{entitySetId}/synchronize".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Synchronizes EDM changes to the requested materialized entity set in the organization.
   * 
   * @param organizationId    * @param entitySetId 
  */
  public void synchronizeEdmChanges (UUID organizationId, UUID entitySetId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling synchronizeEdmChanges",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling synchronizeEdmChanges"));
    }
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling synchronizeEdmChanges",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling synchronizeEdmChanges"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/{entitySetId}/synchronize".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update the organization description
  * 
   * @param organizationId 
   * @param body 
   * @return void
  */
  public void updateDescription (UUID organizationId, String body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling updateDescription",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling updateDescription"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling updateDescription",
        new ApiException(400, "Missing the required parameter 'body' when calling updateDescription"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/description".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update the organization description
   * 
   * @param organizationId    * @param body 
  */
  public void updateDescription (UUID organizationId, String body, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling updateDescription",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling updateDescription"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling updateDescription",
        new ApiException(400, "Missing the required parameter 'body' when calling updateDescription"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/description".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update role description for an organization from a roleId
  * 
   * @param organizationId 
   * @param roleId 
   * @param body 
   * @return void
  */
  public void updateRoleDescription (UUID organizationId, UUID roleId, String body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling updateRoleDescription",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling updateRoleDescription"));
    }
    // verify the required parameter 'roleId' is set
    if (roleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleId' when calling updateRoleDescription",
        new ApiException(400, "Missing the required parameter 'roleId' when calling updateRoleDescription"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling updateRoleDescription",
        new ApiException(400, "Missing the required parameter 'body' when calling updateRoleDescription"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles/{roleId}/description".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "roleId" + "\\}", apiInvoker.escapeString(roleId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update role description for an organization from a roleId
   * 
   * @param organizationId    * @param roleId    * @param body 
  */
  public void updateRoleDescription (UUID organizationId, UUID roleId, String body, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling updateRoleDescription",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling updateRoleDescription"));
    }
    // verify the required parameter 'roleId' is set
    if (roleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleId' when calling updateRoleDescription",
        new ApiException(400, "Missing the required parameter 'roleId' when calling updateRoleDescription"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling updateRoleDescription",
        new ApiException(400, "Missing the required parameter 'body' when calling updateRoleDescription"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles/{roleId}/description".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "roleId" + "\\}", apiInvoker.escapeString(roleId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update role title for an organization from a roleId
  * 
   * @param organizationId 
   * @param roleId 
   * @param body 
   * @return void
  */
  public void updateRoleTitle (UUID organizationId, UUID roleId, String body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling updateRoleTitle",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling updateRoleTitle"));
    }
    // verify the required parameter 'roleId' is set
    if (roleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleId' when calling updateRoleTitle",
        new ApiException(400, "Missing the required parameter 'roleId' when calling updateRoleTitle"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling updateRoleTitle",
        new ApiException(400, "Missing the required parameter 'body' when calling updateRoleTitle"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles/{roleId}/title".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "roleId" + "\\}", apiInvoker.escapeString(roleId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update role title for an organization from a roleId
   * 
   * @param organizationId    * @param roleId    * @param body 
  */
  public void updateRoleTitle (UUID organizationId, UUID roleId, String body, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling updateRoleTitle",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling updateRoleTitle"));
    }
    // verify the required parameter 'roleId' is set
    if (roleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleId' when calling updateRoleTitle",
        new ApiException(400, "Missing the required parameter 'roleId' when calling updateRoleTitle"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling updateRoleTitle",
        new ApiException(400, "Missing the required parameter 'body' when calling updateRoleTitle"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/principals/roles/{roleId}/title".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString())).replaceAll("\\{" + "roleId" + "\\}", apiInvoker.escapeString(roleId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update the organization title
  * 
   * @param organizationId 
   * @param body 
   * @return void
  */
  public void updateTitle (UUID organizationId, String body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling updateTitle",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling updateTitle"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling updateTitle",
        new ApiException(400, "Missing the required parameter 'body' when calling updateTitle"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/title".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update the organization title
   * 
   * @param organizationId    * @param body 
  */
  public void updateTitle (UUID organizationId, String body, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling updateTitle",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling updateTitle"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling updateTitle",
        new ApiException(400, "Missing the required parameter 'body' when calling updateTitle"));
    }

    // create path and map variables
    String path = "/datastore/organizations/{organizationId}/title".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
