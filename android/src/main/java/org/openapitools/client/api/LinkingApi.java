/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.EntityDataKey;
import org.openapitools.client.model.EntityKeyPair;
import org.openapitools.client.model.EntityLinkingFeatures;
import org.openapitools.client.model.EntityLinkingFeedback;
import org.openapitools.client.model.LinkingFeedback;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class LinkingApi {
  String basePath = "https://api.openlattice.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Submits feedbacks for a given linking entity set and linking id in a batch format.
  * 
   * @param linkingFeedback 
   * @return Integer
  */
  public Integer addLinkingFeedback (LinkingFeedback linkingFeedback) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = linkingFeedback;
    // verify the required parameter 'linkingFeedback' is set
    if (linkingFeedback == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingFeedback' when calling addLinkingFeedback",
        new ApiException(400, "Missing the required parameter 'linkingFeedback' when calling addLinkingFeedback"));
    }

    // create path and map variables
    String path = "/linker/linkingfeedback";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Submits feedbacks for a given linking entity set and linking id in a batch format.
   * 
   * @param linkingFeedback 
  */
  public void addLinkingFeedback (LinkingFeedback linkingFeedback, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = linkingFeedback;

    // verify the required parameter 'linkingFeedback' is set
    if (linkingFeedback == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkingFeedback' when calling addLinkingFeedback",
        new ApiException(400, "Missing the required parameter 'linkingFeedback' when calling addLinkingFeedback"));
    }

    // create path and map variables
    String path = "/linker/linkingfeedback".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes linking feedback
  * 
   * @param entityKeyPair 
   * @return Integer
  */
  public Integer deleteLinkingFeedback (EntityKeyPair entityKeyPair) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = entityKeyPair;
    // verify the required parameter 'entityKeyPair' is set
    if (entityKeyPair == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityKeyPair' when calling deleteLinkingFeedback",
        new ApiException(400, "Missing the required parameter 'entityKeyPair' when calling deleteLinkingFeedback"));
    }

    // create path and map variables
    String path = "/linker/linkingfeedback";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes linking feedback
   * 
   * @param entityKeyPair 
  */
  public void deleteLinkingFeedback (EntityKeyPair entityKeyPair, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = entityKeyPair;

    // verify the required parameter 'entityKeyPair' is set
    if (entityKeyPair == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityKeyPair' when calling deleteLinkingFeedback",
        new ApiException(400, "Missing the required parameter 'entityKeyPair' when calling deleteLinkingFeedback"));
    }

    // create path and map variables
    String path = "/linker/linkingfeedback".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns all feedback submitted
  * 
   * @return List<EntityLinkingFeedback>
  */
  public List<EntityLinkingFeedback> getAllLinkingFeedback () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/linker/linkingfeedback/all";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<EntityLinkingFeedback>) ApiInvoker.deserialize(localVarResponse, "array", EntityLinkingFeedback.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns all feedback submitted
   * 

  */
  public void getAllLinkingFeedback (final Response.Listener<List<EntityLinkingFeedback>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/linker/linkingfeedback/all".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<EntityLinkingFeedback>) ApiInvoker.deserialize(localVarResponse,  "array", EntityLinkingFeedback.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns all feedback submitted walong with the features of pairwise entities
  * 
   * @return List<EntityLinkingFeatures>
  */
  public List<EntityLinkingFeatures> getAllLinkingFeedbackWithFeatures () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/linker/linkingfeedback/features/all";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<EntityLinkingFeatures>) ApiInvoker.deserialize(localVarResponse, "array", EntityLinkingFeatures.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns all feedback submitted walong with the features of pairwise entities
   * 

  */
  public void getAllLinkingFeedbackWithFeatures (final Response.Listener<List<EntityLinkingFeatures>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/linker/linkingfeedback/features/all".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<EntityLinkingFeatures>) ApiInvoker.deserialize(localVarResponse,  "array", EntityLinkingFeatures.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns the feedback on the given entity pair along with their features
  * 
   * @param entityKeyPair 
   * @return EntityLinkingFeatures
  */
  public EntityLinkingFeatures getLinkingFeedbackWithFeatures (EntityKeyPair entityKeyPair) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = entityKeyPair;
    // verify the required parameter 'entityKeyPair' is set
    if (entityKeyPair == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityKeyPair' when calling getLinkingFeedbackWithFeatures",
        new ApiException(400, "Missing the required parameter 'entityKeyPair' when calling getLinkingFeedbackWithFeatures"));
    }

    // create path and map variables
    String path = "/linker/linkingfeedback/features";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EntityLinkingFeatures) ApiInvoker.deserialize(localVarResponse, "", EntityLinkingFeatures.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns the feedback on the given entity pair along with their features
   * 
   * @param entityKeyPair 
  */
  public void getLinkingFeedbackWithFeatures (EntityKeyPair entityKeyPair, final Response.Listener<EntityLinkingFeatures> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = entityKeyPair;

    // verify the required parameter 'entityKeyPair' is set
    if (entityKeyPair == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityKeyPair' when calling getLinkingFeedbackWithFeatures",
        new ApiException(400, "Missing the required parameter 'entityKeyPair' when calling getLinkingFeedbackWithFeatures"));
    }

    // create path and map variables
    String path = "/linker/linkingfeedback/features".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EntityLinkingFeatures) ApiInvoker.deserialize(localVarResponse,  "", EntityLinkingFeatures.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns positive/negative/all linking feedbacks on the given entity.
  * 
   * @param feedbackType 
   * @param entityDataKey 
   * @return List<EntityLinkingFeedback>
  */
  public List<EntityLinkingFeedback> getLinkingFeedbacksOnEntity (String feedbackType, EntityDataKey entityDataKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = entityDataKey;
    // verify the required parameter 'feedbackType' is set
    if (feedbackType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'feedbackType' when calling getLinkingFeedbacksOnEntity",
        new ApiException(400, "Missing the required parameter 'feedbackType' when calling getLinkingFeedbacksOnEntity"));
    }
    // verify the required parameter 'entityDataKey' is set
    if (entityDataKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityDataKey' when calling getLinkingFeedbacksOnEntity",
        new ApiException(400, "Missing the required parameter 'entityDataKey' when calling getLinkingFeedbacksOnEntity"));
    }

    // create path and map variables
    String path = "/linker/linkingfeedback/entity";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "feedbackType", feedbackType));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<EntityLinkingFeedback>) ApiInvoker.deserialize(localVarResponse, "array", EntityLinkingFeedback.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns positive/negative/all linking feedbacks on the given entity.
   * 
   * @param feedbackType    * @param entityDataKey 
  */
  public void getLinkingFeedbacksOnEntity (String feedbackType, EntityDataKey entityDataKey, final Response.Listener<List<EntityLinkingFeedback>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = entityDataKey;

    // verify the required parameter 'feedbackType' is set
    if (feedbackType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'feedbackType' when calling getLinkingFeedbacksOnEntity",
        new ApiException(400, "Missing the required parameter 'feedbackType' when calling getLinkingFeedbacksOnEntity"));
    }
    // verify the required parameter 'entityDataKey' is set
    if (entityDataKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityDataKey' when calling getLinkingFeedbacksOnEntity",
        new ApiException(400, "Missing the required parameter 'entityDataKey' when calling getLinkingFeedbacksOnEntity"));
    }

    // create path and map variables
    String path = "/linker/linkingfeedback/entity".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "feedbackType", feedbackType));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<EntityLinkingFeedback>) ApiInvoker.deserialize(localVarResponse,  "array", EntityLinkingFeedback.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
