=begin
#OpenLattice API

#OpenLattice API

The version of the OpenAPI document: 0.0.1
Contact: support@openlattice.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::AppApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AppApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::AppApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AppApi' do
    it 'should create an instance of AppApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::AppApi)
    end
  end

  # unit tests for create_app
  # Create an app if it doesn&#39;t exist.
  # @param app 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'create_app test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_app_role
  # Create an app role
  # @param app_id 
  # @param app_role 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'create_app_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_app
  # Delete an app
  # @param app_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_app test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_role_from_app
  # Delete an app role
  # @param app_id 
  # @param role_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_role_from_app test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_app
  # Get an app based on the ID
  # @param app_id 
  # @param [Hash] opts the optional parameters
  # @return [App]
  describe 'get_app test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_app_by_name
  # Get an app based on the name
  # @param name 
  # @param [Hash] opts the optional parameters
  # @return [App]
  describe 'get_app_by_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_apps
  # Get all apps
  # @param [Hash] opts the optional parameters
  # @return [Array<App>]
  describe 'get_apps test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_available_app_configs
  # Get available app configurations
  # @param app_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<UserAppConfig>]
  describe 'get_available_app_configs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_available_app_configs_old
  # Get historical app configurations for an app
  # @param app_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<HistoricalAppConfig>]
  describe 'get_available_app_configs_old test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
