=begin
#OpenLattice API

#OpenLattice API

The version of the OpenAPI document: 0.0.1
Contact: support@openlattice.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class DatasetApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deletes an OrganizationExternalDatabaseColumn object, which represents an organization's column in an external database. This deletes both the object and the column in the database. It is a hard delete.
    # @param organization_id [String] 
    # @param table_name [String] 
    # @param column_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_external_database_column(organization_id, table_name, column_name, opts = {})
      delete_external_database_column_with_http_info(organization_id, table_name, column_name, opts)
      nil
    end

    # Deletes an OrganizationExternalDatabaseColumn object, which represents an organization&#39;s column in an external database. This deletes both the object and the column in the database. It is a hard delete.
    # @param organization_id [String] 
    # @param table_name [String] 
    # @param column_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_external_database_column_with_http_info(organization_id, table_name, column_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetApi.delete_external_database_column ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DatasetApi.delete_external_database_column"
      end
      # verify the required parameter 'table_name' is set
      if @api_client.config.client_side_validation && table_name.nil?
        fail ArgumentError, "Missing the required parameter 'table_name' when calling DatasetApi.delete_external_database_column"
      end
      # verify the required parameter 'column_name' is set
      if @api_client.config.client_side_validation && column_name.nil?
        fail ArgumentError, "Missing the required parameter 'column_name' when calling DatasetApi.delete_external_database_column"
      end
      # resource path
      local_var_path = '/datastore/organization-database/{organizationId}/{tableName}/{columnName}/external-database-column'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'tableName' + '}', CGI.escape(table_name.to_s)).sub('{' + 'columnName' + '}', CGI.escape(column_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetApi#delete_external_database_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes multiple OrganizationExternalDatabaseColumn objects and the columns they represent within an organization's table in an external database. It is a hard delete
    # @param organization_id [String] 
    # @param table_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_external_database_columns(organization_id, table_name, opts = {})
      delete_external_database_columns_with_http_info(organization_id, table_name, opts)
      nil
    end

    # Deletes multiple OrganizationExternalDatabaseColumn objects and the columns they represent within an organization&#39;s table in an external database. It is a hard delete
    # @param organization_id [String] 
    # @param table_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_external_database_columns_with_http_info(organization_id, table_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetApi.delete_external_database_columns ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DatasetApi.delete_external_database_columns"
      end
      # verify the required parameter 'table_name' is set
      if @api_client.config.client_side_validation && table_name.nil?
        fail ArgumentError, "Missing the required parameter 'table_name' when calling DatasetApi.delete_external_database_columns"
      end
      # resource path
      local_var_path = '/datastore/organization-database/{organizationId}/{tableName}/external-database-column'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'tableName' + '}', CGI.escape(table_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetApi#delete_external_database_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes an OrganizationExternalDatabaseTable object, which represents an organization's table in an external database. This deletes both the object and the table in the database. It is a hard delete.
    # @param organization_id [String] 
    # @param table_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_external_database_table(organization_id, table_name, opts = {})
      delete_external_database_table_with_http_info(organization_id, table_name, opts)
      nil
    end

    # Deletes an OrganizationExternalDatabaseTable object, which represents an organization&#39;s table in an external database. This deletes both the object and the table in the database. It is a hard delete.
    # @param organization_id [String] 
    # @param table_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_external_database_table_with_http_info(organization_id, table_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetApi.delete_external_database_table ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DatasetApi.delete_external_database_table"
      end
      # verify the required parameter 'table_name' is set
      if @api_client.config.client_side_validation && table_name.nil?
        fail ArgumentError, "Missing the required parameter 'table_name' when calling DatasetApi.delete_external_database_table"
      end
      # resource path
      local_var_path = '/datastore/organization-database/{organizationId}/{tableName}/external-database-table'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'tableName' + '}', CGI.escape(table_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetApi#delete_external_database_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes multiple OrganizationExternalDatabaseTable objects and the tables they represent in the database. It is a hard delete.
    # @param organization_id [String] 
    # @param request_body [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_external_database_tables(organization_id, request_body, opts = {})
      delete_external_database_tables_with_http_info(organization_id, request_body, opts)
      nil
    end

    # Deletes multiple OrganizationExternalDatabaseTable objects and the tables they represent in the database. It is a hard delete.
    # @param organization_id [String] 
    # @param request_body [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_external_database_tables_with_http_info(organization_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetApi.delete_external_database_tables ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DatasetApi.delete_external_database_tables"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling DatasetApi.delete_external_database_tables"
      end
      # resource path
      local_var_path = '/datastore/organization-database/{organizationId}/external-database-table'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetApi#delete_external_database_tables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a map of all OrganizationExternalDatabaseTable objects to OrganizationExternalDatabase columns that are contained within each table.
    # @param organization_id [String] 
    # @param permission [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<OrganizationExternalDatabaseTableColumnsPair>]
    def get_authorized_external_db_tables_with_column_metadata(organization_id, permission, opts = {})
      data, _status_code, _headers = get_authorized_external_db_tables_with_column_metadata_with_http_info(organization_id, permission, opts)
      data
    end

    # Gets a map of all OrganizationExternalDatabaseTable objects to OrganizationExternalDatabase columns that are contained within each table.
    # @param organization_id [String] 
    # @param permission [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrganizationExternalDatabaseTableColumnsPair>, Integer, Hash)>] Array<OrganizationExternalDatabaseTableColumnsPair> data, response status code and response headers
    def get_authorized_external_db_tables_with_column_metadata_with_http_info(organization_id, permission, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetApi.get_authorized_external_db_tables_with_column_metadata ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DatasetApi.get_authorized_external_db_tables_with_column_metadata"
      end
      # verify the required parameter 'permission' is set
      if @api_client.config.client_side_validation && permission.nil?
        fail ArgumentError, "Missing the required parameter 'permission' when calling DatasetApi.get_authorized_external_db_tables_with_column_metadata"
      end
      # verify enum value
      allowable_values = ["DISCOVER", "MATERIALIZE", "LINK", "READ", "WRITE", "OWNER"]
      if @api_client.config.client_side_validation && !allowable_values.include?(permission)
        fail ArgumentError, "invalid value for \"permission\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/datastore/organization-database/{organizationId}/{permission}/external-database-table/external-database-column/authorized'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'permission' + '}', CGI.escape(permission.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<OrganizationExternalDatabaseTableColumnsPair>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetApi#get_authorized_external_db_tables_with_column_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets an OrganizationExternalDatabaseColumn object, which represents a column within an organization's table in an external database.
    # @param organization_id [String] 
    # @param table_name [String] 
    # @param column_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationExternalDatabaseColumn]
    def get_external_database_column(organization_id, table_name, column_name, opts = {})
      data, _status_code, _headers = get_external_database_column_with_http_info(organization_id, table_name, column_name, opts)
      data
    end

    # Gets an OrganizationExternalDatabaseColumn object, which represents a column within an organization&#39;s table in an external database.
    # @param organization_id [String] 
    # @param table_name [String] 
    # @param column_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationExternalDatabaseColumn, Integer, Hash)>] OrganizationExternalDatabaseColumn data, response status code and response headers
    def get_external_database_column_with_http_info(organization_id, table_name, column_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetApi.get_external_database_column ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DatasetApi.get_external_database_column"
      end
      # verify the required parameter 'table_name' is set
      if @api_client.config.client_side_validation && table_name.nil?
        fail ArgumentError, "Missing the required parameter 'table_name' when calling DatasetApi.get_external_database_column"
      end
      # verify the required parameter 'column_name' is set
      if @api_client.config.client_side_validation && column_name.nil?
        fail ArgumentError, "Missing the required parameter 'column_name' when calling DatasetApi.get_external_database_column"
      end
      # resource path
      local_var_path = '/datastore/organization-database/{organizationId}/{tableName}/{columnName}/external-database-column'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'tableName' + '}', CGI.escape(table_name.to_s)).sub('{' + 'columnName' + '}', CGI.escape(column_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'OrganizationExternalDatabaseColumn' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetApi#get_external_database_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets an OrganizationExternalDatabaseTable object, which represents an organization's table in an external database.
    # @param organization_id [String] 
    # @param table_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationExternalDatabaseTable]
    def get_external_database_table(organization_id, table_name, opts = {})
      data, _status_code, _headers = get_external_database_table_with_http_info(organization_id, table_name, opts)
      data
    end

    # Gets an OrganizationExternalDatabaseTable object, which represents an organization&#39;s table in an external database.
    # @param organization_id [String] 
    # @param table_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationExternalDatabaseTable, Integer, Hash)>] OrganizationExternalDatabaseTable data, response status code and response headers
    def get_external_database_table_with_http_info(organization_id, table_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetApi.get_external_database_table ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DatasetApi.get_external_database_table"
      end
      # verify the required parameter 'table_name' is set
      if @api_client.config.client_side_validation && table_name.nil?
        fail ArgumentError, "Missing the required parameter 'table_name' when calling DatasetApi.get_external_database_table"
      end
      # resource path
      local_var_path = '/datastore/organization-database/{organizationId}/{tableName}/external-database-table'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'tableName' + '}', CGI.escape(table_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'OrganizationExternalDatabaseTable' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetApi#get_external_database_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets an object containing an OrganizationExternalDatabaseTable object and its OrganizationExternalDatabase columns for an organization
    # @param organization_id [String] 
    # @param table_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationExternalDatabaseTableColumnsPair]
    def get_external_database_table_with_column_metadata(organization_id, table_id, opts = {})
      data, _status_code, _headers = get_external_database_table_with_column_metadata_with_http_info(organization_id, table_id, opts)
      data
    end

    # Gets an object containing an OrganizationExternalDatabaseTable object and its OrganizationExternalDatabase columns for an organization
    # @param organization_id [String] 
    # @param table_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationExternalDatabaseTableColumnsPair, Integer, Hash)>] OrganizationExternalDatabaseTableColumnsPair data, response status code and response headers
    def get_external_database_table_with_column_metadata_with_http_info(organization_id, table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetApi.get_external_database_table_with_column_metadata ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DatasetApi.get_external_database_table_with_column_metadata"
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling DatasetApi.get_external_database_table_with_column_metadata"
      end
      # resource path
      local_var_path = '/datastore/organization-database/{organizationId}/{tableId}/external-database-table/external-database-column'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'tableId' + '}', CGI.escape(table_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'OrganizationExternalDatabaseTableColumnsPair' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetApi#get_external_database_table_with_column_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all OrganizationExternalDatabaseTable objects for an organization
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<OrganizationExternalDatabaseTable>]
    def get_external_database_tables(organization_id, opts = {})
      data, _status_code, _headers = get_external_database_tables_with_http_info(organization_id, opts)
      data
    end

    # Gets all OrganizationExternalDatabaseTable objects for an organization
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrganizationExternalDatabaseTable>, Integer, Hash)>] Array<OrganizationExternalDatabaseTable> data, response status code and response headers
    def get_external_database_tables_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetApi.get_external_database_tables ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DatasetApi.get_external_database_tables"
      end
      # resource path
      local_var_path = '/datastore/organization-database/{organizationId}/external-database-table'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<OrganizationExternalDatabaseTable>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetApi#get_external_database_tables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a map of all OrganizationExternalDatabaseTable objects to OrganizationExternalDatabase columns that are contained within each table.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<OrganizationExternalDatabaseTableColumnsPair>]
    def get_external_database_tables_with_column_metadata(organization_id, opts = {})
      data, _status_code, _headers = get_external_database_tables_with_column_metadata_with_http_info(organization_id, opts)
      data
    end

    # Gets a map of all OrganizationExternalDatabaseTable objects to OrganizationExternalDatabase columns that are contained within each table.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrganizationExternalDatabaseTableColumnsPair>, Integer, Hash)>] Array<OrganizationExternalDatabaseTableColumnsPair> data, response status code and response headers
    def get_external_database_tables_with_column_metadata_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetApi.get_external_database_tables_with_column_metadata ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DatasetApi.get_external_database_tables_with_column_metadata"
      end
      # resource path
      local_var_path = '/datastore/organization-database/{organizationId}/external-database-table/external-database-column'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<OrganizationExternalDatabaseTableColumnsPair>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetApi#get_external_database_tables_with_column_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an OrganizationExternalDatabaseTableColumn object's fields that are included within the given metadata.
    # @param organization_id [String] 
    # @param table_name [String] 
    # @param column_name [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_external_database_column(organization_id, table_name, column_name, metadata_update, opts = {})
      update_external_database_column_with_http_info(organization_id, table_name, column_name, metadata_update, opts)
      nil
    end

    # Updates an OrganizationExternalDatabaseTableColumn object&#39;s fields that are included within the given metadata.
    # @param organization_id [String] 
    # @param table_name [String] 
    # @param column_name [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_external_database_column_with_http_info(organization_id, table_name, column_name, metadata_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetApi.update_external_database_column ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DatasetApi.update_external_database_column"
      end
      # verify the required parameter 'table_name' is set
      if @api_client.config.client_side_validation && table_name.nil?
        fail ArgumentError, "Missing the required parameter 'table_name' when calling DatasetApi.update_external_database_column"
      end
      # verify the required parameter 'column_name' is set
      if @api_client.config.client_side_validation && column_name.nil?
        fail ArgumentError, "Missing the required parameter 'column_name' when calling DatasetApi.update_external_database_column"
      end
      # verify the required parameter 'metadata_update' is set
      if @api_client.config.client_side_validation && metadata_update.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_update' when calling DatasetApi.update_external_database_column"
      end
      # resource path
      local_var_path = '/datastore/organization-database/{organizationId}/{tableName}/{columnName}/external-database-column'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'tableName' + '}', CGI.escape(table_name.to_s)).sub('{' + 'columnName' + '}', CGI.escape(column_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(metadata_update) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetApi#update_external_database_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an OrganizationExternalDatabaseTable object's fields that are included within the given metadata.
    # @param organization_id [String] 
    # @param table_name [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_external_database_table(organization_id, table_name, metadata_update, opts = {})
      update_external_database_table_with_http_info(organization_id, table_name, metadata_update, opts)
      nil
    end

    # Updates an OrganizationExternalDatabaseTable object&#39;s fields that are included within the given metadata.
    # @param organization_id [String] 
    # @param table_name [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_external_database_table_with_http_info(organization_id, table_name, metadata_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetApi.update_external_database_table ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DatasetApi.update_external_database_table"
      end
      # verify the required parameter 'table_name' is set
      if @api_client.config.client_side_validation && table_name.nil?
        fail ArgumentError, "Missing the required parameter 'table_name' when calling DatasetApi.update_external_database_table"
      end
      # verify the required parameter 'metadata_update' is set
      if @api_client.config.client_side_validation && metadata_update.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_update' when calling DatasetApi.update_external_database_table"
      end
      # resource path
      local_var_path = '/datastore/organization-database/{organizationId}/{tableName}/external-database-table'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'tableName' + '}', CGI.escape(table_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(metadata_update) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetApi#update_external_database_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
