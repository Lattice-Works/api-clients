=begin
#OpenLattice API

#OpenLattice API

The version of the OpenAPI document: 0.0.1
Contact: support@openlattice.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class DatasetApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Gets an object containing an OrganizationExternalDatabaseTable object and its OrganizationExternalDatabase columns for an organization
    # @param organization_id [String] 
    # @param table_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, OrganizationExternalDatabaseTableColumnsPair>]
    def get_external_database_table_with_columns(organization_id, table_id, opts = {})
      data, _status_code, _headers = get_external_database_table_with_columns_with_http_info(organization_id, table_id, opts)
      data
    end

    # Gets an object containing an OrganizationExternalDatabaseTable object and its OrganizationExternalDatabase columns for an organization
    # @param organization_id [String] 
    # @param table_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, OrganizationExternalDatabaseTableColumnsPair>, Integer, Hash)>] Hash<String, OrganizationExternalDatabaseTableColumnsPair> data, response status code and response headers
    def get_external_database_table_with_columns_with_http_info(organization_id, table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetApi.get_external_database_table_with_columns ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DatasetApi.get_external_database_table_with_columns"
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling DatasetApi.get_external_database_table_with_columns"
      end
      # resource path
      local_var_path = '/datastore/organization-database/{organizationId}/{tableId}/external-database-table/external-database-column'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'tableId' + '}', CGI.escape(table_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, OrganizationExternalDatabaseTableColumnsPair>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetApi#get_external_database_table_with_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all OrganizationExternalDatabaseTable objects for an organization
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<OrganizationExternalDatabaseTable>]
    def get_external_database_tables(organization_id, opts = {})
      data, _status_code, _headers = get_external_database_tables_with_http_info(organization_id, opts)
      data
    end

    # Gets all OrganizationExternalDatabaseTable objects for an organization
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrganizationExternalDatabaseTable>, Integer, Hash)>] Array<OrganizationExternalDatabaseTable> data, response status code and response headers
    def get_external_database_tables_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetApi.get_external_database_tables ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DatasetApi.get_external_database_tables"
      end
      # resource path
      local_var_path = '/datastore/organization-database/{organizationId}/external-database-table'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<OrganizationExternalDatabaseTable>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetApi#get_external_database_tables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a map of all OrganizationExternalDatabaseTable objects to OrganizationExternalDatabase columns that are contained within each table.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Array<OrganizationExternalDatabaseColumn>>]
    def get_external_database_tables_with_columns(organization_id, opts = {})
      data, _status_code, _headers = get_external_database_tables_with_columns_with_http_info(organization_id, opts)
      data
    end

    # Gets a map of all OrganizationExternalDatabaseTable objects to OrganizationExternalDatabase columns that are contained within each table.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Array<OrganizationExternalDatabaseColumn>>, Integer, Hash)>] Hash<String, Array<OrganizationExternalDatabaseColumn>> data, response status code and response headers
    def get_external_database_tables_with_columns_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetApi.get_external_database_tables_with_columns ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DatasetApi.get_external_database_tables_with_columns"
      end
      # resource path
      local_var_path = '/datastore/organization-database/{organizationId}/external-database-table/external-database-column'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Array<OrganizationExternalDatabaseColumn>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetApi#get_external_database_tables_with_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
