=begin
#OpenLattice API

#OpenLattice API

The version of the OpenAPI document: 0.0.1
Contact: support@openlattice.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class DataIntegrationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get entity key IDs
    # @param entity_key [Array<EntityKey>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_entity_key_ids(entity_key, opts = {})
      data, _status_code, _headers = get_entity_key_ids_with_http_info(entity_key, opts)
      data
    end

    # Get entity key IDs
    # @param entity_key [Array<EntityKey>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def get_entity_key_ids_with_http_info(entity_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataIntegrationsApi.get_entity_key_ids ...'
      end
      # verify the required parameter 'entity_key' is set
      if @api_client.config.client_side_validation && entity_key.nil?
        fail ArgumentError, "Missing the required parameter 'entity_key' when calling DataIntegrationsApi.get_entity_key_ids"
      end
      # resource path
      local_var_path = '/datastore/integration/entityKeyIds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(entity_key) 

      # return_type
      return_type = opts[:return_type] || 'Array<String>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataIntegrationsApi#get_entity_key_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Integrate entity and association data
    # @param detailed_results [Boolean] 
    # @param bulk_data_creation [BulkDataCreation] 
    # @param [Hash] opts the optional parameters
    # @return [IntegrationResults]
    def integrate_entity_and_association_data(detailed_results, bulk_data_creation, opts = {})
      data, _status_code, _headers = integrate_entity_and_association_data_with_http_info(detailed_results, bulk_data_creation, opts)
      data
    end

    # Integrate entity and association data
    # @param detailed_results [Boolean] 
    # @param bulk_data_creation [BulkDataCreation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntegrationResults, Integer, Hash)>] IntegrationResults data, response status code and response headers
    def integrate_entity_and_association_data_with_http_info(detailed_results, bulk_data_creation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataIntegrationsApi.integrate_entity_and_association_data ...'
      end
      # verify the required parameter 'detailed_results' is set
      if @api_client.config.client_side_validation && detailed_results.nil?
        fail ArgumentError, "Missing the required parameter 'detailed_results' when calling DataIntegrationsApi.integrate_entity_and_association_data"
      end
      # verify the required parameter 'bulk_data_creation' is set
      if @api_client.config.client_side_validation && bulk_data_creation.nil?
        fail ArgumentError, "Missing the required parameter 'bulk_data_creation' when calling DataIntegrationsApi.integrate_entity_and_association_data"
      end
      # resource path
      local_var_path = '/datastore/integration'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'detailedResults'] = detailed_results

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(bulk_data_creation) 

      # return_type
      return_type = opts[:return_type] || 'IntegrationResults' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataIntegrationsApi#integrate_entity_and_association_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
