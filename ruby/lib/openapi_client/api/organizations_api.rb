=begin
#OpenLattice API

#OpenLattice API

The version of the OpenAPI document: 0.0.1
Contact: support@openlattice.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class OrganizationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add member to an organization
    # @param organization_id [String] 
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_member(organization_id, user_id, opts = {})
      add_member_with_http_info(organization_id, user_id, opts)
      nil
    end

    # Add member to an organization
    # @param organization_id [String] 
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_member_with_http_info(organization_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.add_member ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.add_member"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.add_member"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/principals/members/{userId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#add_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a role to a user
    # @param organization_id [String] 
    # @param role_id [String] 
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_role_to_user(organization_id, role_id, user_id, opts = {})
      add_role_to_user_with_http_info(organization_id, role_id, user_id, opts)
      nil
    end

    # Add a role to a user
    # @param organization_id [String] 
    # @param role_id [String] 
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_role_to_user_with_http_info(organization_id, role_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.add_role_to_user ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.add_role_to_user"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrganizationsApi.add_role_to_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.add_role_to_user"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/principals/roles/{roleId}/members/{userId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'roleId' + '}', CGI.escape(role_id.to_s)).sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#add_role_to_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Materializes entity sets into the organization database.
    # @param organization_id [String] 
    # @param request_body [Hash<String, Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Array<String>>]
    def assemble_entity_sets(organization_id, request_body, opts = {})
      data, _status_code, _headers = assemble_entity_sets_with_http_info(organization_id, request_body, opts)
      data
    end

    # Materializes entity sets into the organization database.
    # @param organization_id [String] 
    # @param request_body [Hash<String, Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Array<String>>, Integer, Hash)>] Hash<String, Array<String>> data, response status code and response headers
    def assemble_entity_sets_with_http_info(organization_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.assemble_entity_sets ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.assemble_entity_sets"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling OrganizationsApi.assemble_entity_sets"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/entity-sets/assemble'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Array<String>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#assemble_entity_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an organization if it doesn't exist.
    # @param organization [Organization] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def create_organization_if_not_exists(organization, opts = {})
      data, _status_code, _headers = create_organization_if_not_exists_with_http_info(organization, opts)
      data
    end

    # Creates an organization if it doesn&#39;t exist.
    # @param organization [Organization] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def create_organization_if_not_exists_with_http_info(organization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.create_organization_if_not_exists ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling OrganizationsApi.create_organization_if_not_exists"
      end
      # resource path
      local_var_path = '/datastore/organizations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(organization) 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#create_organization_if_not_exists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates role
    # @param role [Role] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def create_role(role, opts = {})
      data, _status_code, _headers = create_role_with_http_info(role, opts)
      data
    end

    # Creates role
    # @param role [Role] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def create_role_with_http_info(role, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.create_role ...'
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling OrganizationsApi.create_role"
      end
      # resource path
      local_var_path = '/datastore/organizations/roles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role) 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#create_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove role for an organization
    # @param organization_id [String] 
    # @param role_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_role(organization_id, role_id, opts = {})
      delete_role_with_http_info(organization_id, role_id, opts)
      nil
    end

    # Remove role for an organization
    # @param organization_id [String] 
    # @param role_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_role_with_http_info(organization_id, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_role ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.delete_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrganizationsApi.delete_role"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/principals/roles/{roleId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'roleId' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an organization from the organizationId
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def destroy_organization(organization_id, opts = {})
      destroy_organization_with_http_info(organization_id, opts)
      nil
    end

    # Remove an organization from the organizationId
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def destroy_organization_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.destroy_organization ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.destroy_organization"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#destroy_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get members of a role for an organization from a roleId
    # @param organization_id [String] 
    # @param role_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Auth0userBasic>]
    def get_all_users_of_role(organization_id, role_id, opts = {})
      data, _status_code, _headers = get_all_users_of_role_with_http_info(organization_id, role_id, opts)
      data
    end

    # Get members of a role for an organization from a roleId
    # @param organization_id [String] 
    # @param role_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Auth0userBasic>, Integer, Hash)>] Array<Auth0userBasic> data, response status code and response headers
    def get_all_users_of_role_with_http_info(organization_id, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_all_users_of_role ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.get_all_users_of_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrganizationsApi.get_all_users_of_role"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/principals/roles/{roleId}/members/'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'roleId' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Auth0userBasic>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_all_users_of_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get auto-approved email domains
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_auto_approved_email_domains(organization_id, opts = {})
      data, _status_code, _headers = get_auto_approved_email_domains_with_http_info(organization_id, opts)
      data
    end

    # Get auto-approved email domains
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def get_auto_approved_email_domains_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_auto_approved_email_domains ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.get_auto_approved_email_domains"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/email-domains'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<String>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_auto_approved_email_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the entity sets for an organization for a certain flag
    # @param organization_id [String] 
    # @param request_body [Hash<String, Array<String>>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Hash<String, Array<String>>>]
    def get_flagged_organization_entity_sets(organization_id, request_body, opts = {})
      data, _status_code, _headers = get_flagged_organization_entity_sets_with_http_info(organization_id, request_body, opts)
      data
    end

    # Get the entity sets for an organization for a certain flag
    # @param organization_id [String] 
    # @param request_body [Hash<String, Array<String>>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Hash<String, Array<String>>>, Integer, Hash)>] Array<Hash<String, Array<String>>> data, response status code and response headers
    def get_flagged_organization_entity_sets_with_http_info(organization_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_flagged_organization_entity_sets ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.get_flagged_organization_entity_sets"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling OrganizationsApi.get_flagged_organization_entity_sets"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/entity-sets'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] || 'Array<Hash<String, Array<String>>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_flagged_organization_entity_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get members of a certain organization
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<OrganizationMember>]
    def get_members(organization_id, opts = {})
      data, _status_code, _headers = get_members_with_http_info(organization_id, opts)
      data
    end

    # Get members of a certain organization
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrganizationMember>, Integer, Hash)>] Array<OrganizationMember> data, response status code and response headers
    def get_members_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_members ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.get_members"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/principals/members'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<OrganizationMember>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization from the organizationId
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Organization]
    def get_organization(organization_id, opts = {})
      data, _status_code, _headers = get_organization_with_http_info(organization_id, opts)
      data
    end

    # Get an organization from the organizationId
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def get_organization_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.get_organization"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Organization' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the entity sets for an organization for a certain filter
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Array<String>>]
    def get_organization_entity_sets(organization_id, opts = {})
      data, _status_code, _headers = get_organization_entity_sets_with_http_info(organization_id, opts)
      data
    end

    # Get the entity sets for an organization for a certain filter
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Array<String>>, Integer, Hash)>] Hash<String, Array<String>> data, response status code and response headers
    def get_organization_entity_sets_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization_entity_sets ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.get_organization_entity_sets"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/entity-sets'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Array<String>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization_entity_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the integrations account for an organization from the organizationId
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def get_organization_integration_account(organization_id, opts = {})
      data, _status_code, _headers = get_organization_integration_account_with_http_info(organization_id, opts)
      data
    end

    # Get the integrations account for an organization from the organizationId
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def get_organization_integration_account_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization_integration_account ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.get_organization_integration_account"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/integration'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse200' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization_integration_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all organizations
    # @param [Hash] opts the optional parameters
    # @return [Array<Organization>]
    def get_organizations(opts = {})
      data, _status_code, _headers = get_organizations_with_http_info(opts)
      data
    end

    # Get all organizations
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Organization>, Integer, Hash)>] Array<Organization> data, response status code and response headers
    def get_organizations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organizations ...'
      end
      # resource path
      local_var_path = '/datastore/organizations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Organization>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get role for an organization from a roleId
    # @param organization_id [String] 
    # @param role_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Role]
    def get_role(organization_id, role_id, opts = {})
      data, _status_code, _headers = get_role_with_http_info(organization_id, role_id, opts)
      data
    end

    # Get role for an organization from a roleId
    # @param organization_id [String] 
    # @param role_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Role, Integer, Hash)>] Role data, response status code and response headers
    def get_role_with_http_info(organization_id, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_role ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.get_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrganizationsApi.get_role"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/principals/roles/{roleId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'roleId' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Role' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get roles for an organization
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Role>]
    def get_roles(organization_id, opts = {})
      data, _status_code, _headers = get_roles_with_http_info(organization_id, opts)
      data
    end

    # Get roles for an organization
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Role>, Integer, Hash)>] Array<Role> data, response status code and response headers
    def get_roles_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_roles ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.get_roles"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/principals/roles'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Role>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refreshes the requested materialized entity set with data changes in the organization.
    # @param organization_id [String] 
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def refresh_data_changes(organization_id, entity_set_id, opts = {})
      refresh_data_changes_with_http_info(organization_id, entity_set_id, opts)
      nil
    end

    # Refreshes the requested materialized entity set with data changes in the organization.
    # @param organization_id [String] 
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def refresh_data_changes_with_http_info(organization_id, entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.refresh_data_changes ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.refresh_data_changes"
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling OrganizationsApi.refresh_data_changes"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/{entitySetId}/refresh'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#refresh_data_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove auto-approved email domains
    # @param organization_id [String] 
    # @param request_body [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_auto_approved_email_domains(organization_id, request_body, opts = {})
      remove_auto_approved_email_domains_with_http_info(organization_id, request_body, opts)
      nil
    end

    # Remove auto-approved email domains
    # @param organization_id [String] 
    # @param request_body [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_auto_approved_email_domains_with_http_info(organization_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.remove_auto_approved_email_domains ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.remove_auto_approved_email_domains"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling OrganizationsApi.remove_auto_approved_email_domains"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/email-domains'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#remove_auto_approved_email_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove member from an organization
    # @param organization_id [String] 
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_member(organization_id, user_id, opts = {})
      remove_member_with_http_info(organization_id, user_id, opts)
      nil
    end

    # Remove member from an organization
    # @param organization_id [String] 
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_member_with_http_info(organization_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.remove_member ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.remove_member"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.remove_member"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/principals/members/{userId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#remove_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a role from a user
    # @param organization_id [String] 
    # @param role_id [String] 
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_role_from_user(organization_id, role_id, user_id, opts = {})
      remove_role_from_user_with_http_info(organization_id, role_id, user_id, opts)
      nil
    end

    # Remove a role from a user
    # @param organization_id [String] 
    # @param role_id [String] 
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_role_from_user_with_http_info(organization_id, role_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.remove_role_from_user ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.remove_role_from_user"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrganizationsApi.remove_role_from_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.remove_role_from_user"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/principals/roles/{roleId}/members/{userId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'roleId' + '}', CGI.escape(role_id.to_s)).sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#remove_role_from_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set auto-approved email domains
    # @param organization_id [String] 
    # @param request_body [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_auto_approved_email_domain(organization_id, request_body, opts = {})
      set_auto_approved_email_domain_with_http_info(organization_id, request_body, opts)
      nil
    end

    # Set auto-approved email domains
    # @param organization_id [String] 
    # @param request_body [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_auto_approved_email_domain_with_http_info(organization_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.set_auto_approved_email_domain ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.set_auto_approved_email_domain"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling OrganizationsApi.set_auto_approved_email_domain"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/email-domains'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#set_auto_approved_email_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Synchronizes EDM changes to the requested materialized entity set in the organization.
    # @param organization_id [String] 
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def synchronize_edm_changes(organization_id, entity_set_id, opts = {})
      synchronize_edm_changes_with_http_info(organization_id, entity_set_id, opts)
      nil
    end

    # Synchronizes EDM changes to the requested materialized entity set in the organization.
    # @param organization_id [String] 
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def synchronize_edm_changes_with_http_info(organization_id, entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.synchronize_edm_changes ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.synchronize_edm_changes"
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling OrganizationsApi.synchronize_edm_changes"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/{entitySetId}/synchronize'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#synchronize_edm_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the organization description
    # @param organization_id [String] 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_description(organization_id, body, opts = {})
      update_description_with_http_info(organization_id, body, opts)
      nil
    end

    # Update the organization description
    # @param organization_id [String] 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_description_with_http_info(organization_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.update_description ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.update_description"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrganizationsApi.update_description"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/description'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#update_description\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update role description for an organization from a roleId
    # @param organization_id [String] 
    # @param role_id [String] 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_role_description(organization_id, role_id, body, opts = {})
      update_role_description_with_http_info(organization_id, role_id, body, opts)
      nil
    end

    # Update role description for an organization from a roleId
    # @param organization_id [String] 
    # @param role_id [String] 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_role_description_with_http_info(organization_id, role_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.update_role_description ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.update_role_description"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrganizationsApi.update_role_description"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrganizationsApi.update_role_description"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/principals/roles/{roleId}/description'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'roleId' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#update_role_description\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update role title for an organization from a roleId
    # @param organization_id [String] 
    # @param role_id [String] 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_role_title(organization_id, role_id, body, opts = {})
      update_role_title_with_http_info(organization_id, role_id, body, opts)
      nil
    end

    # Update role title for an organization from a roleId
    # @param organization_id [String] 
    # @param role_id [String] 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_role_title_with_http_info(organization_id, role_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.update_role_title ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.update_role_title"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrganizationsApi.update_role_title"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrganizationsApi.update_role_title"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/principals/roles/{roleId}/title'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'roleId' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#update_role_title\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the organization title
    # @param organization_id [String] 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_title(organization_id, body, opts = {})
      update_title_with_http_info(organization_id, body, opts)
      nil
    end

    # Update the organization title
    # @param organization_id [String] 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_title_with_http_info(organization_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.update_title ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.update_title"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrganizationsApi.update_title"
      end
      # resource path
      local_var_path = '/datastore/organizations/{organizationId}/title'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#update_title\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
