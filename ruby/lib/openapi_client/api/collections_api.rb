=begin
#OpenLattice API

#OpenLattice API

The version of the OpenAPI document: 0.0.1
Contact: support@openlattice.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class CollectionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Appends type to template of the specified EntityTypeCollection
    # @param entity_type_collection_id [String] 
    # @param collection_template_type [CollectionTemplateType] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_type_to_entity_type_collection_template(entity_type_collection_id, collection_template_type, opts = {})
      add_type_to_entity_type_collection_template_with_http_info(entity_type_collection_id, collection_template_type, opts)
      nil
    end

    # Appends type to template of the specified EntityTypeCollection
    # @param entity_type_collection_id [String] 
    # @param collection_template_type [CollectionTemplateType] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_type_to_entity_type_collection_template_with_http_info(entity_type_collection_id, collection_template_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.add_type_to_entity_type_collection_template ...'
      end
      # verify the required parameter 'entity_type_collection_id' is set
      if @api_client.config.client_side_validation && entity_type_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_collection_id' when calling CollectionsApi.add_type_to_entity_type_collection_template"
      end
      # verify the required parameter 'collection_template_type' is set
      if @api_client.config.client_side_validation && collection_template_type.nil?
        fail ArgumentError, "Missing the required parameter 'collection_template_type' when calling CollectionsApi.add_type_to_entity_type_collection_template"
      end
      # resource path
      local_var_path = '/datastore/collections/entity/type/{entityTypeCollectionId}/template'.sub('{' + 'entityTypeCollectionId' + '}', CGI.escape(entity_type_collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(collection_template_type) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#add_type_to_entity_type_collection_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new EntitySetCollection
    # @param entity_set_collection [EntitySetCollection] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def create_entity_set_collection(entity_set_collection, opts = {})
      data, _status_code, _headers = create_entity_set_collection_with_http_info(entity_set_collection, opts)
      data
    end

    # Creates a new EntitySetCollection
    # @param entity_set_collection [EntitySetCollection] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def create_entity_set_collection_with_http_info(entity_set_collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.create_entity_set_collection ...'
      end
      # verify the required parameter 'entity_set_collection' is set
      if @api_client.config.client_side_validation && entity_set_collection.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_collection' when calling CollectionsApi.create_entity_set_collection"
      end
      # resource path
      local_var_path = '/datastore/collections/entity/set'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(entity_set_collection) 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#create_entity_set_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new EntityTypeCollection
    # @param entity_type_collection [EntityTypeCollection] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def create_entity_type_collection(entity_type_collection, opts = {})
      data, _status_code, _headers = create_entity_type_collection_with_http_info(entity_type_collection, opts)
      data
    end

    # Creates a new EntityTypeCollection
    # @param entity_type_collection [EntityTypeCollection] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def create_entity_type_collection_with_http_info(entity_type_collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.create_entity_type_collection ...'
      end
      # verify the required parameter 'entity_type_collection' is set
      if @api_client.config.client_side_validation && entity_type_collection.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_collection' when calling CollectionsApi.create_entity_type_collection"
      end
      # resource path
      local_var_path = '/datastore/collections/entity/type'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(entity_type_collection) 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#create_entity_type_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the specified EntitySetCollection
    # @param entity_set_collection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_entity_set_collection(entity_set_collection_id, opts = {})
      delete_entity_set_collection_with_http_info(entity_set_collection_id, opts)
      nil
    end

    # Deletes the specified EntitySetCollection
    # @param entity_set_collection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_entity_set_collection_with_http_info(entity_set_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.delete_entity_set_collection ...'
      end
      # verify the required parameter 'entity_set_collection_id' is set
      if @api_client.config.client_side_validation && entity_set_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_collection_id' when calling CollectionsApi.delete_entity_set_collection"
      end
      # resource path
      local_var_path = '/datastore/collections/entity/set/{entitySetCollectionId}'.sub('{' + 'entitySetCollectionId' + '}', CGI.escape(entity_set_collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#delete_entity_set_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the specified EntityTypeCollection
    # @param entity_type_collection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_entity_type_collection(entity_type_collection_id, opts = {})
      delete_entity_type_collection_with_http_info(entity_type_collection_id, opts)
      nil
    end

    # Deletes the specified EntityTypeCollection
    # @param entity_type_collection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_entity_type_collection_with_http_info(entity_type_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.delete_entity_type_collection ...'
      end
      # verify the required parameter 'entity_type_collection_id' is set
      if @api_client.config.client_side_validation && entity_type_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_collection_id' when calling CollectionsApi.delete_entity_type_collection"
      end
      # resource path
      local_var_path = '/datastore/collections/entity/type/{entityTypeCollectionId}'.sub('{' + 'entityTypeCollectionId' + '}', CGI.escape(entity_type_collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#delete_entity_type_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all EntitySetCollection objects
    # @param [Hash] opts the optional parameters
    # @return [Array<EntitySetCollection>]
    def get_all_entity_set_collections(opts = {})
      data, _status_code, _headers = get_all_entity_set_collections_with_http_info(opts)
      data
    end

    # Returns all EntitySetCollection objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EntitySetCollection>, Integer, Hash)>] Array<EntitySetCollection> data, response status code and response headers
    def get_all_entity_set_collections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.get_all_entity_set_collections ...'
      end
      # resource path
      local_var_path = '/datastore/collections/entity/set'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<EntitySetCollection>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#get_all_entity_set_collections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all EntityTypeCollection objects
    # @param [Hash] opts the optional parameters
    # @return [Array<EntityTypeCollection>]
    def get_all_entity_type_collections(opts = {})
      data, _status_code, _headers = get_all_entity_type_collections_with_http_info(opts)
      data
    end

    # Returns all EntityTypeCollection objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EntityTypeCollection>, Integer, Hash)>] Array<EntityTypeCollection> data, response status code and response headers
    def get_all_entity_type_collections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.get_all_entity_type_collections ...'
      end
      # resource path
      local_var_path = '/datastore/collections/entity/type'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<EntityTypeCollection>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#get_all_entity_type_collections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the EntitySetCollection object for a given id
    # @param entity_set_collection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [EntitySetCollection]
    def get_entity_set_collection(entity_set_collection_id, opts = {})
      data, _status_code, _headers = get_entity_set_collection_with_http_info(entity_set_collection_id, opts)
      data
    end

    # Returns the EntitySetCollection object for a given id
    # @param entity_set_collection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntitySetCollection, Integer, Hash)>] EntitySetCollection data, response status code and response headers
    def get_entity_set_collection_with_http_info(entity_set_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.get_entity_set_collection ...'
      end
      # verify the required parameter 'entity_set_collection_id' is set
      if @api_client.config.client_side_validation && entity_set_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_collection_id' when calling CollectionsApi.get_entity_set_collection"
      end
      # resource path
      local_var_path = '/datastore/collections/entity/set/{entitySetCollectionId}'.sub('{' + 'entitySetCollectionId' + '}', CGI.escape(entity_set_collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EntitySetCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#get_entity_set_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all authorized EntitySetCollections for a given EntityTypeCollection id
    # @param entity_set_collection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<EntitySetCollection>]
    def get_entity_set_collections_of_type(entity_set_collection_id, opts = {})
      data, _status_code, _headers = get_entity_set_collections_of_type_with_http_info(entity_set_collection_id, opts)
      data
    end

    # Returns all authorized EntitySetCollections for a given EntityTypeCollection id
    # @param entity_set_collection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EntitySetCollection>, Integer, Hash)>] Array<EntitySetCollection> data, response status code and response headers
    def get_entity_set_collections_of_type_with_http_info(entity_set_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.get_entity_set_collections_of_type ...'
      end
      # verify the required parameter 'entity_set_collection_id' is set
      if @api_client.config.client_side_validation && entity_set_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_collection_id' when calling CollectionsApi.get_entity_set_collections_of_type"
      end
      # resource path
      local_var_path = '/datastore/collections/entity/set/entity/type/{entitySetCollectionId}'.sub('{' + 'entitySetCollectionId' + '}', CGI.escape(entity_set_collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<EntitySetCollection>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#get_entity_set_collections_of_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the EntityTypeCollection object for a given id
    # @param entity_type_collection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [EntityTypeCollection]
    def get_entity_type_collection(entity_type_collection_id, opts = {})
      data, _status_code, _headers = get_entity_type_collection_with_http_info(entity_type_collection_id, opts)
      data
    end

    # Returns the EntityTypeCollection object for a given id
    # @param entity_type_collection_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntityTypeCollection, Integer, Hash)>] EntityTypeCollection data, response status code and response headers
    def get_entity_type_collection_with_http_info(entity_type_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.get_entity_type_collection ...'
      end
      # verify the required parameter 'entity_type_collection_id' is set
      if @api_client.config.client_side_validation && entity_type_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_collection_id' when calling CollectionsApi.get_entity_type_collection"
      end
      # resource path
      local_var_path = '/datastore/collections/entity/type/{entityTypeCollectionId}'.sub('{' + 'entityTypeCollectionId' + '}', CGI.escape(entity_type_collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EntityTypeCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#get_entity_type_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes a key from an EntityTypeCollection template
    # @param entity_type_collection_id [String] 
    # @param type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_type_from_entity_type_collection_template(entity_type_collection_id, type_id, opts = {})
      remove_type_from_entity_type_collection_template_with_http_info(entity_type_collection_id, type_id, opts)
      nil
    end

    # Removes a key from an EntityTypeCollection template
    # @param entity_type_collection_id [String] 
    # @param type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_type_from_entity_type_collection_template_with_http_info(entity_type_collection_id, type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.remove_type_from_entity_type_collection_template ...'
      end
      # verify the required parameter 'entity_type_collection_id' is set
      if @api_client.config.client_side_validation && entity_type_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_collection_id' when calling CollectionsApi.remove_type_from_entity_type_collection_template"
      end
      # verify the required parameter 'type_id' is set
      if @api_client.config.client_side_validation && type_id.nil?
        fail ArgumentError, "Missing the required parameter 'type_id' when calling CollectionsApi.remove_type_from_entity_type_collection_template"
      end
      # resource path
      local_var_path = '/datastore/collections/entity/type/{entityTypeCollectionId}/template/{typeId}'.sub('{' + 'entityTypeCollectionId' + '}', CGI.escape(entity_type_collection_id.to_s)).sub('{' + 'typeId' + '}', CGI.escape(type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#remove_type_from_entity_type_collection_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates metadata of the specified EntitySetCollection
    # @param entity_set_collection_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_entity_set_collection_metadata(entity_set_collection_id, metadata_update, opts = {})
      update_entity_set_collection_metadata_with_http_info(entity_set_collection_id, metadata_update, opts)
      nil
    end

    # Updates metadata of the specified EntitySetCollection
    # @param entity_set_collection_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_entity_set_collection_metadata_with_http_info(entity_set_collection_id, metadata_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.update_entity_set_collection_metadata ...'
      end
      # verify the required parameter 'entity_set_collection_id' is set
      if @api_client.config.client_side_validation && entity_set_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_collection_id' when calling CollectionsApi.update_entity_set_collection_metadata"
      end
      # verify the required parameter 'metadata_update' is set
      if @api_client.config.client_side_validation && metadata_update.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_update' when calling CollectionsApi.update_entity_set_collection_metadata"
      end
      # resource path
      local_var_path = '/datastore/collections/entity/set/{entitySetCollectionId}'.sub('{' + 'entitySetCollectionId' + '}', CGI.escape(entity_set_collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(metadata_update) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#update_entity_set_collection_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates template of the specified EntitySetCollection
    # @param entity_set_collection_id [String] 
    # @param request_body [Hash<String, String>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_entity_set_collection_template(entity_set_collection_id, request_body, opts = {})
      update_entity_set_collection_template_with_http_info(entity_set_collection_id, request_body, opts)
      nil
    end

    # Updates template of the specified EntitySetCollection
    # @param entity_set_collection_id [String] 
    # @param request_body [Hash<String, String>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_entity_set_collection_template_with_http_info(entity_set_collection_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.update_entity_set_collection_template ...'
      end
      # verify the required parameter 'entity_set_collection_id' is set
      if @api_client.config.client_side_validation && entity_set_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_collection_id' when calling CollectionsApi.update_entity_set_collection_template"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling CollectionsApi.update_entity_set_collection_template"
      end
      # resource path
      local_var_path = '/datastore/collections/entity/set/{entitySetCollectionId}/template'.sub('{' + 'entitySetCollectionId' + '}', CGI.escape(entity_set_collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#update_entity_set_collection_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates metadata of the specified EntityTypeCollection
    # @param entity_type_collection_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_entity_type_collection_metadata(entity_type_collection_id, metadata_update, opts = {})
      update_entity_type_collection_metadata_with_http_info(entity_type_collection_id, metadata_update, opts)
      nil
    end

    # Updates metadata of the specified EntityTypeCollection
    # @param entity_type_collection_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_entity_type_collection_metadata_with_http_info(entity_type_collection_id, metadata_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.update_entity_type_collection_metadata ...'
      end
      # verify the required parameter 'entity_type_collection_id' is set
      if @api_client.config.client_side_validation && entity_type_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_collection_id' when calling CollectionsApi.update_entity_type_collection_metadata"
      end
      # verify the required parameter 'metadata_update' is set
      if @api_client.config.client_side_validation && metadata_update.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_update' when calling CollectionsApi.update_entity_type_collection_metadata"
      end
      # resource path
      local_var_path = '/datastore/collections/entity/type/{entityTypeCollectionId}'.sub('{' + 'entityTypeCollectionId' + '}', CGI.escape(entity_type_collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(metadata_update) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#update_entity_type_collection_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
