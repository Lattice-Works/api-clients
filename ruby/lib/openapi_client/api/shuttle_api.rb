=begin
#OpenLattice API

#OpenLattice API

The version of the OpenAPI document: 0.0.1
Contact: support@openlattice.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class ShuttleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a new integration definition for running recurring integrations
    # @param integration_name [String] 
    # @param integration [Integration] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def create_integration_definition(integration_name, integration, opts = {})
      data, _status_code, _headers = create_integration_definition_with_http_info(integration_name, integration, opts)
      data
    end

    # Creates a new integration definition for running recurring integrations
    # @param integration_name [String] 
    # @param integration [Integration] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def create_integration_definition_with_http_info(integration_name, integration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShuttleApi.create_integration_definition ...'
      end
      # verify the required parameter 'integration_name' is set
      if @api_client.config.client_side_validation && integration_name.nil?
        fail ArgumentError, "Missing the required parameter 'integration_name' when calling ShuttleApi.create_integration_definition"
      end
      # verify the required parameter 'integration' is set
      if @api_client.config.client_side_validation && integration.nil?
        fail ArgumentError, "Missing the required parameter 'integration' when calling ShuttleApi.create_integration_definition"
      end
      # resource path
      local_var_path = '/shuttle/integration/definition/{integrationName}'.sub('{' + 'integrationName' + '}', CGI.escape(integration_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(integration) 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShuttleApi#create_integration_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replaces any number of fields within an existing integration definition
    # @param integration_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_integration_definition(integration_name, opts = {})
      delete_integration_definition_with_http_info(integration_name, opts)
      nil
    end

    # Replaces any number of fields within an existing integration definition
    # @param integration_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_integration_definition_with_http_info(integration_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShuttleApi.delete_integration_definition ...'
      end
      # verify the required parameter 'integration_name' is set
      if @api_client.config.client_side_validation && integration_name.nil?
        fail ArgumentError, "Missing the required parameter 'integration_name' when calling ShuttleApi.delete_integration_definition"
      end
      # resource path
      local_var_path = '/shuttle/integration/definition/{integrationName}'.sub('{' + 'integrationName' + '}', CGI.escape(integration_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShuttleApi#delete_integration_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes an integration job status from the integrationJobs map
    # @param job_id [String] the unique id of the integration job
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_integration_job_status(job_id, opts = {})
      delete_integration_job_status_with_http_info(job_id, opts)
      nil
    end

    # Deletes an integration job status from the integrationJobs map
    # @param job_id [String] the unique id of the integration job
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_integration_job_status_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShuttleApi.delete_integration_job_status ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling ShuttleApi.delete_integration_job_status"
      end
      # resource path
      local_var_path = '/shuttle/integration/status/{jobId}'.sub('{' + 'jobId' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShuttleApi#delete_integration_job_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enqueues an integration on Shuttle Server for a given integration
    # @param integration_name [String] the name of the integration to be run
    # @param integration_key [String] the unique id used to authenticate an integration run
    # @param [Hash] opts the optional parameters
    # @return [String]
    def enqueue_integration(integration_name, integration_key, opts = {})
      data, _status_code, _headers = enqueue_integration_with_http_info(integration_name, integration_key, opts)
      data
    end

    # Enqueues an integration on Shuttle Server for a given integration
    # @param integration_name [String] the name of the integration to be run
    # @param integration_key [String] the unique id used to authenticate an integration run
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def enqueue_integration_with_http_info(integration_name, integration_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShuttleApi.enqueue_integration ...'
      end
      # verify the required parameter 'integration_name' is set
      if @api_client.config.client_side_validation && integration_name.nil?
        fail ArgumentError, "Missing the required parameter 'integration_name' when calling ShuttleApi.enqueue_integration"
      end
      # verify the required parameter 'integration_key' is set
      if @api_client.config.client_side_validation && integration_key.nil?
        fail ArgumentError, "Missing the required parameter 'integration_key' when calling ShuttleApi.enqueue_integration"
      end
      # resource path
      local_var_path = '/shuttle/integration/{integrationName}/{integrationKey}'.sub('{' + 'integrationName' + '}', CGI.escape(integration_name.to_s)).sub('{' + 'integrationKey' + '}', CGI.escape(integration_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShuttleApi#enqueue_integration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Polls the statuses of all running integrations
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, IntegrationJob>]
    def poll_all_integrations(opts = {})
      data, _status_code, _headers = poll_all_integrations_with_http_info(opts)
      data
    end

    # Polls the statuses of all running integrations
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, IntegrationJob>, Integer, Hash)>] Hash<String, IntegrationJob> data, response status code and response headers
    def poll_all_integrations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShuttleApi.poll_all_integrations ...'
      end
      # resource path
      local_var_path = '/shuttle/integration/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, IntegrationJob>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShuttleApi#poll_all_integrations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Polls the status of an integration
    # @param job_id [String] the unique id of the integration job
    # @param [Hash] opts the optional parameters
    # @return [IntegrationStatus]
    def poll_integration(job_id, opts = {})
      data, _status_code, _headers = poll_integration_with_http_info(job_id, opts)
      data
    end

    # Polls the status of an integration
    # @param job_id [String] the unique id of the integration job
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntegrationStatus, Integer, Hash)>] IntegrationStatus data, response status code and response headers
    def poll_integration_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShuttleApi.poll_integration ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling ShuttleApi.poll_integration"
      end
      # resource path
      local_var_path = '/shuttle/integration/status/{jobId}'.sub('{' + 'jobId' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'IntegrationStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShuttleApi#poll_integration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets an existing integration definition
    # @param integration_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Integration]
    def read_integration_definition(integration_name, opts = {})
      data, _status_code, _headers = read_integration_definition_with_http_info(integration_name, opts)
      data
    end

    # Gets an existing integration definition
    # @param integration_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integration, Integer, Hash)>] Integration data, response status code and response headers
    def read_integration_definition_with_http_info(integration_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShuttleApi.read_integration_definition ...'
      end
      # verify the required parameter 'integration_name' is set
      if @api_client.config.client_side_validation && integration_name.nil?
        fail ArgumentError, "Missing the required parameter 'integration_name' when calling ShuttleApi.read_integration_definition"
      end
      # resource path
      local_var_path = '/shuttle/integration/definition/{integrationName}'.sub('{' + 'integrationName' + '}', CGI.escape(integration_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Integration' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShuttleApi#read_integration_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replaces any number of fields within an existing integration definition
    # @param integration_name [String] 
    # @param integration_update [IntegrationUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_integration_definition(integration_name, integration_update, opts = {})
      update_integration_definition_with_http_info(integration_name, integration_update, opts)
      nil
    end

    # Replaces any number of fields within an existing integration definition
    # @param integration_name [String] 
    # @param integration_update [IntegrationUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_integration_definition_with_http_info(integration_name, integration_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShuttleApi.update_integration_definition ...'
      end
      # verify the required parameter 'integration_name' is set
      if @api_client.config.client_side_validation && integration_name.nil?
        fail ArgumentError, "Missing the required parameter 'integration_name' when calling ShuttleApi.update_integration_definition"
      end
      # verify the required parameter 'integration_update' is set
      if @api_client.config.client_side_validation && integration_update.nil?
        fail ArgumentError, "Missing the required parameter 'integration_update' when calling ShuttleApi.update_integration_definition"
      end
      # resource path
      local_var_path = '/shuttle/integration/definition/{integrationName}'.sub('{' + 'integrationName' + '}', CGI.escape(integration_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(integration_update) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShuttleApi#update_integration_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
