=begin
#OpenLattice API

#OpenLattice API

The version of the OpenAPI document: 0.0.1
Contact: support@openlattice.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class LinkingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Submits feedbacks for a given linking entity set and linking id in a batch format.
    # @param linking_feedback [LinkingFeedback] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def add_linking_feedback(linking_feedback, opts = {})
      data, _status_code, _headers = add_linking_feedback_with_http_info(linking_feedback, opts)
      data
    end

    # Submits feedbacks for a given linking entity set and linking id in a batch format.
    # @param linking_feedback [LinkingFeedback] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def add_linking_feedback_with_http_info(linking_feedback, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinkingApi.add_linking_feedback ...'
      end
      # verify the required parameter 'linking_feedback' is set
      if @api_client.config.client_side_validation && linking_feedback.nil?
        fail ArgumentError, "Missing the required parameter 'linking_feedback' when calling LinkingApi.add_linking_feedback"
      end
      # resource path
      local_var_path = '/linker/linkingfeedback'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(linking_feedback) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinkingApi#add_linking_feedback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes linking feedback
    # @param entity_key_pair [EntityKeyPair] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def delete_linking_feedback(entity_key_pair, opts = {})
      data, _status_code, _headers = delete_linking_feedback_with_http_info(entity_key_pair, opts)
      data
    end

    # Deletes linking feedback
    # @param entity_key_pair [EntityKeyPair] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def delete_linking_feedback_with_http_info(entity_key_pair, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinkingApi.delete_linking_feedback ...'
      end
      # verify the required parameter 'entity_key_pair' is set
      if @api_client.config.client_side_validation && entity_key_pair.nil?
        fail ArgumentError, "Missing the required parameter 'entity_key_pair' when calling LinkingApi.delete_linking_feedback"
      end
      # resource path
      local_var_path = '/linker/linkingfeedback'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(entity_key_pair) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinkingApi#delete_linking_feedback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all feedback submitted
    # @param [Hash] opts the optional parameters
    # @return [Array<EntityLinkingFeedback>]
    def get_all_linking_feedback(opts = {})
      data, _status_code, _headers = get_all_linking_feedback_with_http_info(opts)
      data
    end

    # Returns all feedback submitted
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EntityLinkingFeedback>, Integer, Hash)>] Array<EntityLinkingFeedback> data, response status code and response headers
    def get_all_linking_feedback_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinkingApi.get_all_linking_feedback ...'
      end
      # resource path
      local_var_path = '/linker/linkingfeedback/all'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<EntityLinkingFeedback>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinkingApi#get_all_linking_feedback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all feedback submitted walong with the features of pairwise entities
    # @param [Hash] opts the optional parameters
    # @return [Array<EntityLinkingFeatures>]
    def get_all_linking_feedback_with_features(opts = {})
      data, _status_code, _headers = get_all_linking_feedback_with_features_with_http_info(opts)
      data
    end

    # Returns all feedback submitted walong with the features of pairwise entities
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EntityLinkingFeatures>, Integer, Hash)>] Array<EntityLinkingFeatures> data, response status code and response headers
    def get_all_linking_feedback_with_features_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinkingApi.get_all_linking_feedback_with_features ...'
      end
      # resource path
      local_var_path = '/linker/linkingfeedback/features/all'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<EntityLinkingFeatures>' 

      # auth_names
      auth_names = opts[:auth_names] || ['openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinkingApi#get_all_linking_feedback_with_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the feedback on the given entity pair along with their features
    # @param entity_key_pair [EntityKeyPair] 
    # @param [Hash] opts the optional parameters
    # @return [EntityLinkingFeatures]
    def get_linking_feedback_with_features(entity_key_pair, opts = {})
      data, _status_code, _headers = get_linking_feedback_with_features_with_http_info(entity_key_pair, opts)
      data
    end

    # Returns the feedback on the given entity pair along with their features
    # @param entity_key_pair [EntityKeyPair] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntityLinkingFeatures, Integer, Hash)>] EntityLinkingFeatures data, response status code and response headers
    def get_linking_feedback_with_features_with_http_info(entity_key_pair, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinkingApi.get_linking_feedback_with_features ...'
      end
      # verify the required parameter 'entity_key_pair' is set
      if @api_client.config.client_side_validation && entity_key_pair.nil?
        fail ArgumentError, "Missing the required parameter 'entity_key_pair' when calling LinkingApi.get_linking_feedback_with_features"
      end
      # resource path
      local_var_path = '/linker/linkingfeedback/features'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(entity_key_pair) 

      # return_type
      return_type = opts[:return_type] || 'EntityLinkingFeatures' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinkingApi#get_linking_feedback_with_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns positive/negative/all linking feedbacks on the given entity.
    # @param feedback_type [String] 
    # @param entity_data_key [EntityDataKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<EntityLinkingFeedback>]
    def get_linking_feedbacks_on_entity(feedback_type, entity_data_key, opts = {})
      data, _status_code, _headers = get_linking_feedbacks_on_entity_with_http_info(feedback_type, entity_data_key, opts)
      data
    end

    # Returns positive/negative/all linking feedbacks on the given entity.
    # @param feedback_type [String] 
    # @param entity_data_key [EntityDataKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EntityLinkingFeedback>, Integer, Hash)>] Array<EntityLinkingFeedback> data, response status code and response headers
    def get_linking_feedbacks_on_entity_with_http_info(feedback_type, entity_data_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinkingApi.get_linking_feedbacks_on_entity ...'
      end
      # verify the required parameter 'feedback_type' is set
      if @api_client.config.client_side_validation && feedback_type.nil?
        fail ArgumentError, "Missing the required parameter 'feedback_type' when calling LinkingApi.get_linking_feedbacks_on_entity"
      end
      # verify enum value
      allowable_values = ["Positive", "Negative", "All"]
      if @api_client.config.client_side_validation && !allowable_values.include?(feedback_type)
        fail ArgumentError, "invalid value for \"feedback_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'entity_data_key' is set
      if @api_client.config.client_side_validation && entity_data_key.nil?
        fail ArgumentError, "Missing the required parameter 'entity_data_key' when calling LinkingApi.get_linking_feedbacks_on_entity"
      end
      # resource path
      local_var_path = '/linker/linkingfeedback/entity'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'feedbackType'] = feedback_type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(entity_data_key) 

      # return_type
      return_type = opts[:return_type] || 'Array<EntityLinkingFeedback>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinkingApi#get_linking_feedbacks_on_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
