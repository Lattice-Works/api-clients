=begin
#OpenLattice API

#OpenLattice API

The version of the OpenAPI document: 0.0.1
Contact: support@openlattice.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class AuthorizationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Check authorizations
    # @param access_check [AccessCheck] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Authorization>]
    def check_authorizations(access_check, opts = {})
      data, _status_code, _headers = check_authorizations_with_http_info(access_check, opts)
      data
    end

    # Check authorizations
    # @param access_check [AccessCheck] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Authorization>, Integer, Hash)>] Array<Authorization> data, response status code and response headers
    def check_authorizations_with_http_info(access_check, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthorizationsApi.check_authorizations ...'
      end
      # verify the required parameter 'access_check' is set
      if @api_client.config.client_side_validation && access_check.nil?
        fail ArgumentError, "Missing the required parameter 'access_check' when calling AuthorizationsApi.check_authorizations"
      end
      # resource path
      local_var_path = '/datastore/authorizations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(access_check) 

      # return_type
      return_type = opts[:return_type] || 'Array<Authorization>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthorizationsApi#check_authorizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns paged results for all authorized objects of specified objectType, that the current user has specified permission for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :object_type 
    # @option opts [String] :permission 
    # @option opts [String] :paging_token 
    # @return [AuthorizedObjectsSearchResult]
    def get_accessible_objects(opts = {})
      data, _status_code, _headers = get_accessible_objects_with_http_info(opts)
      data
    end

    # Returns paged results for all authorized objects of specified objectType, that the current user has specified permission for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :object_type 
    # @option opts [String] :permission 
    # @option opts [String] :paging_token 
    # @return [Array<(AuthorizedObjectsSearchResult, Integer, Hash)>] AuthorizedObjectsSearchResult data, response status code and response headers
    def get_accessible_objects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthorizationsApi.get_accessible_objects ...'
      end
      allowable_values = ["EntityType", "EntitySet", "PropertyTypeInEntitySet", "Datasource", "ComplexType", "LinkingEntityType", "AssociationType", "Organization", "App", "AppType", "Principal", "Role", "UnknownEdmTemplate"]
      if @api_client.config.client_side_validation && opts[:'object_type'] && !allowable_values.include?(opts[:'object_type'])
        fail ArgumentError, "invalid value for \"object_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["DISCOVER", "MATERIALIZE", "LINK", "READ", "WRITE", "OWNER"]
      if @api_client.config.client_side_validation && opts[:'permission'] && !allowable_values.include?(opts[:'permission'])
        fail ArgumentError, "invalid value for \"permission\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/datastore/authorizations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'objectType'] = opts[:'object_type'] if !opts[:'object_type'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'pagingToken'] = opts[:'paging_token'] if !opts[:'paging_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AuthorizedObjectsSearchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthorizationsApi#get_accessible_objects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
