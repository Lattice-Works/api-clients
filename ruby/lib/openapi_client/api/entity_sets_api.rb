=begin
#OpenLattice API

#OpenLattice API

The version of the OpenAPI document: 0.0.1
Contact: support@openlattice.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class EntitySetsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds the entity sets as linked entity sets to the linking entity set
    # @param linking_entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Integer]
    def add_entity_sets_to_linking_entity_set(linking_entity_set_id, opts = {})
      data, _status_code, _headers = add_entity_sets_to_linking_entity_set_with_http_info(linking_entity_set_id, opts)
      data
    end

    # Adds the entity sets as linked entity sets to the linking entity set
    # @param linking_entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def add_entity_sets_to_linking_entity_set_with_http_info(linking_entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.add_entity_sets_to_linking_entity_set ...'
      end
      # verify the required parameter 'linking_entity_set_id' is set
      if @api_client.config.client_side_validation && linking_entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'linking_entity_set_id' when calling EntitySetsApi.add_entity_sets_to_linking_entity_set"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/linking/{linkingEntitySetId}'.sub('{' + 'linkingEntitySetId' + '}', CGI.escape(linking_entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'request_body']) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#add_entity_sets_to_linking_entity_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds the entity sets as linked entity sets to the linking entity sets
    # @param linking_entity_set_id [String] 
    # @param request_body [Hash<String, Array<String>>] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def add_entity_sets_to_linking_entity_sets(linking_entity_set_id, request_body, opts = {})
      data, _status_code, _headers = add_entity_sets_to_linking_entity_sets_with_http_info(linking_entity_set_id, request_body, opts)
      data
    end

    # Adds the entity sets as linked entity sets to the linking entity sets
    # @param linking_entity_set_id [String] 
    # @param request_body [Hash<String, Array<String>>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def add_entity_sets_to_linking_entity_sets_with_http_info(linking_entity_set_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.add_entity_sets_to_linking_entity_sets ...'
      end
      # verify the required parameter 'linking_entity_set_id' is set
      if @api_client.config.client_side_validation && linking_entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'linking_entity_set_id' when calling EntitySetsApi.add_entity_sets_to_linking_entity_sets"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling EntitySetsApi.add_entity_sets_to_linking_entity_sets"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/linking/'.sub('{' + 'linkingEntitySetId' + '}', CGI.escape(linking_entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#add_entity_sets_to_linking_entity_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates new EntitySet definitions if they don't exist.
    # @param entity_set [Array<EntitySet>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_entity_sets(entity_set, opts = {})
      create_entity_sets_with_http_info(entity_set, opts)
      nil
    end

    # Creates new EntitySet definitions if they don&#39;t exist.
    # @param entity_set [Array<EntitySet>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_entity_sets_with_http_info(entity_set, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.create_entity_sets ...'
      end
      # verify the required parameter 'entity_set' is set
      if @api_client.config.client_side_validation && entity_set.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set' when calling EntitySetsApi.create_entity_sets"
      end
      # resource path
      local_var_path = '/datastore/entity-sets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(entity_set) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#create_entity_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the EntitySet definition for the given EntitySet UUID.
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_entity_set(entity_set_id, opts = {})
      delete_entity_set_with_http_info(entity_set_id, opts)
      nil
    end

    # Deletes the EntitySet definition for the given EntitySet UUID.
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_entity_set_with_http_info(entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.delete_entity_set ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling EntitySetsApi.delete_entity_set"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/{entitySetId}'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#delete_entity_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all entity set property metadata.
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, EntitySetPropertyMetaData>]
    def get_all_entity_set_property_metadata(entity_set_id, opts = {})
      data, _status_code, _headers = get_all_entity_set_property_metadata_with_http_info(entity_set_id, opts)
      data
    end

    # Get all entity set property metadata.
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, EntitySetPropertyMetaData>, Integer, Hash)>] Hash<String, EntitySetPropertyMetaData> data, response status code and response headers
    def get_all_entity_set_property_metadata_with_http_info(entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.get_all_entity_set_property_metadata ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling EntitySetsApi.get_all_entity_set_property_metadata"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/{entitySetId}/metadata'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, EntitySetPropertyMetaData>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#get_all_entity_set_property_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all EntitySet definitions.
    # @param [Hash] opts the optional parameters
    # @return [Array<EntitySet>]
    def get_all_entity_sets(opts = {})
      data, _status_code, _headers = get_all_entity_sets_with_http_info(opts)
      data
    end

    # Get all EntitySet definitions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EntitySet>, Integer, Hash)>] Array<EntitySet> data, response status code and response headers
    def get_all_entity_sets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.get_all_entity_sets ...'
      end
      # resource path
      local_var_path = '/datastore/entity-sets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<EntitySet>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#get_all_entity_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the EntitySet definition for the given EntitySet UUID.
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [EntitySet]
    def get_entity_set(entity_set_id, opts = {})
      data, _status_code, _headers = get_entity_set_with_http_info(entity_set_id, opts)
      data
    end

    # Get the EntitySet definition for the given EntitySet UUID.
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntitySet, Integer, Hash)>] EntitySet data, response status code and response headers
    def get_entity_set_with_http_info(entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.get_entity_set ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling EntitySetsApi.get_entity_set"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/{entitySetId}'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EntitySet' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#get_entity_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the EntitySet UUID for the given EntitySet name.
    # @param entity_set_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_entity_set_id(entity_set_name, opts = {})
      data, _status_code, _headers = get_entity_set_id_with_http_info(entity_set_name, opts)
      data
    end

    # Gets the EntitySet UUID for the given EntitySet name.
    # @param entity_set_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_entity_set_id_with_http_info(entity_set_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.get_entity_set_id ...'
      end
      # verify the required parameter 'entity_set_name' is set
      if @api_client.config.client_side_validation && entity_set_name.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_name' when calling EntitySetsApi.get_entity_set_id"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/ids/{entitySetName}'.sub('{' + 'entitySetName' + '}', CGI.escape(entity_set_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#get_entity_set_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IDs for entity sets given their names.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Hash<String, String>]
    def get_entity_set_ids(opts = {})
      data, _status_code, _headers = get_entity_set_ids_with_http_info(opts)
      data
    end

    # Get IDs for entity sets given their names.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Array<(Hash<String, String>, Integer, Hash)>] Hash<String, String> data, response status code and response headers
    def get_entity_set_ids_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.get_entity_set_ids ...'
      end
      # resource path
      local_var_path = '/datastore/entity-sets/ids/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'request_body']) 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, String>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#get_entity_set_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get specified property type metadata for an entity set.
    # @param entity_set_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [EntitySetPropertyMetaData]
    def get_entity_set_property_metadata(entity_set_id, property_type_id, opts = {})
      data, _status_code, _headers = get_entity_set_property_metadata_with_http_info(entity_set_id, property_type_id, opts)
      data
    end

    # Get specified property type metadata for an entity set.
    # @param entity_set_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntitySetPropertyMetaData, Integer, Hash)>] EntitySetPropertyMetaData data, response status code and response headers
    def get_entity_set_property_metadata_with_http_info(entity_set_id, property_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.get_entity_set_property_metadata ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling EntitySetsApi.get_entity_set_property_metadata"
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EntitySetsApi.get_entity_set_property_metadata"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s)).sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EntitySetPropertyMetaData' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#get_entity_set_property_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get property metadata for entity sets.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Hash<String, Hash<String, EntitySetPropertyMetaData>>]
    def get_property_metadata_for_entity_sets(opts = {})
      data, _status_code, _headers = get_property_metadata_for_entity_sets_with_http_info(opts)
      data
    end

    # Get property metadata for entity sets.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Array<(Hash<String, Hash<String, EntitySetPropertyMetaData>>, Integer, Hash)>] Hash<String, Hash<String, EntitySetPropertyMetaData>> data, response status code and response headers
    def get_property_metadata_for_entity_sets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.get_property_metadata_for_entity_sets ...'
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/metadata'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'request_body']) 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Hash<String, EntitySetPropertyMetaData>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#get_property_metadata_for_entity_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Property Types for entity set
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, PropertyType>]
    def get_property_types_for_entity_set(entity_set_id, opts = {})
      data, _status_code, _headers = get_property_types_for_entity_set_with_http_info(entity_set_id, opts)
      data
    end

    # Get all Property Types for entity set
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, PropertyType>, Integer, Hash)>] Hash<String, PropertyType> data, response status code and response headers
    def get_property_types_for_entity_set_with_http_info(entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.get_property_types_for_entity_set ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling EntitySetsApi.get_property_types_for_entity_set"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/{entitySetId}/properties'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, PropertyType>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#get_property_types_for_entity_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes/unlinks the linked entity sets from the linking entity set
    # @param linking_entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Integer]
    def remove_entity_sets_from_linking_entity_set(linking_entity_set_id, opts = {})
      data, _status_code, _headers = remove_entity_sets_from_linking_entity_set_with_http_info(linking_entity_set_id, opts)
      data
    end

    # Removes/unlinks the linked entity sets from the linking entity set
    # @param linking_entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def remove_entity_sets_from_linking_entity_set_with_http_info(linking_entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.remove_entity_sets_from_linking_entity_set ...'
      end
      # verify the required parameter 'linking_entity_set_id' is set
      if @api_client.config.client_side_validation && linking_entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'linking_entity_set_id' when calling EntitySetsApi.remove_entity_sets_from_linking_entity_set"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/linking/{linkingEntitySetId}'.sub('{' + 'linkingEntitySetId' + '}', CGI.escape(linking_entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'request_body']) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#remove_entity_sets_from_linking_entity_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes/unlinks the linked entity sets from the linking entity set
    # @param linking_entity_set_id [String] 
    # @param request_body [Hash<String, Array<String>>] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def remove_entity_sets_from_linking_entity_sets(linking_entity_set_id, request_body, opts = {})
      data, _status_code, _headers = remove_entity_sets_from_linking_entity_sets_with_http_info(linking_entity_set_id, request_body, opts)
      data
    end

    # Removes/unlinks the linked entity sets from the linking entity set
    # @param linking_entity_set_id [String] 
    # @param request_body [Hash<String, Array<String>>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def remove_entity_sets_from_linking_entity_sets_with_http_info(linking_entity_set_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.remove_entity_sets_from_linking_entity_sets ...'
      end
      # verify the required parameter 'linking_entity_set_id' is set
      if @api_client.config.client_side_validation && linking_entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'linking_entity_set_id' when calling EntitySetsApi.remove_entity_sets_from_linking_entity_sets"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling EntitySetsApi.remove_entity_sets_from_linking_entity_sets"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/linking/'.sub('{' + 'linkingEntitySetId' + '}', CGI.escape(linking_entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#remove_entity_sets_from_linking_entity_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used to repartition an entity set. This will shuffle corresponding ids, edges, and data table rows for the entity set.
    # @param entity_set_id [String] 
    # @param request_body [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def repartition_entity_set(entity_set_id, request_body, opts = {})
      repartition_entity_set_with_http_info(entity_set_id, request_body, opts)
      nil
    end

    # Used to repartition an entity set. This will shuffle corresponding ids, edges, and data table rows for the entity set.
    # @param entity_set_id [String] 
    # @param request_body [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repartition_entity_set_with_http_info(entity_set_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.repartition_entity_set ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling EntitySetsApi.repartition_entity_set"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling EntitySetsApi.repartition_entity_set"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/{entitySetId}/partitions'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#repartition_entity_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the EntitySet definition for the given EntitySet UUID with the given metadata.
    # @param entity_set_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def update_entity_set_meta_data(entity_set_id, metadata_update, opts = {})
      data, _status_code, _headers = update_entity_set_meta_data_with_http_info(entity_set_id, metadata_update, opts)
      data
    end

    # Updates the EntitySet definition for the given EntitySet UUID with the given metadata.
    # @param entity_set_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def update_entity_set_meta_data_with_http_info(entity_set_id, metadata_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.update_entity_set_meta_data ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling EntitySetsApi.update_entity_set_meta_data"
      end
      # verify the required parameter 'metadata_update' is set
      if @api_client.config.client_side_validation && metadata_update.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_update' when calling EntitySetsApi.update_entity_set_meta_data"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/{entitySetId}/metadata/'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(metadata_update) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#update_entity_set_meta_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the property type metadata for the given entity set.
    # @param entity_set_id [String] 
    # @param property_type_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_entity_set_property_metadata(entity_set_id, property_type_id, metadata_update, opts = {})
      update_entity_set_property_metadata_with_http_info(entity_set_id, property_type_id, metadata_update, opts)
      nil
    end

    # Updates the property type metadata for the given entity set.
    # @param entity_set_id [String] 
    # @param property_type_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_entity_set_property_metadata_with_http_info(entity_set_id, property_type_id, metadata_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySetsApi.update_entity_set_property_metadata ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling EntitySetsApi.update_entity_set_property_metadata"
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EntitySetsApi.update_entity_set_property_metadata"
      end
      # verify the required parameter 'metadata_update' is set
      if @api_client.config.client_side_validation && metadata_update.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_update' when calling EntitySetsApi.update_entity_set_property_metadata"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s)).sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(metadata_update) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySetsApi#update_entity_set_property_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
