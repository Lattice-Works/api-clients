=begin
#OpenLattice API

#OpenLattice API

The version of the OpenAPI document: 0.0.1
Contact: support@openlattice.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class SearchApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Executes a search over the data of a given entity set to find rows that match the search term
    # @param entity_set_id [String] 
    # @param advanced_search [AdvancedSearch] 
    # @param [Hash] opts the optional parameters
    # @return [DataSearchResult]
    def execute_advanced_entity_set_data_query(entity_set_id, advanced_search, opts = {})
      data, _status_code, _headers = execute_advanced_entity_set_data_query_with_http_info(entity_set_id, advanced_search, opts)
      data
    end

    # Executes a search over the data of a given entity set to find rows that match the search term
    # @param entity_set_id [String] 
    # @param advanced_search [AdvancedSearch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataSearchResult, Integer, Hash)>] DataSearchResult data, response status code and response headers
    def execute_advanced_entity_set_data_query_with_http_info(entity_set_id, advanced_search, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_advanced_entity_set_data_query ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling SearchApi.execute_advanced_entity_set_data_query"
      end
      # verify the required parameter 'advanced_search' is set
      if @api_client.config.client_side_validation && advanced_search.nil?
        fail ArgumentError, "Missing the required parameter 'advanced_search' when calling SearchApi.execute_advanced_entity_set_data_query"
      end
      # resource path
      local_var_path = '/datastore/search/advanced/{entitySetId}'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(advanced_search) 

      # return_type
      return_type = opts[:return_type] || 'DataSearchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_advanced_entity_set_data_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search over all apps to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [SearchResult]
    def execute_app_search(search_term, opts = {})
      data, _status_code, _headers = execute_app_search_with_http_info(search_term, opts)
      data
    end

    # Executes a search over all apps to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchResult, Integer, Hash)>] SearchResult data, response status code and response headers
    def execute_app_search_with_http_info(search_term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_app_search ...'
      end
      # verify the required parameter 'search_term' is set
      if @api_client.config.client_side_validation && search_term.nil?
        fail ArgumentError, "Missing the required parameter 'search_term' when calling SearchApi.execute_app_search"
      end
      # resource path
      local_var_path = '/datastore/search/app'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(search_term) 

      # return_type
      return_type = opts[:return_type] || 'SearchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_app_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search over all app types to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [SearchResult]
    def execute_app_type_search(search_term, opts = {})
      data, _status_code, _headers = execute_app_type_search_with_http_info(search_term, opts)
      data
    end

    # Executes a search over all app types to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchResult, Integer, Hash)>] SearchResult data, response status code and response headers
    def execute_app_type_search_with_http_info(search_term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_app_type_search ...'
      end
      # verify the required parameter 'search_term' is set
      if @api_client.config.client_side_validation && search_term.nil?
        fail ArgumentError, "Missing the required parameter 'search_term' when calling SearchApi.execute_app_type_search"
      end
      # resource path
      local_var_path = '/datastore/search/app_types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(search_term) 

      # return_type
      return_type = opts[:return_type] || 'SearchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_app_type_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search over all association types to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [SearchResult]
    def execute_association_type_search(search_term, opts = {})
      data, _status_code, _headers = execute_association_type_search_with_http_info(search_term, opts)
      data
    end

    # Executes a search over all association types to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchResult, Integer, Hash)>] SearchResult data, response status code and response headers
    def execute_association_type_search_with_http_info(search_term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_association_type_search ...'
      end
      # verify the required parameter 'search_term' is set
      if @api_client.config.client_side_validation && search_term.nil?
        fail ArgumentError, "Missing the required parameter 'search_term' when calling SearchApi.execute_association_type_search"
      end
      # resource path
      local_var_path = '/datastore/search/association_types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(search_term) 

      # return_type
      return_type = opts[:return_type] || 'SearchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_association_type_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search for all neighbors of an entity that are connected by an association
    # @param entity_set_id [String] 
    # @param entity_key_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<NeighborEntityDetails>]
    def execute_entity_neighbor_search(entity_set_id, entity_key_id, opts = {})
      data, _status_code, _headers = execute_entity_neighbor_search_with_http_info(entity_set_id, entity_key_id, opts)
      data
    end

    # Executes a search for all neighbors of an entity that are connected by an association
    # @param entity_set_id [String] 
    # @param entity_key_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<NeighborEntityDetails>, Integer, Hash)>] Array<NeighborEntityDetails> data, response status code and response headers
    def execute_entity_neighbor_search_with_http_info(entity_set_id, entity_key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_entity_neighbor_search ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling SearchApi.execute_entity_neighbor_search"
      end
      # verify the required parameter 'entity_key_id' is set
      if @api_client.config.client_side_validation && entity_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_key_id' when calling SearchApi.execute_entity_neighbor_search"
      end
      # resource path
      local_var_path = '/datastore/search/{entitySetId}/{entityKeyId}'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s)).sub('{' + 'entityKeyId' + '}', CGI.escape(entity_key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<NeighborEntityDetails>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_entity_neighbor_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association
    # @param entity_set_id [String] 
    # @param request_body [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Array<NeighborEntityDetails>>]
    def execute_entity_neighbor_search_bulk(entity_set_id, request_body, opts = {})
      data, _status_code, _headers = execute_entity_neighbor_search_bulk_with_http_info(entity_set_id, request_body, opts)
      data
    end

    # Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association
    # @param entity_set_id [String] 
    # @param request_body [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Array<NeighborEntityDetails>>, Integer, Hash)>] Hash<String, Array<NeighborEntityDetails>> data, response status code and response headers
    def execute_entity_neighbor_search_bulk_with_http_info(entity_set_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_entity_neighbor_search_bulk ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling SearchApi.execute_entity_neighbor_search_bulk"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling SearchApi.execute_entity_neighbor_search_bulk"
      end
      # resource path
      local_var_path = '/datastore/search/{entitySetId}/neighbors'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Array<NeighborEntityDetails>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_entity_neighbor_search_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search over all EntitySetCollections to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [SearchResult]
    def execute_entity_set_collection_search(search_term, opts = {})
      data, _status_code, _headers = execute_entity_set_collection_search_with_http_info(search_term, opts)
      data
    end

    # Executes a search over all EntitySetCollections to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchResult, Integer, Hash)>] SearchResult data, response status code and response headers
    def execute_entity_set_collection_search_with_http_info(search_term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_entity_set_collection_search ...'
      end
      # verify the required parameter 'search_term' is set
      if @api_client.config.client_side_validation && search_term.nil?
        fail ArgumentError, "Missing the required parameter 'search_term' when calling SearchApi.execute_entity_set_collection_search"
      end
      # resource path
      local_var_path = '/datastore/search/entity_sets/collections'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(search_term) 

      # return_type
      return_type = opts[:return_type] || 'SearchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_entity_set_collection_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search over the data of a given entity set to find rows that match the search term
    # @param entity_set_id [String] 
    # @param search_term [SearchTerm] A JSON object that contains three parameters, \&quot;start\&quot;, which specifies the hit number to start returning results on for paging, \&quot;maxHits\&quot;, which specifies the maximum number of hits to return, and \&quot;searchTerm\&quot;, which is the search term results will match on.
    # @param [Hash] opts the optional parameters
    # @return [DataSearchResult]
    def execute_entity_set_data_query(entity_set_id, search_term, opts = {})
      data, _status_code, _headers = execute_entity_set_data_query_with_http_info(entity_set_id, search_term, opts)
      data
    end

    # Executes a search over the data of a given entity set to find rows that match the search term
    # @param entity_set_id [String] 
    # @param search_term [SearchTerm] A JSON object that contains three parameters, \&quot;start\&quot;, which specifies the hit number to start returning results on for paging, \&quot;maxHits\&quot;, which specifies the maximum number of hits to return, and \&quot;searchTerm\&quot;, which is the search term results will match on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataSearchResult, Integer, Hash)>] DataSearchResult data, response status code and response headers
    def execute_entity_set_data_query_with_http_info(entity_set_id, search_term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_entity_set_data_query ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling SearchApi.execute_entity_set_data_query"
      end
      # verify the required parameter 'search_term' is set
      if @api_client.config.client_side_validation && search_term.nil?
        fail ArgumentError, "Missing the required parameter 'search_term' when calling SearchApi.execute_entity_set_data_query"
      end
      # resource path
      local_var_path = '/datastore/search/{entitySetId}'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(search_term) 

      # return_type
      return_type = opts[:return_type] || 'DataSearchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_entity_set_data_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The query, entityType, and propertyTypes params are all optional, but at least one must be specified otherwise an error will be thrown. All specified params are required to be present in each entity set returned. If entityType and propertyTypes are both specified, the propertyTypes param will be ignored.
    # @param search [Search] 
    # @param [Hash] opts the optional parameters
    # @return [SearchResult]
    def execute_entity_set_keyword_query(search, opts = {})
      data, _status_code, _headers = execute_entity_set_keyword_query_with_http_info(search, opts)
      data
    end

    # The query, entityType, and propertyTypes params are all optional, but at least one must be specified otherwise an error will be thrown. All specified params are required to be present in each entity set returned. If entityType and propertyTypes are both specified, the propertyTypes param will be ignored.
    # @param search [Search] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchResult, Integer, Hash)>] SearchResult data, response status code and response headers
    def execute_entity_set_keyword_query_with_http_info(search, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_entity_set_keyword_query ...'
      end
      # verify the required parameter 'search' is set
      if @api_client.config.client_side_validation && search.nil?
        fail ArgumentError, "Missing the required parameter 'search' when calling SearchApi.execute_entity_set_keyword_query"
      end
      # resource path
      local_var_path = '/datastore/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(search) 

      # return_type
      return_type = opts[:return_type] || 'SearchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_entity_set_keyword_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search over all EntityTypeCollections to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [SearchResult]
    def execute_entity_type_collection_search(search_term, opts = {})
      data, _status_code, _headers = execute_entity_type_collection_search_with_http_info(search_term, opts)
      data
    end

    # Executes a search over all EntityTypeCollections to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchResult, Integer, Hash)>] SearchResult data, response status code and response headers
    def execute_entity_type_collection_search_with_http_info(search_term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_entity_type_collection_search ...'
      end
      # verify the required parameter 'search_term' is set
      if @api_client.config.client_side_validation && search_term.nil?
        fail ArgumentError, "Missing the required parameter 'search_term' when calling SearchApi.execute_entity_type_collection_search"
      end
      # resource path
      local_var_path = '/datastore/search/entity_types/collections'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(search_term) 

      # return_type
      return_type = opts[:return_type] || 'SearchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_entity_type_collection_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search over all entity types to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [SearchResult]
    def execute_entity_type_search(search_term, opts = {})
      data, _status_code, _headers = execute_entity_type_search_with_http_info(search_term, opts)
      data
    end

    # Executes a search over all entity types to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchResult, Integer, Hash)>] SearchResult data, response status code and response headers
    def execute_entity_type_search_with_http_info(search_term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_entity_type_search ...'
      end
      # verify the required parameter 'search_term' is set
      if @api_client.config.client_side_validation && search_term.nil?
        fail ArgumentError, "Missing the required parameter 'search_term' when calling SearchApi.execute_entity_type_search"
      end
      # resource path
      local_var_path = '/datastore/search/entity_types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(search_term) 

      # return_type
      return_type = opts[:return_type] || 'SearchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_entity_type_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association and returns a simple version of the neighborDetails
    # @param entity_set_id [String] 
    # @param neighbor_search_filter [NeighborSearchFilter] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Hash<String, Hash<String, Array<NeighborEntityIds>>>>]
    def execute_filtered_entity_neighbor_id_search(entity_set_id, neighbor_search_filter, opts = {})
      data, _status_code, _headers = execute_filtered_entity_neighbor_id_search_with_http_info(entity_set_id, neighbor_search_filter, opts)
      data
    end

    # Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association and returns a simple version of the neighborDetails
    # @param entity_set_id [String] 
    # @param neighbor_search_filter [NeighborSearchFilter] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Hash<String, Hash<String, Array<NeighborEntityIds>>>>, Integer, Hash)>] Hash<String, Hash<String, Hash<String, Array<NeighborEntityIds>>>> data, response status code and response headers
    def execute_filtered_entity_neighbor_id_search_with_http_info(entity_set_id, neighbor_search_filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_filtered_entity_neighbor_id_search ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling SearchApi.execute_filtered_entity_neighbor_id_search"
      end
      # verify the required parameter 'neighbor_search_filter' is set
      if @api_client.config.client_side_validation && neighbor_search_filter.nil?
        fail ArgumentError, "Missing the required parameter 'neighbor_search_filter' when calling SearchApi.execute_filtered_entity_neighbor_id_search"
      end
      # resource path
      local_var_path = '/datastore/search/{entitySetId}/neighbors/advanced/ids'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(neighbor_search_filter) 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Hash<String, Hash<String, Array<NeighborEntityIds>>>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_filtered_entity_neighbor_id_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association
    # @param entity_set_id [String] 
    # @param neighbor_search_filter [NeighborSearchFilter] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Array<NeighborEntityDetails>>]
    def execute_filtered_entity_neighbor_search(entity_set_id, neighbor_search_filter, opts = {})
      data, _status_code, _headers = execute_filtered_entity_neighbor_search_with_http_info(entity_set_id, neighbor_search_filter, opts)
      data
    end

    # Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association
    # @param entity_set_id [String] 
    # @param neighbor_search_filter [NeighborSearchFilter] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Array<NeighborEntityDetails>>, Integer, Hash)>] Hash<String, Array<NeighborEntityDetails>> data, response status code and response headers
    def execute_filtered_entity_neighbor_search_with_http_info(entity_set_id, neighbor_search_filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_filtered_entity_neighbor_search ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling SearchApi.execute_filtered_entity_neighbor_search"
      end
      # verify the required parameter 'neighbor_search_filter' is set
      if @api_client.config.client_side_validation && neighbor_search_filter.nil?
        fail ArgumentError, "Missing the required parameter 'neighbor_search_filter' when calling SearchApi.execute_filtered_entity_neighbor_search"
      end
      # resource path
      local_var_path = '/datastore/search/{entitySetId}/neighbors/advanced'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(neighbor_search_filter) 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Array<NeighborEntityDetails>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_filtered_entity_neighbor_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search over all property types to find ones that match the given name and namespace, including partial matches
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [SearchResult]
    def execute_fqn_property_type_search(search_term, opts = {})
      data, _status_code, _headers = execute_fqn_property_type_search_with_http_info(search_term, opts)
      data
    end

    # Executes a search over all property types to find ones that match the given name and namespace, including partial matches
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchResult, Integer, Hash)>] SearchResult data, response status code and response headers
    def execute_fqn_property_type_search_with_http_info(search_term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_fqn_property_type_search ...'
      end
      # verify the required parameter 'search_term' is set
      if @api_client.config.client_side_validation && search_term.nil?
        fail ArgumentError, "Missing the required parameter 'search_term' when calling SearchApi.execute_fqn_property_type_search"
      end
      # resource path
      local_var_path = '/datastore/search/property_types/fqn'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(search_term) 

      # return_type
      return_type = opts[:return_type] || 'SearchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_fqn_property_type_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search over all organizations to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [SearchResult]
    def execute_organization_search(search_term, opts = {})
      data, _status_code, _headers = execute_organization_search_with_http_info(search_term, opts)
      data
    end

    # Executes a search over all organizations to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchResult, Integer, Hash)>] SearchResult data, response status code and response headers
    def execute_organization_search_with_http_info(search_term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_organization_search ...'
      end
      # verify the required parameter 'search_term' is set
      if @api_client.config.client_side_validation && search_term.nil?
        fail ArgumentError, "Missing the required parameter 'search_term' when calling SearchApi.execute_organization_search"
      end
      # resource path
      local_var_path = '/datastore/search/organizations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(search_term) 

      # return_type
      return_type = opts[:return_type] || 'SearchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_organization_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search over all property types to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [SearchResult]
    def execute_property_type_search(search_term, opts = {})
      data, _status_code, _headers = execute_property_type_search_with_http_info(search_term, opts)
      data
    end

    # Executes a search over all property types to find ones that match the given search term
    # @param search_term [SearchTerm] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchResult, Integer, Hash)>] SearchResult data, response status code and response headers
    def execute_property_type_search_with_http_info(search_term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.execute_property_type_search ...'
      end
      # verify the required parameter 'search_term' is set
      if @api_client.config.client_side_validation && search_term.nil?
        fail ArgumentError, "Missing the required parameter 'search_term' when calling SearchApi.execute_property_type_search"
      end
      # resource path
      local_var_path = '/datastore/search/property_types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(search_term) 

      # return_type
      return_type = opts[:return_type] || 'SearchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#execute_property_type_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search over all existing entity sets to populate the home page. The path parameters instruct which page to return and how large the page should be.
    # @param start [Integer] The first result number to return
    # @param num_results [Integer] The total number of results to return
    # @param [Hash] opts the optional parameters
    # @return [Array<SearchResult>]
    def get_entity_sets(start, num_results, opts = {})
      data, _status_code, _headers = get_entity_sets_with_http_info(start, num_results, opts)
      data
    end

    # Executes a search over all existing entity sets to populate the home page. The path parameters instruct which page to return and how large the page should be.
    # @param start [Integer] The first result number to return
    # @param num_results [Integer] The total number of results to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SearchResult>, Integer, Hash)>] Array<SearchResult> data, response status code and response headers
    def get_entity_sets_with_http_info(start, num_results, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.get_entity_sets ...'
      end
      # verify the required parameter 'start' is set
      if @api_client.config.client_side_validation && start.nil?
        fail ArgumentError, "Missing the required parameter 'start' when calling SearchApi.get_entity_sets"
      end
      # verify the required parameter 'num_results' is set
      if @api_client.config.client_side_validation && num_results.nil?
        fail ArgumentError, "Missing the required parameter 'num_results' when calling SearchApi.get_entity_sets"
      end
      # resource path
      local_var_path = '/datastore/search/entity-sets/{start}/{numResults}'.sub('{' + 'start' + '}', CGI.escape(start.to_s)).sub('{' + 'numResults' + '}', CGI.escape(num_results.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<SearchResult>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#get_entity_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the most popular entity sets.
    # @param [Hash] opts the optional parameters
    # @return [Array<EntitySet>]
    def get_popular_entity_set(opts = {})
      data, _status_code, _headers = get_popular_entity_set_with_http_info(opts)
      data
    end

    # Get the most popular entity sets.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EntitySet>, Integer, Hash)>] Array<EntitySet> data, response status code and response headers
    def get_popular_entity_set_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.get_popular_entity_set ...'
      end
      # resource path
      local_var_path = '/datastore/search/popular'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<EntitySet>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#get_popular_entity_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a search over the data of a given entity set to find rows that match the search term
    # @param search_constraints [SearchConstraints] 
    # @param [Hash] opts the optional parameters
    # @return [DataSearchResult]
    def search_entity_set_data(search_constraints, opts = {})
      data, _status_code, _headers = search_entity_set_data_with_http_info(search_constraints, opts)
      data
    end

    # Executes a search over the data of a given entity set to find rows that match the search term
    # @param search_constraints [SearchConstraints] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataSearchResult, Integer, Hash)>] DataSearchResult data, response status code and response headers
    def search_entity_set_data_with_http_info(search_constraints, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.search_entity_set_data ...'
      end
      # verify the required parameter 'search_constraints' is set
      if @api_client.config.client_side_validation && search_constraints.nil?
        fail ArgumentError, "Missing the required parameter 'search_constraints' when calling SearchApi.search_entity_set_data"
      end
      # resource path
      local_var_path = '/datastore/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(search_constraints) 

      # return_type
      return_type = opts[:return_type] || 'DataSearchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#search_entity_set_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
