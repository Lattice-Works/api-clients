=begin
#OpenLattice API

#OpenLattice API

The version of the OpenAPI document: 0.0.1
Contact: support@openlattice.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class EdmApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update the AssociationType dst entity types for the given AssociationType UUID by adding the given EntityType UUID.
    # @param association_type_id [String] 
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_dst_entity_type_to_association_type(association_type_id, entity_type_id, opts = {})
      add_dst_entity_type_to_association_type_with_http_info(association_type_id, entity_type_id, opts)
      nil
    end

    # Update the AssociationType dst entity types for the given AssociationType UUID by adding the given EntityType UUID.
    # @param association_type_id [String] 
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_dst_entity_type_to_association_type_with_http_info(association_type_id, entity_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.add_dst_entity_type_to_association_type ...'
      end
      # verify the required parameter 'association_type_id' is set
      if @api_client.config.client_side_validation && association_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'association_type_id' when calling EdmApi.add_dst_entity_type_to_association_type"
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.add_dst_entity_type_to_association_type"
      end
      # resource path
      local_var_path = '/datastore/edm/association/type/{associationTypeId}/dst/{entityTypeId}'.sub('{' + 'associationTypeId' + '}', CGI.escape(association_type_id.to_s)).sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#add_dst_entity_type_to_association_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds the entity sets as linked entity sets to the linking entity set
    # @param linking_entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Integer]
    def add_entity_sets_to_linking_entity_set(linking_entity_set_id, opts = {})
      data, _status_code, _headers = add_entity_sets_to_linking_entity_set_with_http_info(linking_entity_set_id, opts)
      data
    end

    # Adds the entity sets as linked entity sets to the linking entity set
    # @param linking_entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def add_entity_sets_to_linking_entity_set_with_http_info(linking_entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.add_entity_sets_to_linking_entity_set ...'
      end
      # verify the required parameter 'linking_entity_set_id' is set
      if @api_client.config.client_side_validation && linking_entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'linking_entity_set_id' when calling EdmApi.add_entity_sets_to_linking_entity_set"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/linking/{linkingEntitySetId}'.sub('{' + 'linkingEntitySetId' + '}', CGI.escape(linking_entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'request_body']) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#add_entity_sets_to_linking_entity_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds the entity sets as linked entity sets to the linking entity sets
    # @param linking_entity_set_id [String] 
    # @param request_body [Hash<String, Array<String>>] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def add_entity_sets_to_linking_entity_sets(linking_entity_set_id, request_body, opts = {})
      data, _status_code, _headers = add_entity_sets_to_linking_entity_sets_with_http_info(linking_entity_set_id, request_body, opts)
      data
    end

    # Adds the entity sets as linked entity sets to the linking entity sets
    # @param linking_entity_set_id [String] 
    # @param request_body [Hash<String, Array<String>>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def add_entity_sets_to_linking_entity_sets_with_http_info(linking_entity_set_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.add_entity_sets_to_linking_entity_sets ...'
      end
      # verify the required parameter 'linking_entity_set_id' is set
      if @api_client.config.client_side_validation && linking_entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'linking_entity_set_id' when calling EdmApi.add_entity_sets_to_linking_entity_sets"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling EdmApi.add_entity_sets_to_linking_entity_sets"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/linking/'.sub('{' + 'linkingEntitySetId' + '}', CGI.escape(linking_entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#add_entity_sets_to_linking_entity_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds a primary key with a given ID to an entity type with a given ID.
    # @param entity_type_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_primary_key_to_entity_type(entity_type_id, property_type_id, opts = {})
      add_primary_key_to_entity_type_with_http_info(entity_type_id, property_type_id, opts)
      nil
    end

    # Adds a primary key with a given ID to an entity type with a given ID.
    # @param entity_type_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_primary_key_to_entity_type_with_http_info(entity_type_id, property_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.add_primary_key_to_entity_type ...'
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.add_primary_key_to_entity_type"
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EdmApi.add_primary_key_to_entity_type"
      end
      # resource path
      local_var_path = '/datastore/edm/entity/type/key/{entityTypeId}/{propertyTypeId}'.sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s)).sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#add_primary_key_to_entity_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the EntityType definition for the given EntityType UUID by adding the given PropertyType UUID.
    # @param entity_type_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_property_type_to_entity_type(entity_type_id, property_type_id, opts = {})
      add_property_type_to_entity_type_with_http_info(entity_type_id, property_type_id, opts)
      nil
    end

    # Updates the EntityType definition for the given EntityType UUID by adding the given PropertyType UUID.
    # @param entity_type_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_property_type_to_entity_type_with_http_info(entity_type_id, property_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.add_property_type_to_entity_type ...'
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.add_property_type_to_entity_type"
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EdmApi.add_property_type_to_entity_type"
      end
      # resource path
      local_var_path = '/datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}'.sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s)).sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#add_property_type_to_entity_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the AssociationType src entity types for the given AssociationType UUID by adding the given EntityType UUID.
    # @param association_type_id [String] 
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_src_entity_type_to_association_type(association_type_id, entity_type_id, opts = {})
      add_src_entity_type_to_association_type_with_http_info(association_type_id, entity_type_id, opts)
      nil
    end

    # Update the AssociationType src entity types for the given AssociationType UUID by adding the given EntityType UUID.
    # @param association_type_id [String] 
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_src_entity_type_to_association_type_with_http_info(association_type_id, entity_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.add_src_entity_type_to_association_type ...'
      end
      # verify the required parameter 'association_type_id' is set
      if @api_client.config.client_side_validation && association_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'association_type_id' when calling EdmApi.add_src_entity_type_to_association_type"
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.add_src_entity_type_to_association_type"
      end
      # resource path
      local_var_path = '/datastore/edm/association/type/{associationTypeId}/src/{entityTypeId}'.sub('{' + 'associationTypeId' + '}', CGI.escape(association_type_id.to_s)).sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#add_src_entity_type_to_association_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new AssociationType definition, if it doesn't exist.
    # @param association_type [Array<AssociationType>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_association_type(association_type, opts = {})
      create_association_type_with_http_info(association_type, opts)
      nil
    end

    # Creates a new AssociationType definition, if it doesn&#39;t exist.
    # @param association_type [Array<AssociationType>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_association_type_with_http_info(association_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.create_association_type ...'
      end
      # verify the required parameter 'association_type' is set
      if @api_client.config.client_side_validation && association_type.nil?
        fail ArgumentError, "Missing the required parameter 'association_type' when calling EdmApi.create_association_type"
      end
      # resource path
      local_var_path = '/datastore/edm/association/type/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(association_type) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#create_association_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an empty schema, if it doesn't exist. If schema exists then no action is taken.
    # @param namespace [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_empty_schema(namespace, name, opts = {})
      create_empty_schema_with_http_info(namespace, name, opts)
      nil
    end

    # Creates an empty schema, if it doesn&#39;t exist. If schema exists then no action is taken.
    # @param namespace [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_empty_schema_with_http_info(namespace, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.create_empty_schema ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling EdmApi.create_empty_schema"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EdmApi.create_empty_schema"
      end
      # resource path
      local_var_path = '/datastore/edm/schema/{namespace}/{name}'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#create_empty_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates new EntitySet definitions if they don't exist.
    # @param entity_set [Array<EntitySet>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_entity_sets(entity_set, opts = {})
      create_entity_sets_with_http_info(entity_set, opts)
      nil
    end

    # Creates new EntitySet definitions if they don&#39;t exist.
    # @param entity_set [Array<EntitySet>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_entity_sets_with_http_info(entity_set, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.create_entity_sets ...'
      end
      # verify the required parameter 'entity_set' is set
      if @api_client.config.client_side_validation && entity_set.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set' when calling EdmApi.create_entity_sets"
      end
      # resource path
      local_var_path = '/datastore/entity-sets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(entity_set) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#create_entity_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new EntityType definition, if it doesn't exist.
    # @param entity_type [EntityType] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_entity_type(entity_type, opts = {})
      create_entity_type_with_http_info(entity_type, opts)
      nil
    end

    # Creates a new EntityType definition, if it doesn&#39;t exist.
    # @param entity_type [EntityType] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_entity_type_with_http_info(entity_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.create_entity_type ...'
      end
      # verify the required parameter 'entity_type' is set
      if @api_client.config.client_side_validation && entity_type.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type' when calling EdmApi.create_entity_type"
      end
      # resource path
      local_var_path = '/datastore/edm/entity/type/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(entity_type) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#create_entity_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new PropertyType definition, if it doesn\"t exist.
    # @param property_type [PropertyType] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_property_type(property_type, opts = {})
      create_property_type_with_http_info(property_type, opts)
      nil
    end

    # Creates a new PropertyType definition, if it doesn\&quot;t exist.
    # @param property_type [PropertyType] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_property_type_with_http_info(property_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.create_property_type ...'
      end
      # verify the required parameter 'property_type' is set
      if @api_client.config.client_side_validation && property_type.nil?
        fail ArgumentError, "Missing the required parameter 'property_type' when calling EdmApi.create_property_type"
      end
      # resource path
      local_var_path = '/datastore/edm/property/type/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(property_type) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#create_property_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an empty schema, if it doesn't exist. If schema exists then no action is taken.
    # @param schema [Schema] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_schema_if_not_exists(schema, opts = {})
      create_schema_if_not_exists_with_http_info(schema, opts)
      nil
    end

    # Creates an empty schema, if it doesn&#39;t exist. If schema exists then no action is taken.
    # @param schema [Schema] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_schema_if_not_exists_with_http_info(schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.create_schema_if_not_exists ...'
      end
      # verify the required parameter 'schema' is set
      if @api_client.config.client_side_validation && schema.nil?
        fail ArgumentError, "Missing the required parameter 'schema' when calling EdmApi.create_schema_if_not_exists"
      end
      # resource path
      local_var_path = '/datastore/edm/schema'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(schema) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#create_schema_if_not_exists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the AssociationType definition for the given AssociationType UUID.
    # @param association_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_association_type(association_type_id, opts = {})
      delete_association_type_with_http_info(association_type_id, opts)
      nil
    end

    # Deletes the AssociationType definition for the given AssociationType UUID.
    # @param association_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_association_type_with_http_info(association_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.delete_association_type ...'
      end
      # verify the required parameter 'association_type_id' is set
      if @api_client.config.client_side_validation && association_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'association_type_id' when calling EdmApi.delete_association_type"
      end
      # resource path
      local_var_path = '/datastore/edm/association/type/{associationTypeId}'.sub('{' + 'associationTypeId' + '}', CGI.escape(association_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#delete_association_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the EntitySet definition for the given EntitySet UUID.
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_entity_set(entity_set_id, opts = {})
      delete_entity_set_with_http_info(entity_set_id, opts)
      nil
    end

    # Deletes the EntitySet definition for the given EntitySet UUID.
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_entity_set_with_http_info(entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.delete_entity_set ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling EdmApi.delete_entity_set"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/{entitySetId}'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#delete_entity_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the EntityType definition for the given EntityType UUID.
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_entity_type(entity_type_id, opts = {})
      delete_entity_type_with_http_info(entity_type_id, opts)
      nil
    end

    # Deletes the EntityType definition for the given EntityType UUID.
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_entity_type_with_http_info(entity_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.delete_entity_type ...'
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.delete_entity_type"
      end
      # resource path
      local_var_path = '/datastore/edm/entity/type/{entityTypeId}'.sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#delete_entity_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the PropertyType definition for the given PropertyType UUID.
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_property_type(property_type_id, opts = {})
      delete_property_type_with_http_info(property_type_id, opts)
      nil
    end

    # Deletes the PropertyType definition for the given PropertyType UUID.
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_property_type_with_http_info(property_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.delete_property_type ...'
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EdmApi.delete_property_type"
      end
      # resource path
      local_var_path = '/datastore/edm/property/type/{propertyTypeId}'.sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#delete_property_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the PropertyType definition for the given PropertyType UUID regardless of whether or not there is data associated with it.
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def force_delete_property_type(property_type_id, opts = {})
      force_delete_property_type_with_http_info(property_type_id, opts)
      nil
    end

    # Deletes the PropertyType definition for the given PropertyType UUID regardless of whether or not there is data associated with it.
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def force_delete_property_type_with_http_info(property_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.force_delete_property_type ...'
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EdmApi.force_delete_property_type"
      end
      # resource path
      local_var_path = '/datastore/edm/property/type/{propertyTypeId}/force'.sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#force_delete_property_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the EntityType definition for the given EntityType UUID by removing the given PropertyType UUID, regardless of whether or not there is data associated with the entity type.
    # @param entity_type_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def force_remove_property_type_from_entity_type(entity_type_id, property_type_id, opts = {})
      force_remove_property_type_from_entity_type_with_http_info(entity_type_id, property_type_id, opts)
      nil
    end

    # Updates the EntityType definition for the given EntityType UUID by removing the given PropertyType UUID, regardless of whether or not there is data associated with the entity type.
    # @param entity_type_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def force_remove_property_type_from_entity_type_with_http_info(entity_type_id, property_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.force_remove_property_type_from_entity_type ...'
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.force_remove_property_type_from_entity_type"
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EdmApi.force_remove_property_type_from_entity_type"
      end
      # resource path
      local_var_path = '/datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}/force'.sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s)).sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#force_remove_property_type_from_entity_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all association EntityType definitions.
    # @param [Hash] opts the optional parameters
    # @return [Array<AssociationType>]
    def get_all_association_entity_types(opts = {})
      data, _status_code, _headers = get_all_association_entity_types_with_http_info(opts)
      data
    end

    # Gets all association EntityType definitions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AssociationType>, Integer, Hash)>] Array<AssociationType> data, response status code and response headers
    def get_all_association_entity_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_all_association_entity_types ...'
      end
      # resource path
      local_var_path = '/datastore/edm/association/type/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<AssociationType>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_all_association_entity_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all available associations for the given AssociationType UUID.
    # @param association_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<AssociationType>]
    def get_all_available_association_types(association_type_id, opts = {})
      data, _status_code, _headers = get_all_available_association_types_with_http_info(association_type_id, opts)
      data
    end

    # Get all available associations for the given AssociationType UUID.
    # @param association_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AssociationType>, Integer, Hash)>] Array<AssociationType> data, response status code and response headers
    def get_all_available_association_types_with_http_info(association_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_all_available_association_types ...'
      end
      # verify the required parameter 'association_type_id' is set
      if @api_client.config.client_side_validation && association_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'association_type_id' when calling EdmApi.get_all_available_association_types"
      end
      # resource path
      local_var_path = '/datastore/edm/association/type/{associationTypeId}/available'.sub('{' + 'associationTypeId' + '}', CGI.escape(association_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<AssociationType>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_all_available_association_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all entity set property metadata.
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, EntitySetPropertyMetaData>]
    def get_all_entity_set_property_metadata(entity_set_id, opts = {})
      data, _status_code, _headers = get_all_entity_set_property_metadata_with_http_info(entity_set_id, opts)
      data
    end

    # Get all entity set property metadata.
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, EntitySetPropertyMetaData>, Integer, Hash)>] Hash<String, EntitySetPropertyMetaData> data, response status code and response headers
    def get_all_entity_set_property_metadata_with_http_info(entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_all_entity_set_property_metadata ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling EdmApi.get_all_entity_set_property_metadata"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/{entitySetId}/metadata'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, EntitySetPropertyMetaData>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_all_entity_set_property_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all EntitySet definitions.
    # @param [Hash] opts the optional parameters
    # @return [Array<EntitySet>]
    def get_all_entity_sets(opts = {})
      data, _status_code, _headers = get_all_entity_sets_with_http_info(opts)
      data
    end

    # Get all EntitySet definitions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EntitySet>, Integer, Hash)>] Array<EntitySet> data, response status code and response headers
    def get_all_entity_sets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_all_entity_sets ...'
      end
      # resource path
      local_var_path = '/datastore/entity-sets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<EntitySet>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_all_entity_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all EntityType propertyType metadata
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, EntityTypePropertyMetadata>]
    def get_all_entity_type_property_metadata(entity_type_id, opts = {})
      data, _status_code, _headers = get_all_entity_type_property_metadata_with_http_info(entity_type_id, opts)
      data
    end

    # Get all EntityType propertyType metadata
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, EntityTypePropertyMetadata>, Integer, Hash)>] Hash<String, EntityTypePropertyMetadata> data, response status code and response headers
    def get_all_entity_type_property_metadata_with_http_info(entity_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_all_entity_type_property_metadata ...'
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.get_all_entity_type_property_metadata"
      end
      # resource path
      local_var_path = '/datastore/edm/entity/type/{entityTypeId}/property/type'.sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, EntityTypePropertyMetadata>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_all_entity_type_property_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all EntityType definitions.
    # @param [Hash] opts the optional parameters
    # @return [Array<EntityType>]
    def get_all_entity_types(opts = {})
      data, _status_code, _headers = get_all_entity_types_with_http_info(opts)
      data
    end

    # Gets all EntityType definitions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EntityType>, Integer, Hash)>] Array<EntityType> data, response status code and response headers
    def get_all_entity_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_all_entity_types ...'
      end
      # resource path
      local_var_path = '/datastore/edm/entity/type/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<EntityType>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_all_entity_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all PropertyType definitions.
    # @param [Hash] opts the optional parameters
    # @return [Array<PropertyType>]
    def get_all_property_types(opts = {})
      data, _status_code, _headers = get_all_property_types_with_http_info(opts)
      data
    end

    # Gets all PropertyType definitions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PropertyType>, Integer, Hash)>] Array<PropertyType> data, response status code and response headers
    def get_all_property_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_all_property_types ...'
      end
      # resource path
      local_var_path = '/datastore/edm/property/type/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<PropertyType>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_all_property_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all PropertyType definitions under the given namespace.
    # @param namespace [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<PropertyType>]
    def get_all_property_types_in_namespace(namespace, opts = {})
      data, _status_code, _headers = get_all_property_types_in_namespace_with_http_info(namespace, opts)
      data
    end

    # Gets all PropertyType definitions under the given namespace.
    # @param namespace [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PropertyType>, Integer, Hash)>] Array<PropertyType> data, response status code and response headers
    def get_all_property_types_in_namespace_with_http_info(namespace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_all_property_types_in_namespace ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling EdmApi.get_all_property_types_in_namespace"
      end
      # resource path
      local_var_path = '/datastore/edm/property/type/namespace/{namespace}'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<PropertyType>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_all_property_types_in_namespace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Property Usage Summary for all properties.
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, PropertyUsageSummary>]
    def get_all_property_usage_summaries(opts = {})
      data, _status_code, _headers = get_all_property_usage_summaries_with_http_info(opts)
      data
    end

    # Get Property Usage Summary for all properties.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, PropertyUsageSummary>, Integer, Hash)>] Hash<String, PropertyUsageSummary> data, response status code and response headers
    def get_all_property_usage_summaries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_all_property_usage_summaries ...'
      end
      # resource path
      local_var_path = '/datastore/edm/summary'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, PropertyUsageSummary>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_all_property_usage_summaries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the AssociationType definition for the given AssociationType UUID.
    # @param association_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [AssociationType]
    def get_association_type(association_type_id, opts = {})
      data, _status_code, _headers = get_association_type_with_http_info(association_type_id, opts)
      data
    end

    # Get the AssociationType definition for the given AssociationType UUID.
    # @param association_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssociationType, Integer, Hash)>] AssociationType data, response status code and response headers
    def get_association_type_with_http_info(association_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_association_type ...'
      end
      # verify the required parameter 'association_type_id' is set
      if @api_client.config.client_side_validation && association_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'association_type_id' when calling EdmApi.get_association_type"
      end
      # resource path
      local_var_path = '/datastore/edm/association/type/{associationTypeId}'.sub('{' + 'associationTypeId' + '}', CGI.escape(association_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AssociationType' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_association_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details about the AssociationType for the given AssociationType UUID.
    # @param association_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [AssociationType]
    def get_association_type_details(association_type_id, opts = {})
      data, _status_code, _headers = get_association_type_details_with_http_info(association_type_id, opts)
      data
    end

    # Get details about the AssociationType for the given AssociationType UUID.
    # @param association_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssociationType, Integer, Hash)>] AssociationType data, response status code and response headers
    def get_association_type_details_with_http_info(association_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_association_type_details ...'
      end
      # verify the required parameter 'association_type_id' is set
      if @api_client.config.client_side_validation && association_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'association_type_id' when calling EdmApi.get_association_type_details"
      end
      # resource path
      local_var_path = '/datastore/edm/association/type/{associationTypeId}/detailed'.sub('{' + 'associationTypeId' + '}', CGI.escape(association_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AssociationType' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_association_type_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the entity data model, including namespaces, schemas, entity types, association types, and property types.
    # @param [Hash] opts the optional parameters
    # @return [EDM]
    def get_entity_data_model(opts = {})
      data, _status_code, _headers = get_entity_data_model_with_http_info(opts)
      data
    end

    # Gets the entity data model, including namespaces, schemas, entity types, association types, and property types.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EDM, Integer, Hash)>] EDM data, response status code and response headers
    def get_entity_data_model_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_entity_data_model ...'
      end
      # resource path
      local_var_path = '/datastore/edm/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EDM' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_entity_data_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the changes between the existing entity data model and the entity data model passed in, including schemas, association types, entity types, and property types.
    # @param ed_mdiff [EDMdiff] 
    # @param [Hash] opts the optional parameters
    # @return [EDMdiff]
    def get_entity_data_model_diff(ed_mdiff, opts = {})
      data, _status_code, _headers = get_entity_data_model_diff_with_http_info(ed_mdiff, opts)
      data
    end

    # Gets the changes between the existing entity data model and the entity data model passed in, including schemas, association types, entity types, and property types.
    # @param ed_mdiff [EDMdiff] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EDMdiff, Integer, Hash)>] EDMdiff data, response status code and response headers
    def get_entity_data_model_diff_with_http_info(ed_mdiff, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_entity_data_model_diff ...'
      end
      # verify the required parameter 'ed_mdiff' is set
      if @api_client.config.client_side_validation && ed_mdiff.nil?
        fail ArgumentError, "Missing the required parameter 'ed_mdiff' when calling EdmApi.get_entity_data_model_diff"
      end
      # resource path
      local_var_path = '/datastore/edm/diff/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(ed_mdiff) 

      # return_type
      return_type = opts[:return_type] || 'EDMdiff' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_entity_data_model_diff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the EntitySet definition for the given EntitySet UUID.
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [EntitySet]
    def get_entity_set(entity_set_id, opts = {})
      data, _status_code, _headers = get_entity_set_with_http_info(entity_set_id, opts)
      data
    end

    # Get the EntitySet definition for the given EntitySet UUID.
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntitySet, Integer, Hash)>] EntitySet data, response status code and response headers
    def get_entity_set_with_http_info(entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_entity_set ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling EdmApi.get_entity_set"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/{entitySetId}'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EntitySet' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_entity_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the EntitySet UUID for the given EntitySet name.
    # @param entity_set_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_entity_set_id(entity_set_name, opts = {})
      data, _status_code, _headers = get_entity_set_id_with_http_info(entity_set_name, opts)
      data
    end

    # Gets the EntitySet UUID for the given EntitySet name.
    # @param entity_set_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_entity_set_id_with_http_info(entity_set_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_entity_set_id ...'
      end
      # verify the required parameter 'entity_set_name' is set
      if @api_client.config.client_side_validation && entity_set_name.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_name' when calling EdmApi.get_entity_set_id"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/ids/{entitySetName}'.sub('{' + 'entitySetName' + '}', CGI.escape(entity_set_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_entity_set_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IDs for entity sets given their names.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Hash<String, String>]
    def get_entity_set_ids(opts = {})
      data, _status_code, _headers = get_entity_set_ids_with_http_info(opts)
      data
    end

    # Get IDs for entity sets given their names.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Array<(Hash<String, String>, Integer, Hash)>] Hash<String, String> data, response status code and response headers
    def get_entity_set_ids_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_entity_set_ids ...'
      end
      # resource path
      local_var_path = '/datastore/entity-sets/ids/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'request_body']) 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, String>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_entity_set_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get specified property type metadata for an entity set.
    # @param entity_set_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [EntitySetPropertyMetaData]
    def get_entity_set_property_metadata(entity_set_id, property_type_id, opts = {})
      data, _status_code, _headers = get_entity_set_property_metadata_with_http_info(entity_set_id, property_type_id, opts)
      data
    end

    # Get specified property type metadata for an entity set.
    # @param entity_set_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntitySetPropertyMetaData, Integer, Hash)>] EntitySetPropertyMetaData data, response status code and response headers
    def get_entity_set_property_metadata_with_http_info(entity_set_id, property_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_entity_set_property_metadata ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling EdmApi.get_entity_set_property_metadata"
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EdmApi.get_entity_set_property_metadata"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s)).sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EntitySetPropertyMetaData' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_entity_set_property_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the EntityType definition for the given EntityType UUID.
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [EntityType]
    def get_entity_type(entity_type_id, opts = {})
      data, _status_code, _headers = get_entity_type_with_http_info(entity_type_id, opts)
      data
    end

    # Gets the EntityType definition for the given EntityType UUID.
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntityType, Integer, Hash)>] EntityType data, response status code and response headers
    def get_entity_type_with_http_info(entity_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_entity_type ...'
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.get_entity_type"
      end
      # resource path
      local_var_path = '/datastore/edm/entity/type/{entityTypeId}'.sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EntityType' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_entity_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the EntityType hierarchy for the given EntityType UUID.
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_entity_type_hierarchy(entity_type_id, opts = {})
      get_entity_type_hierarchy_with_http_info(entity_type_id, opts)
      nil
    end

    # Get the EntityType hierarchy for the given EntityType UUID.
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_entity_type_hierarchy_with_http_info(entity_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_entity_type_hierarchy ...'
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.get_entity_type_hierarchy"
      end
      # resource path
      local_var_path = '/datastore/edm/entity/type/{entityTypeId}/hierarchy'.sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_entity_type_hierarchy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the EntityType UUID for the given EntityType FQN.
    # @param namespace [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_entity_type_id(namespace, name, opts = {})
      data, _status_code, _headers = get_entity_type_id_with_http_info(namespace, name, opts)
      data
    end

    # Gets the EntityType UUID for the given EntityType FQN.
    # @param namespace [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_entity_type_id_with_http_info(namespace, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_entity_type_id ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling EdmApi.get_entity_type_id"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EdmApi.get_entity_type_id"
      end
      # resource path
      local_var_path = '/datastore/edm/ids/entity/type/{namespace}/{name}'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_entity_type_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get EntityType propertyType metadata
    # @param entity_type_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [EntityTypePropertyMetadata]
    def get_entity_type_property_metadata(entity_type_id, property_type_id, opts = {})
      data, _status_code, _headers = get_entity_type_property_metadata_with_http_info(entity_type_id, property_type_id, opts)
      data
    end

    # Get EntityType propertyType metadata
    # @param entity_type_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntityTypePropertyMetadata, Integer, Hash)>] EntityTypePropertyMetadata data, response status code and response headers
    def get_entity_type_property_metadata_with_http_info(entity_type_id, property_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_entity_type_property_metadata ...'
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.get_entity_type_property_metadata"
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EdmApi.get_entity_type_property_metadata"
      end
      # resource path
      local_var_path = '/datastore/edm/entity/type/{entityTypeId}/property/type/{propertyTypeId}'.sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s)).sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EntityTypePropertyMetadata' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_entity_type_property_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get property metadata for entity sets.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Hash<String, Hash<String, EntitySetPropertyMetaData>>]
    def get_property_metadata_for_entity_sets(opts = {})
      data, _status_code, _headers = get_property_metadata_for_entity_sets_with_http_info(opts)
      data
    end

    # Get property metadata for entity sets.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Array<(Hash<String, Hash<String, EntitySetPropertyMetaData>>, Integer, Hash)>] Hash<String, Hash<String, EntitySetPropertyMetaData>> data, response status code and response headers
    def get_property_metadata_for_entity_sets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_property_metadata_for_entity_sets ...'
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/metadata'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'request_body']) 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Hash<String, EntitySetPropertyMetaData>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_property_metadata_for_entity_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the PropertyType definition for the given PropertyType UUID.
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [PropertyType]
    def get_property_type(property_type_id, opts = {})
      data, _status_code, _headers = get_property_type_with_http_info(property_type_id, opts)
      data
    end

    # Gets the PropertyType definition for the given PropertyType UUID.
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PropertyType, Integer, Hash)>] PropertyType data, response status code and response headers
    def get_property_type_with_http_info(property_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_property_type ...'
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EdmApi.get_property_type"
      end
      # resource path
      local_var_path = '/datastore/edm/property/type/{propertyTypeId}'.sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PropertyType' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_property_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the PropertyType UUID for the given PropertyType FQN.
    # @param namespace [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_property_type_id(namespace, name, opts = {})
      data, _status_code, _headers = get_property_type_id_with_http_info(namespace, name, opts)
      data
    end

    # Gets the PropertyType UUID for the given PropertyType FQN.
    # @param namespace [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_property_type_id_with_http_info(namespace, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_property_type_id ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling EdmApi.get_property_type_id"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EdmApi.get_property_type_id"
      end
      # resource path
      local_var_path = '/datastore/edm/ids/property/type/{namespace}/{name}'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_property_type_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Property Types for entity set
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, PropertyType>]
    def get_property_types_for_entity_set(entity_set_id, opts = {})
      data, _status_code, _headers = get_property_types_for_entity_set_with_http_info(entity_set_id, opts)
      data
    end

    # Get all Property Types for entity set
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, PropertyType>, Integer, Hash)>] Hash<String, PropertyType> data, response status code and response headers
    def get_property_types_for_entity_set_with_http_info(entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_property_types_for_entity_set ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling EdmApi.get_property_types_for_entity_set"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/{entitySetId}/properties'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, PropertyType>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_property_types_for_entity_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Property Usage Summary for property with given ID.
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<PropertyUsageSummary>]
    def get_property_usage_summary(property_type_id, opts = {})
      data, _status_code, _headers = get_property_usage_summary_with_http_info(property_type_id, opts)
      data
    end

    # Get Property Usage Summary for property with given ID.
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PropertyUsageSummary>, Integer, Hash)>] Array<PropertyUsageSummary> data, response status code and response headers
    def get_property_usage_summary_with_http_info(property_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_property_usage_summary ...'
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EdmApi.get_property_usage_summary"
      end
      # resource path
      local_var_path = '/datastore/edm/summary/{propertyTypeId}'.sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<PropertyUsageSummary>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_property_usage_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the schema contents for a corresponding namespace and name.
    # @param namespace [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_type  (default to 'yaml')
    # @return [Schema]
    def get_schema_contents(namespace, name, opts = {})
      data, _status_code, _headers = get_schema_contents_with_http_info(namespace, name, opts)
      data
    end

    # Gets the schema contents for a corresponding namespace and name.
    # @param namespace [String] 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_type 
    # @return [Array<(Schema, Integer, Hash)>] Schema data, response status code and response headers
    def get_schema_contents_with_http_info(namespace, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_schema_contents ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling EdmApi.get_schema_contents"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EdmApi.get_schema_contents"
      end
      allowable_values = ["csv", "json", "yaml"]
      if @api_client.config.client_side_validation && opts[:'file_type'] && !allowable_values.include?(opts[:'file_type'])
        fail ArgumentError, "invalid value for \"file_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/datastore/edm/schema/{namespace}/{name}'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fileType'] = opts[:'file_type'] if !opts[:'file_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Schema' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_schema_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all schemas.
    # @param [Hash] opts the optional parameters
    # @return [Array<Schema>]
    def get_schemas(opts = {})
      data, _status_code, _headers = get_schemas_with_http_info(opts)
      data
    end

    # Gets all schemas.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Schema>, Integer, Hash)>] Array<Schema> data, response status code and response headers
    def get_schemas_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_schemas ...'
      end
      # resource path
      local_var_path = '/datastore/edm/schema'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Schema>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_schemas\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all schemas associated with a given namespace and accessible by the caller.
    # @param namespace [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Schema>]
    def get_schemas_in_namespace(namespace, opts = {})
      data, _status_code, _headers = get_schemas_in_namespace_with_http_info(namespace, opts)
      data
    end

    # Gets all schemas associated with a given namespace and accessible by the caller.
    # @param namespace [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Schema>, Integer, Hash)>] Array<Schema> data, response status code and response headers
    def get_schemas_in_namespace_with_http_info(namespace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.get_schemas_in_namespace ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling EdmApi.get_schemas_in_namespace"
      end
      # resource path
      local_var_path = '/datastore/edm/schema/{namespace}'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Schema>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#get_schemas_in_namespace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the AssociationType dst entity types for the given AssociationType UUID by removing the given EntityType UUID.
    # @param association_type_id [String] 
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_dst_entity_type_from_association_type(association_type_id, entity_type_id, opts = {})
      remove_dst_entity_type_from_association_type_with_http_info(association_type_id, entity_type_id, opts)
      nil
    end

    # Updates the AssociationType dst entity types for the given AssociationType UUID by removing the given EntityType UUID.
    # @param association_type_id [String] 
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_dst_entity_type_from_association_type_with_http_info(association_type_id, entity_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.remove_dst_entity_type_from_association_type ...'
      end
      # verify the required parameter 'association_type_id' is set
      if @api_client.config.client_side_validation && association_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'association_type_id' when calling EdmApi.remove_dst_entity_type_from_association_type"
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.remove_dst_entity_type_from_association_type"
      end
      # resource path
      local_var_path = '/datastore/edm/association/type/{associationTypeId}/dst/{entityTypeId}'.sub('{' + 'associationTypeId' + '}', CGI.escape(association_type_id.to_s)).sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#remove_dst_entity_type_from_association_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes/unlinks the linked entity sets from the linking entity set
    # @param linking_entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Integer]
    def remove_entity_sets_from_linking_entity_set(linking_entity_set_id, opts = {})
      data, _status_code, _headers = remove_entity_sets_from_linking_entity_set_with_http_info(linking_entity_set_id, opts)
      data
    end

    # Removes/unlinks the linked entity sets from the linking entity set
    # @param linking_entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def remove_entity_sets_from_linking_entity_set_with_http_info(linking_entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.remove_entity_sets_from_linking_entity_set ...'
      end
      # verify the required parameter 'linking_entity_set_id' is set
      if @api_client.config.client_side_validation && linking_entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'linking_entity_set_id' when calling EdmApi.remove_entity_sets_from_linking_entity_set"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/linking/{linkingEntitySetId}'.sub('{' + 'linkingEntitySetId' + '}', CGI.escape(linking_entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'request_body']) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#remove_entity_sets_from_linking_entity_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes/unlinks the linked entity sets from the linking entity set
    # @param linking_entity_set_id [String] 
    # @param request_body [Hash<String, Array<String>>] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def remove_entity_sets_from_linking_entity_sets(linking_entity_set_id, request_body, opts = {})
      data, _status_code, _headers = remove_entity_sets_from_linking_entity_sets_with_http_info(linking_entity_set_id, request_body, opts)
      data
    end

    # Removes/unlinks the linked entity sets from the linking entity set
    # @param linking_entity_set_id [String] 
    # @param request_body [Hash<String, Array<String>>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def remove_entity_sets_from_linking_entity_sets_with_http_info(linking_entity_set_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.remove_entity_sets_from_linking_entity_sets ...'
      end
      # verify the required parameter 'linking_entity_set_id' is set
      if @api_client.config.client_side_validation && linking_entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'linking_entity_set_id' when calling EdmApi.remove_entity_sets_from_linking_entity_sets"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling EdmApi.remove_entity_sets_from_linking_entity_sets"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/linking/'.sub('{' + 'linkingEntitySetId' + '}', CGI.escape(linking_entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#remove_entity_sets_from_linking_entity_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes a primary key with a given ID from an entity type with a given ID.
    # @param entity_type_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_primary_key_from_entity_type(entity_type_id, property_type_id, opts = {})
      remove_primary_key_from_entity_type_with_http_info(entity_type_id, property_type_id, opts)
      nil
    end

    # Removes a primary key with a given ID from an entity type with a given ID.
    # @param entity_type_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_primary_key_from_entity_type_with_http_info(entity_type_id, property_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.remove_primary_key_from_entity_type ...'
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.remove_primary_key_from_entity_type"
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EdmApi.remove_primary_key_from_entity_type"
      end
      # resource path
      local_var_path = '/datastore/edm/entity/type/key/{entityTypeId}/{propertyTypeId}'.sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s)).sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#remove_primary_key_from_entity_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the EntityType definition for the given EntityType UUID by removing the given PropertyType UUID.
    # @param entity_type_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_property_type_from_entity_type(entity_type_id, property_type_id, opts = {})
      remove_property_type_from_entity_type_with_http_info(entity_type_id, property_type_id, opts)
      nil
    end

    # Updates the EntityType definition for the given EntityType UUID by removing the given PropertyType UUID.
    # @param entity_type_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_property_type_from_entity_type_with_http_info(entity_type_id, property_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.remove_property_type_from_entity_type ...'
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.remove_property_type_from_entity_type"
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EdmApi.remove_property_type_from_entity_type"
      end
      # resource path
      local_var_path = '/datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}'.sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s)).sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#remove_property_type_from_entity_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the AssociationType src entity types for the given AssociationType UUID by removing the given EntityType UUID.
    # @param association_type_id [String] 
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_src_entity_type_from_association_type(association_type_id, entity_type_id, opts = {})
      remove_src_entity_type_from_association_type_with_http_info(association_type_id, entity_type_id, opts)
      nil
    end

    # Updates the AssociationType src entity types for the given AssociationType UUID by removing the given EntityType UUID.
    # @param association_type_id [String] 
    # @param entity_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_src_entity_type_from_association_type_with_http_info(association_type_id, entity_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.remove_src_entity_type_from_association_type ...'
      end
      # verify the required parameter 'association_type_id' is set
      if @api_client.config.client_side_validation && association_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'association_type_id' when calling EdmApi.remove_src_entity_type_from_association_type"
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.remove_src_entity_type_from_association_type"
      end
      # resource path
      local_var_path = '/datastore/edm/association/type/{associationTypeId}/src/{entityTypeId}'.sub('{' + 'associationTypeId' + '}', CGI.escape(association_type_id.to_s)).sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#remove_src_entity_type_from_association_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the EntityType definition for the given EntityType UUID by reordering its properties as specified by the provided list.
    # @param entity_type_id [String] 
    # @param property_type_ids [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reorder_property_types_in_entity_type(entity_type_id, property_type_ids, opts = {})
      reorder_property_types_in_entity_type_with_http_info(entity_type_id, property_type_ids, opts)
      nil
    end

    # Updates the EntityType definition for the given EntityType UUID by reordering its properties as specified by the provided list.
    # @param entity_type_id [String] 
    # @param property_type_ids [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reorder_property_types_in_entity_type_with_http_info(entity_type_id, property_type_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.reorder_property_types_in_entity_type ...'
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.reorder_property_types_in_entity_type"
      end
      # verify the required parameter 'property_type_ids' is set
      if @api_client.config.client_side_validation && property_type_ids.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_ids' when calling EdmApi.reorder_property_types_in_entity_type"
      end
      # resource path
      local_var_path = '/datastore/edm/entity/type/{entityTypeId}/property/type'.sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s)).sub('{' + 'propertyTypeIds' + '}', CGI.escape(property_type_ids.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#reorder_property_types_in_entity_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the entity data model, including schemas, entity types, association types, and property types.
    # @param edm [EDM] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_entity_data_model(edm, opts = {})
      update_entity_data_model_with_http_info(edm, opts)
      nil
    end

    # Updates the entity data model, including schemas, entity types, association types, and property types.
    # @param edm [EDM] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_entity_data_model_with_http_info(edm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.update_entity_data_model ...'
      end
      # verify the required parameter 'edm' is set
      if @api_client.config.client_side_validation && edm.nil?
        fail ArgumentError, "Missing the required parameter 'edm' when calling EdmApi.update_entity_data_model"
      end
      # resource path
      local_var_path = '/datastore/edm/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(edm) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#update_entity_data_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the EntitySet definition for the given EntitySet UUID with the given metadata.
    # @param entity_set_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def update_entity_set_meta_data(entity_set_id, metadata_update, opts = {})
      data, _status_code, _headers = update_entity_set_meta_data_with_http_info(entity_set_id, metadata_update, opts)
      data
    end

    # Updates the EntitySet definition for the given EntitySet UUID with the given metadata.
    # @param entity_set_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def update_entity_set_meta_data_with_http_info(entity_set_id, metadata_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.update_entity_set_meta_data ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling EdmApi.update_entity_set_meta_data"
      end
      # verify the required parameter 'metadata_update' is set
      if @api_client.config.client_side_validation && metadata_update.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_update' when calling EdmApi.update_entity_set_meta_data"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/{entitySetId}/metadata/'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(metadata_update) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#update_entity_set_meta_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the property type metadata for the given entity set.
    # @param entity_set_id [String] 
    # @param property_type_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_entity_set_property_metadata(entity_set_id, property_type_id, metadata_update, opts = {})
      update_entity_set_property_metadata_with_http_info(entity_set_id, property_type_id, metadata_update, opts)
      nil
    end

    # Updates the property type metadata for the given entity set.
    # @param entity_set_id [String] 
    # @param property_type_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_entity_set_property_metadata_with_http_info(entity_set_id, property_type_id, metadata_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.update_entity_set_property_metadata ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling EdmApi.update_entity_set_property_metadata"
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EdmApi.update_entity_set_property_metadata"
      end
      # verify the required parameter 'metadata_update' is set
      if @api_client.config.client_side_validation && metadata_update.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_update' when calling EdmApi.update_entity_set_property_metadata"
      end
      # resource path
      local_var_path = '/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s)).sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(metadata_update) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#update_entity_set_property_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the EntityType definition for the given EntityType UUID with the given metadata.
    # @param entity_type_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_entity_type_meta_data(entity_type_id, metadata_update, opts = {})
      update_entity_type_meta_data_with_http_info(entity_type_id, metadata_update, opts)
      nil
    end

    # Updates the EntityType definition for the given EntityType UUID with the given metadata.
    # @param entity_type_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_entity_type_meta_data_with_http_info(entity_type_id, metadata_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.update_entity_type_meta_data ...'
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.update_entity_type_meta_data"
      end
      # verify the required parameter 'metadata_update' is set
      if @api_client.config.client_side_validation && metadata_update.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_update' when calling EdmApi.update_entity_type_meta_data"
      end
      # resource path
      local_var_path = '/datastore/edm/entity/type/{entityTypeId}'.sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(metadata_update) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#update_entity_type_meta_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update EntityType Property metadata
    # @param entity_type_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_entity_type_property_metadata(entity_type_id, property_type_id, opts = {})
      update_entity_type_property_metadata_with_http_info(entity_type_id, property_type_id, opts)
      nil
    end

    # Update EntityType Property metadata
    # @param entity_type_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_entity_type_property_metadata_with_http_info(entity_type_id, property_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.update_entity_type_property_metadata ...'
      end
      # verify the required parameter 'entity_type_id' is set
      if @api_client.config.client_side_validation && entity_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type_id' when calling EdmApi.update_entity_type_property_metadata"
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EdmApi.update_entity_type_property_metadata"
      end
      # resource path
      local_var_path = '/datastore/edm/entity/type/{entityTypeId}/property/type/{propertyTypeId}'.sub('{' + 'entityTypeId' + '}', CGI.escape(entity_type_id.to_s)).sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#update_entity_type_property_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the PropertyType definition for the given PropertyType UUID with the given metadata.
    # @param property_type_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_property_type_meta_data(property_type_id, metadata_update, opts = {})
      update_property_type_meta_data_with_http_info(property_type_id, metadata_update, opts)
      nil
    end

    # Updates the PropertyType definition for the given PropertyType UUID with the given metadata.
    # @param property_type_id [String] 
    # @param metadata_update [MetadataUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_property_type_meta_data_with_http_info(property_type_id, metadata_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.update_property_type_meta_data ...'
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling EdmApi.update_property_type_meta_data"
      end
      # verify the required parameter 'metadata_update' is set
      if @api_client.config.client_side_validation && metadata_update.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_update' when calling EdmApi.update_property_type_meta_data"
      end
      # resource path
      local_var_path = '/datastore/edm/property/type/{propertyTypeId}'.sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(metadata_update) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#update_property_type_meta_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edits the schema contents for a corresponding namespace and name.
    # @param namespace [String] 
    # @param name [String] 
    # @param edm_request [EdmRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_schema(namespace, name, edm_request, opts = {})
      update_schema_with_http_info(namespace, name, edm_request, opts)
      nil
    end

    # Edits the schema contents for a corresponding namespace and name.
    # @param namespace [String] 
    # @param name [String] 
    # @param edm_request [EdmRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_schema_with_http_info(namespace, name, edm_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdmApi.update_schema ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling EdmApi.update_schema"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EdmApi.update_schema"
      end
      # verify the required parameter 'edm_request' is set
      if @api_client.config.client_side_validation && edm_request.nil?
        fail ArgumentError, "Missing the required parameter 'edm_request' when calling EdmApi.update_schema"
      end
      # resource path
      local_var_path = '/datastore/edm/schema/{namespace}/{name}'.sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(edm_request) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdmApi#update_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
