/**
 * OpenLattice API
 * OpenLattice API
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntitySetSelection from '../model/EntitySetSelection';

/**
* Data service.
* @module api/DataApi
* @version 0.0.1
*/
export default class DataApi {

    /**
    * Constructs a new DataApi. 
    * @alias module:api/DataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clearEntitySet operation.
     * @callback module:api/DataApi~clearEntitySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears the data from a single entity set.
     * @param {String} entitySetId 
     * @param {module:api/DataApi~clearEntitySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clearEntitySet(entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling clearEntitySet");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/data/set/{entitySetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllEntitiesFromEntitySet operation.
     * @callback module:api/DataApi~deleteAllEntitiesFromEntitySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears the Entity matching the given Entity id and all of its neighbor Entities
     * @param {String} entitySetId 
     * @param {module:model/String} type 
     * @param {module:api/DataApi~deleteAllEntitiesFromEntitySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAllEntitiesFromEntitySet(entitySetId, type, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling deleteAllEntitiesFromEntitySet");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteAllEntitiesFromEntitySet");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
        'type': type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/data/set/{entitySetId}/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetSize operation.
     * @callback module:api/DataApi~getEntitySetSizeCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the number of entities in an entity set.
     * @param {String} entitySetId 
     * @param {module:api/DataApi~getEntitySetSizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getEntitySetSize(entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling getEntitySetSize");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/datastore/data/{entitySetId}/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadEntitySetData operation.
     * @callback module:api/DataApi~loadEntitySetDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{String: [String]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an iterable containing the entity data, using property type FQNs as key
     * @param {String} entitySetId 
     * @param {module:api/DataApi~loadEntitySetDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<{String: [String]}>}
     */
    loadEntitySetData(entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling loadEntitySetData");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [{'String': ['String']}];
      return this.apiClient.callApi(
        '/datastore/data/set/{entitySetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadFilteredEntitySetData operation.
     * @callback module:api/DataApi~loadFilteredEntitySetDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{String: [String]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of entities by UUID&#39;s
     * @param {String} entitySetId 
     * @param {Array.<EntitySetSelection>} entitySetSelection 
     * @param {module:api/DataApi~loadFilteredEntitySetDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<{String: [String]}>}
     */
    loadFilteredEntitySetData(entitySetId, entitySetSelection, callback) {
      let postBody = entitySetSelection;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling loadFilteredEntitySetData");
      }
      // verify the required parameter 'entitySetSelection' is set
      if (entitySetSelection === undefined || entitySetSelection === null) {
        throw new Error("Missing the required parameter 'entitySetSelection' when calling loadFilteredEntitySetData");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [{'String': ['String']}];
      return this.apiClient.callApi(
        '/datastore/data/set/{entitySetId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
