/**
 * OpenLattice API
 * OpenLattice API
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Auth0userBasic from '../model/Auth0userBasic';
import SecurablePrincipal from '../model/SecurablePrincipal';

/**
* Principal service.
* @module api/PrincipalApi
* @version 0.0.1
*/
export default class PrincipalApi {

    /**
    * Constructs a new PrincipalApi. 
    * @alias module:api/PrincipalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllUsers operation.
     * @callback module:api/PrincipalApi~getAllUsersCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: Auth0userBasic}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all users.
     * @param {module:api/PrincipalApi~getAllUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: Auth0userBasic}>}
     */
    getAllUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Auth0userBasic};
      return this.apiClient.callApi(
        '/datastore/principals/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentRoles operation.
     * @callback module:api/PrincipalApi~getCurrentRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurablePrincipal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current roles.
     * @param {module:api/PrincipalApi~getCurrentRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurablePrincipal}
     */
    getCurrentRoles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecurablePrincipal;
      return this.apiClient.callApi(
        '/datastore/principals/roles/current/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDbAccessCredentials operation.
     * @callback module:api/PrincipalApi~getDbAccessCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the db access credentials.
     * @param {module:api/PrincipalApi~getDbAccessCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getDbAccessCredentials(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/datastore/principals/db', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/PrincipalApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Auth0userBasic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the user for the given id.
     * @param {String} userId 
     * @param {module:api/PrincipalApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Auth0userBasic}
     */
    getUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Auth0userBasic;
      return this.apiClient.callApi(
        '/datastore/principals/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAllUsersByEmail operation.
     * @callback module:api/PrincipalApi~searchAllUsersByEmailCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: Auth0userBasic}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the user id for the given email address.
     * @param {String} emailAddress 
     * @param {module:api/PrincipalApi~searchAllUsersByEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: Auth0userBasic}>}
     */
    searchAllUsersByEmail(emailAddress, callback) {
      let postBody = null;
      // verify the required parameter 'emailAddress' is set
      if (emailAddress === undefined || emailAddress === null) {
        throw new Error("Missing the required parameter 'emailAddress' when calling searchAllUsersByEmail");
      }

      let pathParams = {
        'emailAddress': emailAddress
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Auth0userBasic};
      return this.apiClient.callApi(
        '/datastore/principals/users/search/email/"{emailAddress}"', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
