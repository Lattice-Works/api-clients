/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IndexingState from '../model/IndexingState';

/**
* Admin service.
* @module api/AdminApi
* @version 0.0.1
*/
export default class AdminApi {

    /**
    * Constructs a new AdminApi. 
    * @alias module:api/AdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clearIndexingQueue operation.
     * @callback module:api/AdminApi~clearIndexingQueueCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears all the data currently being indexed in the queue.
     * @param {module:api/AdminApi~clearIndexingQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    clearIndexingQueue(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/indexer/index/reindex', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIndexingState operation.
     * @callback module:api/AdminApi~getIndexingStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IndexingState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the current state of reindexing jobs
     * @param {module:api/AdminApi~getIndexingStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IndexingState}
     */
    getIndexingState(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IndexingState;
      return this.apiClient.callApi(
        '/indexer/index/reindex', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reindex operation.
     * @callback module:api/AdminApi~reindexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IndexingState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merge job descriptions for performing a partial or full reindex of provided entity sets.
     * @param {Object.<String, {String: [String]}>} requestBody A map of entity set ids to entity key ids that determines what will be reindexed. If no entity key ids are provided then all entities in an entity set are reindexed. If no entity set ids are provided then all entity sets are scheduled for reindexing.
     * @param {module:api/AdminApi~reindexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IndexingState}
     */
    reindex(requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling reindex");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IndexingState;
      return this.apiClient.callApi(
        '/indexer/index/reindex', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReindex operation.
     * @callback module:api/AdminApi~updateReindexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IndexingState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces job descriptions for performing a partial or full reindex of provided entity sets.
     * @param {Object.<String, {String: [String]}>} requestBody A map of entity set ids to entity key ids that determines what will be reindexed. If no entity key ids are provided then all entities in an entity set are reindexed. If no entity set ids are provided then all entity sets are scheduled for reindexing.
     * @param {module:api/AdminApi~updateReindexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IndexingState}
     */
    updateReindex(requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling updateReindex");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IndexingState;
      return this.apiClient.callApi(
        '/indexer/index/reindex', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
