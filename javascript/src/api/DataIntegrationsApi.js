/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkDataCreation from '../model/BulkDataCreation';
import EntityKey from '../model/EntityKey';
import IntegrationResults from '../model/IntegrationResults';

/**
* DataIntegrations service.
* @module api/DataIntegrationsApi
* @version 0.0.1
*/
export default class DataIntegrationsApi {

    /**
    * Constructs a new DataIntegrationsApi. 
    * @alias module:api/DataIntegrationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getEntityKeyIds operation.
     * @callback module:api/DataIntegrationsApi~getEntityKeyIdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get entity key IDs
     * @param {Array.<module:model/EntityKey>} entityKey 
     * @param {module:api/DataIntegrationsApi~getEntityKeyIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getEntityKeyIds(entityKey, callback) {
      let postBody = entityKey;
      // verify the required parameter 'entityKey' is set
      if (entityKey === undefined || entityKey === null) {
        throw new Error("Missing the required parameter 'entityKey' when calling getEntityKeyIds");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/datastore/integration/entityKeyIds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrateEntityAndAssociationData operation.
     * @callback module:api/DataIntegrationsApi~integrateEntityAndAssociationDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Integrate entity and association data
     * @param {Boolean} detailedResults 
     * @param {module:model/BulkDataCreation} bulkDataCreation 
     * @param {module:api/DataIntegrationsApi~integrateEntityAndAssociationDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationResults}
     */
    integrateEntityAndAssociationData(detailedResults, bulkDataCreation, callback) {
      let postBody = bulkDataCreation;
      // verify the required parameter 'detailedResults' is set
      if (detailedResults === undefined || detailedResults === null) {
        throw new Error("Missing the required parameter 'detailedResults' when calling integrateEntityAndAssociationData");
      }
      // verify the required parameter 'bulkDataCreation' is set
      if (bulkDataCreation === undefined || bulkDataCreation === null) {
        throw new Error("Missing the required parameter 'bulkDataCreation' when calling integrateEntityAndAssociationData");
      }

      let pathParams = {
      };
      let queryParams = {
        'detailedResults': detailedResults
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationResults;
      return this.apiClient.callApi(
        '/datastore/integration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
