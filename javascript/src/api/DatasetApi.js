/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OrganizationExternalDatabaseTable from '../model/OrganizationExternalDatabaseTable';
import OrganizationExternalDatabaseTableColumnsPair from '../model/OrganizationExternalDatabaseTableColumnsPair';

/**
* Dataset service.
* @module api/DatasetApi
* @version 0.0.1
*/
export default class DatasetApi {

    /**
    * Constructs a new DatasetApi. 
    * @alias module:api/DatasetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getExternalDatabaseTableWithColumns operation.
     * @callback module:api/DatasetApi~getExternalDatabaseTableWithColumnsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: OrganizationExternalDatabaseTableColumnsPair}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an object containing an OrganizationExternalDatabaseTable object and its OrganizationExternalDatabase columns for an organization
     * @param {String} organizationId 
     * @param {String} tableId 
     * @param {module:api/DatasetApi~getExternalDatabaseTableWithColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: OrganizationExternalDatabaseTableColumnsPair}>}
     */
    getExternalDatabaseTableWithColumns(organizationId, tableId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getExternalDatabaseTableWithColumns");
      }
      // verify the required parameter 'tableId' is set
      if (tableId === undefined || tableId === null) {
        throw new Error("Missing the required parameter 'tableId' when calling getExternalDatabaseTableWithColumns");
      }

      let pathParams = {
        'organizationId': organizationId,
        'tableId': tableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': OrganizationExternalDatabaseTableColumnsPair};
      return this.apiClient.callApi(
        '/datastore/organization-database/{organizationId}/{tableId}/external-database-table/external-database-column', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExternalDatabaseTables operation.
     * @callback module:api/DatasetApi~getExternalDatabaseTablesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizationExternalDatabaseTable>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all OrganizationExternalDatabaseTable objects for an organization
     * @param {String} organizationId 
     * @param {module:api/DatasetApi~getExternalDatabaseTablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizationExternalDatabaseTable>}
     */
    getExternalDatabaseTables(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getExternalDatabaseTables");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrganizationExternalDatabaseTable];
      return this.apiClient.callApi(
        '/datastore/organization-database/{organizationId}/external-database-table', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExternalDatabaseTablesWithColumns operation.
     * @callback module:api/DatasetApi~getExternalDatabaseTablesWithColumnsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: [OrganizationExternalDatabaseColumn]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a map of all OrganizationExternalDatabaseTable objects to OrganizationExternalDatabase columns that are contained within each table.
     * @param {String} organizationId 
     * @param {module:api/DatasetApi~getExternalDatabaseTablesWithColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: [OrganizationExternalDatabaseColumn]}>}
     */
    getExternalDatabaseTablesWithColumns(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getExternalDatabaseTablesWithColumns");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': [OrganizationExternalDatabaseColumn]};
      return this.apiClient.callApi(
        '/datastore/organization-database/{organizationId}/external-database-table/external-database-column', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
