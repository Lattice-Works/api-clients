/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntitySet from '../model/EntitySet';
import EntitySetPropertyMetaData from '../model/EntitySetPropertyMetaData';
import MetadataUpdate from '../model/MetadataUpdate';
import PropertyType from '../model/PropertyType';

/**
* EntitySets service.
* @module api/EntitySetsApi
* @version 0.0.1
*/
export default class EntitySetsApi {

    /**
    * Constructs a new EntitySetsApi. 
    * @alias module:api/EntitySetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addEntitySetsToLinkingEntitySet operation.
     * @callback module:api/EntitySetsApi~addEntitySetsToLinkingEntitySetCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the entity sets as linked entity sets to the linking entity set
     * @param {String} linkingEntitySetId 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/EntitySetsApi~addEntitySetsToLinkingEntitySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    addEntitySetsToLinkingEntitySet(linkingEntitySetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'linkingEntitySetId' is set
      if (linkingEntitySetId === undefined || linkingEntitySetId === null) {
        throw new Error("Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySet");
      }

      let pathParams = {
        'linkingEntitySetId': linkingEntitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/datastore/entity-sets/linking/{linkingEntitySetId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addEntitySetsToLinkingEntitySets operation.
     * @callback module:api/EntitySetsApi~addEntitySetsToLinkingEntitySetsCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the entity sets as linked entity sets to the linking entity sets
     * @param {String} linkingEntitySetId 
     * @param {Object.<String, {String: [String]}>} requestBody 
     * @param {module:api/EntitySetsApi~addEntitySetsToLinkingEntitySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    addEntitySetsToLinkingEntitySets(linkingEntitySetId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'linkingEntitySetId' is set
      if (linkingEntitySetId === undefined || linkingEntitySetId === null) {
        throw new Error("Missing the required parameter 'linkingEntitySetId' when calling addEntitySetsToLinkingEntitySets");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling addEntitySetsToLinkingEntitySets");
      }

      let pathParams = {
        'linkingEntitySetId': linkingEntitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/datastore/entity-sets/linking/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEntitySets operation.
     * @callback module:api/EntitySetsApi~createEntitySetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new EntitySet definitions if they don't exist.
     * @param {Array.<module:model/EntitySet>} entitySet 
     * @param {module:api/EntitySetsApi~createEntitySetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createEntitySets(entitySet, callback) {
      let postBody = entitySet;
      // verify the required parameter 'entitySet' is set
      if (entitySet === undefined || entitySet === null) {
        throw new Error("Missing the required parameter 'entitySet' when calling createEntitySets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/entity-sets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntitySet operation.
     * @callback module:api/EntitySetsApi~deleteEntitySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the EntitySet definition for the given EntitySet UUID.
     * @param {String} entitySetId 
     * @param {module:api/EntitySetsApi~deleteEntitySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEntitySet(entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling deleteEntitySet");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/entity-sets/all/{entitySetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllEntitySetPropertyMetadata operation.
     * @callback module:api/EntitySetsApi~getAllEntitySetPropertyMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: EntitySetPropertyMetaData}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all entity set property metadata.
     * @param {String} entitySetId 
     * @param {module:api/EntitySetsApi~getAllEntitySetPropertyMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: EntitySetPropertyMetaData}>}
     */
    getAllEntitySetPropertyMetadata(entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling getAllEntitySetPropertyMetadata");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': EntitySetPropertyMetaData};
      return this.apiClient.callApi(
        '/datastore/entity-sets/all/{entitySetId}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllEntitySets operation.
     * @callback module:api/EntitySetsApi~getAllEntitySetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntitySet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all EntitySet definitions.
     * @param {module:api/EntitySetsApi~getAllEntitySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntitySet>}
     */
    getAllEntitySets(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntitySet];
      return this.apiClient.callApi(
        '/datastore/entity-sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySet operation.
     * @callback module:api/EntitySetsApi~getEntitySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntitySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the EntitySet definition for the given EntitySet UUID.
     * @param {String} entitySetId 
     * @param {module:api/EntitySetsApi~getEntitySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntitySet}
     */
    getEntitySet(entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling getEntitySet");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntitySet;
      return this.apiClient.callApi(
        '/datastore/entity-sets/all/{entitySetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetId operation.
     * @callback module:api/EntitySetsApi~getEntitySetIdCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the EntitySet UUID for the given EntitySet name.
     * @param {String} entitySetName 
     * @param {module:api/EntitySetsApi~getEntitySetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getEntitySetId(entitySetName, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetName' is set
      if (entitySetName === undefined || entitySetName === null) {
        throw new Error("Missing the required parameter 'entitySetName' when calling getEntitySetId");
      }

      let pathParams = {
        'entitySetName': entitySetName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/datastore/entity-sets/ids/{entitySetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetIds operation.
     * @callback module:api/EntitySetsApi~getEntitySetIdsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get IDs for entity sets given their names.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/EntitySetsApi~getEntitySetIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getEntitySetIds(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/datastore/entity-sets/ids/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetPropertyMetadata operation.
     * @callback module:api/EntitySetsApi~getEntitySetPropertyMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntitySetPropertyMetaData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specified property type metadata for an entity set.
     * @param {String} entitySetId 
     * @param {String} propertyTypeId 
     * @param {module:api/EntitySetsApi~getEntitySetPropertyMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntitySetPropertyMetaData}
     */
    getEntitySetPropertyMetadata(entitySetId, propertyTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling getEntitySetPropertyMetadata");
      }
      // verify the required parameter 'propertyTypeId' is set
      if (propertyTypeId === undefined || propertyTypeId === null) {
        throw new Error("Missing the required parameter 'propertyTypeId' when calling getEntitySetPropertyMetadata");
      }

      let pathParams = {
        'entitySetId': entitySetId,
        'propertyTypeId': propertyTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntitySetPropertyMetaData;
      return this.apiClient.callApi(
        '/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPropertyMetadataForEntitySets operation.
     * @callback module:api/EntitySetsApi~getPropertyMetadataForEntitySetsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: {String: EntitySetPropertyMetaData}}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get property metadata for entity sets.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/EntitySetsApi~getPropertyMetadataForEntitySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: {String: EntitySetPropertyMetaData}}>}
     */
    getPropertyMetadataForEntitySets(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': {'String': EntitySetPropertyMetaData}};
      return this.apiClient.callApi(
        '/datastore/entity-sets/all/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPropertyTypesForEntitySet operation.
     * @callback module:api/EntitySetsApi~getPropertyTypesForEntitySetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: PropertyType}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Property Types for entity set
     * @param {String} entitySetId 
     * @param {module:api/EntitySetsApi~getPropertyTypesForEntitySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: PropertyType}>}
     */
    getPropertyTypesForEntitySet(entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling getPropertyTypesForEntitySet");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': PropertyType};
      return this.apiClient.callApi(
        '/datastore/entity-sets/all/{entitySetId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeEntitySetsFromLinkingEntitySet operation.
     * @callback module:api/EntitySetsApi~removeEntitySetsFromLinkingEntitySetCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes/unlinks the linked entity sets from the linking entity set
     * @param {String} linkingEntitySetId 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/EntitySetsApi~removeEntitySetsFromLinkingEntitySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    removeEntitySetsFromLinkingEntitySet(linkingEntitySetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'linkingEntitySetId' is set
      if (linkingEntitySetId === undefined || linkingEntitySetId === null) {
        throw new Error("Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySet");
      }

      let pathParams = {
        'linkingEntitySetId': linkingEntitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/datastore/entity-sets/linking/{linkingEntitySetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeEntitySetsFromLinkingEntitySets operation.
     * @callback module:api/EntitySetsApi~removeEntitySetsFromLinkingEntitySetsCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes/unlinks the linked entity sets from the linking entity set
     * @param {String} linkingEntitySetId 
     * @param {Object.<String, {String: [String]}>} requestBody 
     * @param {module:api/EntitySetsApi~removeEntitySetsFromLinkingEntitySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    removeEntitySetsFromLinkingEntitySets(linkingEntitySetId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'linkingEntitySetId' is set
      if (linkingEntitySetId === undefined || linkingEntitySetId === null) {
        throw new Error("Missing the required parameter 'linkingEntitySetId' when calling removeEntitySetsFromLinkingEntitySets");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling removeEntitySetsFromLinkingEntitySets");
      }

      let pathParams = {
        'linkingEntitySetId': linkingEntitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/datastore/entity-sets/linking/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEntitySetMetaData operation.
     * @callback module:api/EntitySetsApi~updateEntitySetMetaDataCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the EntitySet definition for the given EntitySet UUID with the given metadata.
     * @param {String} entitySetId 
     * @param {module:model/MetadataUpdate} metadataUpdate 
     * @param {module:api/EntitySetsApi~updateEntitySetMetaDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    updateEntitySetMetaData(entitySetId, metadataUpdate, callback) {
      let postBody = metadataUpdate;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling updateEntitySetMetaData");
      }
      // verify the required parameter 'metadataUpdate' is set
      if (metadataUpdate === undefined || metadataUpdate === null) {
        throw new Error("Missing the required parameter 'metadataUpdate' when calling updateEntitySetMetaData");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/datastore/entity-sets/all/{entitySetId}/metadata/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEntitySetPropertyMetadata operation.
     * @callback module:api/EntitySetsApi~updateEntitySetPropertyMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the property type metadata for the given entity set.
     * @param {String} entitySetId 
     * @param {String} propertyTypeId 
     * @param {module:model/MetadataUpdate} metadataUpdate 
     * @param {module:api/EntitySetsApi~updateEntitySetPropertyMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEntitySetPropertyMetadata(entitySetId, propertyTypeId, metadataUpdate, callback) {
      let postBody = metadataUpdate;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling updateEntitySetPropertyMetadata");
      }
      // verify the required parameter 'propertyTypeId' is set
      if (propertyTypeId === undefined || propertyTypeId === null) {
        throw new Error("Missing the required parameter 'propertyTypeId' when calling updateEntitySetPropertyMetadata");
      }
      // verify the required parameter 'metadataUpdate' is set
      if (metadataUpdate === undefined || metadataUpdate === null) {
        throw new Error("Missing the required parameter 'metadataUpdate' when calling updateEntitySetPropertyMetadata");
      }

      let pathParams = {
        'entitySetId': entitySetId,
        'propertyTypeId': propertyTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
