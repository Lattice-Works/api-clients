/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CollectionTemplateType from '../model/CollectionTemplateType';
import EntitySetCollection from '../model/EntitySetCollection';
import EntityTypeCollection from '../model/EntityTypeCollection';
import MetadataUpdate from '../model/MetadataUpdate';

/**
* Collections service.
* @module api/CollectionsApi
* @version 0.0.1
*/
export default class CollectionsApi {

    /**
    * Constructs a new CollectionsApi. 
    * @alias module:api/CollectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTypeToEntityTypeCollectionTemplate operation.
     * @callback module:api/CollectionsApi~addTypeToEntityTypeCollectionTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Appends type to template of the specified EntityTypeCollection
     * @param {String} entityTypeCollectionId 
     * @param {module:model/CollectionTemplateType} collectionTemplateType 
     * @param {module:api/CollectionsApi~addTypeToEntityTypeCollectionTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addTypeToEntityTypeCollectionTemplate(entityTypeCollectionId, collectionTemplateType, callback) {
      let postBody = collectionTemplateType;
      // verify the required parameter 'entityTypeCollectionId' is set
      if (entityTypeCollectionId === undefined || entityTypeCollectionId === null) {
        throw new Error("Missing the required parameter 'entityTypeCollectionId' when calling addTypeToEntityTypeCollectionTemplate");
      }
      // verify the required parameter 'collectionTemplateType' is set
      if (collectionTemplateType === undefined || collectionTemplateType === null) {
        throw new Error("Missing the required parameter 'collectionTemplateType' when calling addTypeToEntityTypeCollectionTemplate");
      }

      let pathParams = {
        'entityTypeCollectionId': entityTypeCollectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/collections/entity/type/{entityTypeCollectionId}/template', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEntitySetCollection operation.
     * @callback module:api/CollectionsApi~createEntitySetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new EntitySetCollection
     * @param {module:model/EntitySetCollection} entitySetCollection 
     * @param {module:api/CollectionsApi~createEntitySetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    createEntitySetCollection(entitySetCollection, callback) {
      let postBody = entitySetCollection;
      // verify the required parameter 'entitySetCollection' is set
      if (entitySetCollection === undefined || entitySetCollection === null) {
        throw new Error("Missing the required parameter 'entitySetCollection' when calling createEntitySetCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/datastore/collections/entity/set', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEntityTypeCollection operation.
     * @callback module:api/CollectionsApi~createEntityTypeCollectionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new EntityTypeCollection
     * @param {module:model/EntityTypeCollection} entityTypeCollection 
     * @param {module:api/CollectionsApi~createEntityTypeCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    createEntityTypeCollection(entityTypeCollection, callback) {
      let postBody = entityTypeCollection;
      // verify the required parameter 'entityTypeCollection' is set
      if (entityTypeCollection === undefined || entityTypeCollection === null) {
        throw new Error("Missing the required parameter 'entityTypeCollection' when calling createEntityTypeCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/datastore/collections/entity/type', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntitySetCollection operation.
     * @callback module:api/CollectionsApi~deleteEntitySetCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified EntitySetCollection
     * @param {String} entitySetCollectionId 
     * @param {module:api/CollectionsApi~deleteEntitySetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEntitySetCollection(entitySetCollectionId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetCollectionId' is set
      if (entitySetCollectionId === undefined || entitySetCollectionId === null) {
        throw new Error("Missing the required parameter 'entitySetCollectionId' when calling deleteEntitySetCollection");
      }

      let pathParams = {
        'entitySetCollectionId': entitySetCollectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/collections/entity/set/{entitySetCollectionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntityTypeCollection operation.
     * @callback module:api/CollectionsApi~deleteEntityTypeCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified EntityTypeCollection
     * @param {String} entityTypeCollectionId 
     * @param {module:api/CollectionsApi~deleteEntityTypeCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEntityTypeCollection(entityTypeCollectionId, callback) {
      let postBody = null;
      // verify the required parameter 'entityTypeCollectionId' is set
      if (entityTypeCollectionId === undefined || entityTypeCollectionId === null) {
        throw new Error("Missing the required parameter 'entityTypeCollectionId' when calling deleteEntityTypeCollection");
      }

      let pathParams = {
        'entityTypeCollectionId': entityTypeCollectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/collections/entity/type/{entityTypeCollectionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllEntitySetCollections operation.
     * @callback module:api/CollectionsApi~getAllEntitySetCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntitySetCollection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all EntitySetCollection objects
     * @param {module:api/CollectionsApi~getAllEntitySetCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntitySetCollection>}
     */
    getAllEntitySetCollections(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntitySetCollection];
      return this.apiClient.callApi(
        '/datastore/collections/entity/set', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllEntityTypeCollections operation.
     * @callback module:api/CollectionsApi~getAllEntityTypeCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityTypeCollection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all EntityTypeCollection objects
     * @param {module:api/CollectionsApi~getAllEntityTypeCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityTypeCollection>}
     */
    getAllEntityTypeCollections(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntityTypeCollection];
      return this.apiClient.callApi(
        '/datastore/collections/entity/type', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetCollection operation.
     * @callback module:api/CollectionsApi~getEntitySetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntitySetCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the EntitySetCollection object for a given id
     * @param {String} entitySetCollectionId 
     * @param {module:api/CollectionsApi~getEntitySetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntitySetCollection}
     */
    getEntitySetCollection(entitySetCollectionId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetCollectionId' is set
      if (entitySetCollectionId === undefined || entitySetCollectionId === null) {
        throw new Error("Missing the required parameter 'entitySetCollectionId' when calling getEntitySetCollection");
      }

      let pathParams = {
        'entitySetCollectionId': entitySetCollectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntitySetCollection;
      return this.apiClient.callApi(
        '/datastore/collections/entity/set/{entitySetCollectionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetCollectionsOfType operation.
     * @callback module:api/CollectionsApi~getEntitySetCollectionsOfTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntitySetCollection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all authorized EntitySetCollections for a given EntityTypeCollection id
     * @param {String} entitySetCollectionId 
     * @param {module:api/CollectionsApi~getEntitySetCollectionsOfTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntitySetCollection>}
     */
    getEntitySetCollectionsOfType(entitySetCollectionId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetCollectionId' is set
      if (entitySetCollectionId === undefined || entitySetCollectionId === null) {
        throw new Error("Missing the required parameter 'entitySetCollectionId' when calling getEntitySetCollectionsOfType");
      }

      let pathParams = {
        'entitySetCollectionId': entitySetCollectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntitySetCollection];
      return this.apiClient.callApi(
        '/datastore/collections/entity/set/entity/type/{entitySetCollectionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntityTypeCollection operation.
     * @callback module:api/CollectionsApi~getEntityTypeCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityTypeCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the EntityTypeCollection object for a given id
     * @param {String} entityTypeCollectionId 
     * @param {module:api/CollectionsApi~getEntityTypeCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityTypeCollection}
     */
    getEntityTypeCollection(entityTypeCollectionId, callback) {
      let postBody = null;
      // verify the required parameter 'entityTypeCollectionId' is set
      if (entityTypeCollectionId === undefined || entityTypeCollectionId === null) {
        throw new Error("Missing the required parameter 'entityTypeCollectionId' when calling getEntityTypeCollection");
      }

      let pathParams = {
        'entityTypeCollectionId': entityTypeCollectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityTypeCollection;
      return this.apiClient.callApi(
        '/datastore/collections/entity/type/{entityTypeCollectionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTypeFromEntityTypeCollectionTemplate operation.
     * @callback module:api/CollectionsApi~removeTypeFromEntityTypeCollectionTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a key from an EntityTypeCollection template
     * @param {String} entityTypeCollectionId 
     * @param {String} typeId 
     * @param {module:api/CollectionsApi~removeTypeFromEntityTypeCollectionTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeTypeFromEntityTypeCollectionTemplate(entityTypeCollectionId, typeId, callback) {
      let postBody = null;
      // verify the required parameter 'entityTypeCollectionId' is set
      if (entityTypeCollectionId === undefined || entityTypeCollectionId === null) {
        throw new Error("Missing the required parameter 'entityTypeCollectionId' when calling removeTypeFromEntityTypeCollectionTemplate");
      }
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling removeTypeFromEntityTypeCollectionTemplate");
      }

      let pathParams = {
        'entityTypeCollectionId': entityTypeCollectionId,
        'typeId': typeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/collections/entity/type/{entityTypeCollectionId}/template/{typeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEntitySetCollectionMetadata operation.
     * @callback module:api/CollectionsApi~updateEntitySetCollectionMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates metadata of the specified EntitySetCollection
     * @param {String} entitySetCollectionId 
     * @param {module:model/MetadataUpdate} metadataUpdate 
     * @param {module:api/CollectionsApi~updateEntitySetCollectionMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEntitySetCollectionMetadata(entitySetCollectionId, metadataUpdate, callback) {
      let postBody = metadataUpdate;
      // verify the required parameter 'entitySetCollectionId' is set
      if (entitySetCollectionId === undefined || entitySetCollectionId === null) {
        throw new Error("Missing the required parameter 'entitySetCollectionId' when calling updateEntitySetCollectionMetadata");
      }
      // verify the required parameter 'metadataUpdate' is set
      if (metadataUpdate === undefined || metadataUpdate === null) {
        throw new Error("Missing the required parameter 'metadataUpdate' when calling updateEntitySetCollectionMetadata");
      }

      let pathParams = {
        'entitySetCollectionId': entitySetCollectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/collections/entity/set/{entitySetCollectionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEntitySetCollectionTemplate operation.
     * @callback module:api/CollectionsApi~updateEntitySetCollectionTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates template of the specified EntitySetCollection
     * @param {String} entitySetCollectionId 
     * @param {Object.<String, {String: String}>} requestBody 
     * @param {module:api/CollectionsApi~updateEntitySetCollectionTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEntitySetCollectionTemplate(entitySetCollectionId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'entitySetCollectionId' is set
      if (entitySetCollectionId === undefined || entitySetCollectionId === null) {
        throw new Error("Missing the required parameter 'entitySetCollectionId' when calling updateEntitySetCollectionTemplate");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling updateEntitySetCollectionTemplate");
      }

      let pathParams = {
        'entitySetCollectionId': entitySetCollectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/collections/entity/set/{entitySetCollectionId}/template', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEntityTypeCollectionMetadata operation.
     * @callback module:api/CollectionsApi~updateEntityTypeCollectionMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates metadata of the specified EntityTypeCollection
     * @param {String} entityTypeCollectionId 
     * @param {module:model/MetadataUpdate} metadataUpdate 
     * @param {module:api/CollectionsApi~updateEntityTypeCollectionMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEntityTypeCollectionMetadata(entityTypeCollectionId, metadataUpdate, callback) {
      let postBody = metadataUpdate;
      // verify the required parameter 'entityTypeCollectionId' is set
      if (entityTypeCollectionId === undefined || entityTypeCollectionId === null) {
        throw new Error("Missing the required parameter 'entityTypeCollectionId' when calling updateEntityTypeCollectionMetadata");
      }
      // verify the required parameter 'metadataUpdate' is set
      if (metadataUpdate === undefined || metadataUpdate === null) {
        throw new Error("Missing the required parameter 'metadataUpdate' when calling updateEntityTypeCollectionMetadata");
      }

      let pathParams = {
        'entityTypeCollectionId': entityTypeCollectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/collections/entity/type/{entityTypeCollectionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
