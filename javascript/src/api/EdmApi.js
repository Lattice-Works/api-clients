/**
 * OpenLattice API
 * OpenLattice API
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociationType from '../model/AssociationType';
import EDM from '../model/EDM';
import EDMdiff from '../model/EDMdiff';
import EdmRequest from '../model/EdmRequest';
import EntitySet from '../model/EntitySet';
import EntityType from '../model/EntityType';
import MetaDataUpdate from '../model/MetaDataUpdate';
import PropertyType from '../model/PropertyType';
import PropertyUsageSummary from '../model/PropertyUsageSummary';
import Schema from '../model/Schema';

/**
* Edm service.
* @module api/EdmApi
* @version 0.0.1
*/
export default class EdmApi {

    /**
    * Constructs a new EdmApi. 
    * @alias module:api/EdmApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addDstEntityTypeToAssociationType operation.
     * @callback module:api/EdmApi~addDstEntityTypeToAssociationTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the AssociationType dst entity types for the given AssociationType UUID by adding the given EntityType UUID.
     * @param {String} associationTypeId 
     * @param {String} entityTypeId 
     * @param {module:api/EdmApi~addDstEntityTypeToAssociationTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addDstEntityTypeToAssociationType(associationTypeId, entityTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'associationTypeId' is set
      if (associationTypeId === undefined || associationTypeId === null) {
        throw new Error("Missing the required parameter 'associationTypeId' when calling addDstEntityTypeToAssociationType");
      }
      // verify the required parameter 'entityTypeId' is set
      if (entityTypeId === undefined || entityTypeId === null) {
        throw new Error("Missing the required parameter 'entityTypeId' when calling addDstEntityTypeToAssociationType");
      }

      let pathParams = {
        'associationTypeId': associationTypeId,
        'entityTypeId': entityTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/association/type/{associationTypeId}/dst/{entityTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addPropertyTypeToEntityType operation.
     * @callback module:api/EdmApi~addPropertyTypeToEntityTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the EntityType definition for the given EntityType UUID by adding the given PropertyType UUID.
     * @param {String} entityTypeId 
     * @param {String} propertyTypeId 
     * @param {module:api/EdmApi~addPropertyTypeToEntityTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addPropertyTypeToEntityType(entityTypeId, propertyTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'entityTypeId' is set
      if (entityTypeId === undefined || entityTypeId === null) {
        throw new Error("Missing the required parameter 'entityTypeId' when calling addPropertyTypeToEntityType");
      }
      // verify the required parameter 'propertyTypeId' is set
      if (propertyTypeId === undefined || propertyTypeId === null) {
        throw new Error("Missing the required parameter 'propertyTypeId' when calling addPropertyTypeToEntityType");
      }

      let pathParams = {
        'entityTypeId': entityTypeId,
        'propertyTypeId': propertyTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addSrcEntityTypeToAssociationType operation.
     * @callback module:api/EdmApi~addSrcEntityTypeToAssociationTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the AssociationType src entity types for the given AssociationType UUID by adding the given EntityType UUID.
     * @param {String} associationTypeId 
     * @param {String} entityTypeId 
     * @param {module:api/EdmApi~addSrcEntityTypeToAssociationTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addSrcEntityTypeToAssociationType(associationTypeId, entityTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'associationTypeId' is set
      if (associationTypeId === undefined || associationTypeId === null) {
        throw new Error("Missing the required parameter 'associationTypeId' when calling addSrcEntityTypeToAssociationType");
      }
      // verify the required parameter 'entityTypeId' is set
      if (entityTypeId === undefined || entityTypeId === null) {
        throw new Error("Missing the required parameter 'entityTypeId' when calling addSrcEntityTypeToAssociationType");
      }

      let pathParams = {
        'associationTypeId': associationTypeId,
        'entityTypeId': entityTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/association/type/{associationTypeId}/src/{entityTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAssociationType operation.
     * @callback module:api/EdmApi~createAssociationTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new AssociationType definition, if it doesn\&quot;t exist.
     * @param {Array.<AssociationType>} associationType 
     * @param {module:api/EdmApi~createAssociationTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createAssociationType(associationType, callback) {
      let postBody = associationType;
      // verify the required parameter 'associationType' is set
      if (associationType === undefined || associationType === null) {
        throw new Error("Missing the required parameter 'associationType' when calling createAssociationType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/association/type/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmptySchema operation.
     * @callback module:api/EdmApi~createEmptySchemaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an empty schema, if it doesn&#39;t exist. If schema exists then no action is taken.
     * @param {String} namespace 
     * @param {String} name 
     * @param {module:api/EdmApi~createEmptySchemaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createEmptySchema(namespace, name, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createEmptySchema");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createEmptySchema");
      }

      let pathParams = {
        'namespace': namespace,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/schema/{namespace}/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEntitySets operation.
     * @callback module:api/EdmApi~createEntitySetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new EntitySet definitions if they don\&quot;t exist.
     * @param {Array.<EntitySet>} entitySet 
     * @param {module:api/EdmApi~createEntitySetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createEntitySets(entitySet, callback) {
      let postBody = entitySet;
      // verify the required parameter 'entitySet' is set
      if (entitySet === undefined || entitySet === null) {
        throw new Error("Missing the required parameter 'entitySet' when calling createEntitySets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/entity/set', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEntityType operation.
     * @callback module:api/EdmApi~createEntityTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new EntityType definition, if it doesn&#39;t exist.
     * @param {module:model/EntityType} entityType 
     * @param {module:api/EdmApi~createEntityTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createEntityType(entityType, callback) {
      let postBody = entityType;
      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling createEntityType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/entity/type/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPropertyType operation.
     * @callback module:api/EdmApi~createPropertyTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new PropertyType definition, if it doesn\&quot;t exist.
     * @param {module:model/PropertyType} propertyType 
     * @param {module:api/EdmApi~createPropertyTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createPropertyType(propertyType, callback) {
      let postBody = propertyType;
      // verify the required parameter 'propertyType' is set
      if (propertyType === undefined || propertyType === null) {
        throw new Error("Missing the required parameter 'propertyType' when calling createPropertyType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/property/type/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSchemaIfNotExists operation.
     * @callback module:api/EdmApi~createSchemaIfNotExistsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an empty schema, if it doesn&#39;t exist. If schema exists then no action is taken.
     * @param {module:model/Schema} schema 
     * @param {module:api/EdmApi~createSchemaIfNotExistsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createSchemaIfNotExists(schema, callback) {
      let postBody = schema;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling createSchemaIfNotExists");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/schema', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssociationType operation.
     * @callback module:api/EdmApi~deleteAssociationTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the AssociationType definition for the given AssociationType UUID.
     * @param {String} associationTypeId 
     * @param {module:api/EdmApi~deleteAssociationTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAssociationType(associationTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'associationTypeId' is set
      if (associationTypeId === undefined || associationTypeId === null) {
        throw new Error("Missing the required parameter 'associationTypeId' when calling deleteAssociationType");
      }

      let pathParams = {
        'associationTypeId': associationTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/association/type/{associationTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntitySet operation.
     * @callback module:api/EdmApi~deleteEntitySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the EntitySet definition for the given EntitySet UUID.
     * @param {String} entitySetId 
     * @param {module:api/EdmApi~deleteEntitySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEntitySet(entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling deleteEntitySet");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/entity/set/{entitySetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntityType operation.
     * @callback module:api/EdmApi~deleteEntityTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the EntityType definition for the given EntityType UUID.
     * @param {String} entityTypeId 
     * @param {module:api/EdmApi~deleteEntityTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEntityType(entityTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'entityTypeId' is set
      if (entityTypeId === undefined || entityTypeId === null) {
        throw new Error("Missing the required parameter 'entityTypeId' when calling deleteEntityType");
      }

      let pathParams = {
        'entityTypeId': entityTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/entity/type/{entityTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePropertyType operation.
     * @callback module:api/EdmApi~deletePropertyTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the PropertyType definition for the given PropertyType UUID.
     * @param {String} propertyTypeId 
     * @param {module:api/EdmApi~deletePropertyTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePropertyType(propertyTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'propertyTypeId' is set
      if (propertyTypeId === undefined || propertyTypeId === null) {
        throw new Error("Missing the required parameter 'propertyTypeId' when calling deletePropertyType");
      }

      let pathParams = {
        'propertyTypeId': propertyTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/property/type/{propertyTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forceDeletePropertyType operation.
     * @callback module:api/EdmApi~forceDeletePropertyTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the PropertyType definition for the given PropertyType UUID regardless of whether or not there is data associated with it.
     * @param {String} propertyTypeId 
     * @param {module:api/EdmApi~forceDeletePropertyTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    forceDeletePropertyType(propertyTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'propertyTypeId' is set
      if (propertyTypeId === undefined || propertyTypeId === null) {
        throw new Error("Missing the required parameter 'propertyTypeId' when calling forceDeletePropertyType");
      }

      let pathParams = {
        'propertyTypeId': propertyTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/property/type/{propertyTypeId}/force', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forceRemovePropertyTypeFromEntityType operation.
     * @callback module:api/EdmApi~forceRemovePropertyTypeFromEntityTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the EntityType definition for the given EntityType UUID by removing the given PropertyType UUID, regardless of whether or not there is data associated with the entity type.
     * @param {String} entityTypeId 
     * @param {String} propertyTypeId 
     * @param {module:api/EdmApi~forceRemovePropertyTypeFromEntityTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    forceRemovePropertyTypeFromEntityType(entityTypeId, propertyTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'entityTypeId' is set
      if (entityTypeId === undefined || entityTypeId === null) {
        throw new Error("Missing the required parameter 'entityTypeId' when calling forceRemovePropertyTypeFromEntityType");
      }
      // verify the required parameter 'propertyTypeId' is set
      if (propertyTypeId === undefined || propertyTypeId === null) {
        throw new Error("Missing the required parameter 'propertyTypeId' when calling forceRemovePropertyTypeFromEntityType");
      }

      let pathParams = {
        'entityTypeId': entityTypeId,
        'propertyTypeId': propertyTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}/force', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAssociationEntityTypes operation.
     * @callback module:api/EdmApi~getAllAssociationEntityTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all association EntityType definitions.
     * @param {module:api/EdmApi~getAllAssociationEntityTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssociationType>}
     */
    getAllAssociationEntityTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssociationType];
      return this.apiClient.callApi(
        '/datastore/edm/association/type/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAvailableAssociationTypes operation.
     * @callback module:api/EdmApi~getAllAvailableAssociationTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available associations for the given AssociationType UUID.
     * @param {String} associationTypeId 
     * @param {module:api/EdmApi~getAllAvailableAssociationTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssociationType>}
     */
    getAllAvailableAssociationTypes(associationTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'associationTypeId' is set
      if (associationTypeId === undefined || associationTypeId === null) {
        throw new Error("Missing the required parameter 'associationTypeId' when calling getAllAvailableAssociationTypes");
      }

      let pathParams = {
        'associationTypeId': associationTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssociationType];
      return this.apiClient.callApi(
        '/datastore/edm/association/type/{associationTypeId}/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllEntitySetPropertyMetadata operation.
     * @callback module:api/EdmApi~getAllEntitySetPropertyMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertyType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all property type metadata for an entity set.
     * @param {String} entitySetId 
     * @param {module:api/EdmApi~getAllEntitySetPropertyMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertyType>}
     */
    getAllEntitySetPropertyMetadata(entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling getAllEntitySetPropertyMetadata");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertyType];
      return this.apiClient.callApi(
        '/datastore/edm/entity/set/{entitySetId}/property/type', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllEntitySets operation.
     * @callback module:api/EdmApi~getAllEntitySetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntitySet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all EntitySet definitions.
     * @param {module:api/EdmApi~getAllEntitySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntitySet>}
     */
    getAllEntitySets(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntitySet];
      return this.apiClient.callApi(
        '/datastore/edm/entity/set', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllEntityTypes operation.
     * @callback module:api/EdmApi~getAllEntityTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all EntityType definitions.
     * @param {module:api/EdmApi~getAllEntityTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityType>}
     */
    getAllEntityTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntityType];
      return this.apiClient.callApi(
        '/datastore/edm/entity/type/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPropertyTypes operation.
     * @callback module:api/EdmApi~getAllPropertyTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertyType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all PropertyType definitions.
     * @param {module:api/EdmApi~getAllPropertyTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertyType>}
     */
    getAllPropertyTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertyType];
      return this.apiClient.callApi(
        '/datastore/edm/property/type/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPropertyTypesInNamespace operation.
     * @callback module:api/EdmApi~getAllPropertyTypesInNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertyType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all PropertyType definitions under the given namespace.
     * @param {String} namespace 
     * @param {module:api/EdmApi~getAllPropertyTypesInNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertyType>}
     */
    getAllPropertyTypesInNamespace(namespace, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getAllPropertyTypesInNamespace");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertyType];
      return this.apiClient.callApi(
        '/datastore/edm/property/type/namespace/{namespace}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPropertyUsageSummaries operation.
     * @callback module:api/EdmApi~getAllPropertyUsageSummariesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: PropertyUsageSummary}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Property Usage Summary for all properties.
     * @param {module:api/EdmApi~getAllPropertyUsageSummariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: PropertyUsageSummary}>}
     */
    getAllPropertyUsageSummaries(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': PropertyUsageSummary};
      return this.apiClient.callApi(
        '/datastore/edm/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssociationType operation.
     * @callback module:api/EdmApi~getAssociationTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the AssociationType definition for the given AssociationType UUID.
     * @param {String} associationTypeId 
     * @param {module:api/EdmApi~getAssociationTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationType}
     */
    getAssociationType(associationTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'associationTypeId' is set
      if (associationTypeId === undefined || associationTypeId === null) {
        throw new Error("Missing the required parameter 'associationTypeId' when calling getAssociationType");
      }

      let pathParams = {
        'associationTypeId': associationTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationType;
      return this.apiClient.callApi(
        '/datastore/edm/association/type/{associationTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssociationTypeDetails operation.
     * @callback module:api/EdmApi~getAssociationTypeDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about the AssociationType for the given AssociationType UUID.
     * @param {String} associationTypeId 
     * @param {module:api/EdmApi~getAssociationTypeDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationType}
     */
    getAssociationTypeDetails(associationTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'associationTypeId' is set
      if (associationTypeId === undefined || associationTypeId === null) {
        throw new Error("Missing the required parameter 'associationTypeId' when calling getAssociationTypeDetails");
      }

      let pathParams = {
        'associationTypeId': associationTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationType;
      return this.apiClient.callApi(
        '/datastore/edm/association/type/{associationTypeId}/detailed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntityDataModel operation.
     * @callback module:api/EdmApi~getEntityDataModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EDM} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the entity data model, including namespaces, schemas, entity types, association types, and property types.
     * @param {module:api/EdmApi~getEntityDataModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EDM}
     */
    getEntityDataModel(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EDM;
      return this.apiClient.callApi(
        '/datastore/edm/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntityDataModelDiff operation.
     * @callback module:api/EdmApi~getEntityDataModelDiffCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EDMdiff} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the changes between the existing entity data model and the entity data model passed in, including schemas, association types, entity types, and property types.
     * @param {module:model/EDMdiff} eDMdiff 
     * @param {module:api/EdmApi~getEntityDataModelDiffCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EDMdiff}
     */
    getEntityDataModelDiff(eDMdiff, callback) {
      let postBody = eDMdiff;
      // verify the required parameter 'eDMdiff' is set
      if (eDMdiff === undefined || eDMdiff === null) {
        throw new Error("Missing the required parameter 'eDMdiff' when calling getEntityDataModelDiff");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EDMdiff;
      return this.apiClient.callApi(
        '/datastore/edm/diff/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySet operation.
     * @callback module:api/EdmApi~getEntitySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntitySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the EntitySet definition for the given EntitySet UUID.
     * @param {String} entitySetId 
     * @param {module:api/EdmApi~getEntitySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntitySet}
     */
    getEntitySet(entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling getEntitySet");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntitySet;
      return this.apiClient.callApi(
        '/datastore/edm/entity/set/{entitySetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetId operation.
     * @callback module:api/EdmApi~getEntitySetIdCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the EntitySet UUID for the given EntitySet name.
     * @param {String} entitySetName 
     * @param {module:api/EdmApi~getEntitySetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getEntitySetId(entitySetName, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetName' is set
      if (entitySetName === undefined || entitySetName === null) {
        throw new Error("Missing the required parameter 'entitySetName' when calling getEntitySetId");
      }

      let pathParams = {
        'entitySetName': entitySetName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/datastore/edm/ids/entity/set/{entitySetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetPropertyMetadata operation.
     * @callback module:api/EdmApi~getEntitySetPropertyMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specified property type metadata for an entity set.
     * @param {String} entitySetId 
     * @param {String} propertyTypeId 
     * @param {module:api/EdmApi~getEntitySetPropertyMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyType}
     */
    getEntitySetPropertyMetadata(entitySetId, propertyTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling getEntitySetPropertyMetadata");
      }
      // verify the required parameter 'propertyTypeId' is set
      if (propertyTypeId === undefined || propertyTypeId === null) {
        throw new Error("Missing the required parameter 'propertyTypeId' when calling getEntitySetPropertyMetadata");
      }

      let pathParams = {
        'entitySetId': entitySetId,
        'propertyTypeId': propertyTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyType;
      return this.apiClient.callApi(
        '/datastore/edm/entity/set/{entitySetId}/property/type/{propertyTypeId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntityType operation.
     * @callback module:api/EdmApi~getEntityTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the EntityType definition for the given EntityType UUID.
     * @param {String} entityTypeId 
     * @param {module:api/EdmApi~getEntityTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityType}
     */
    getEntityType(entityTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'entityTypeId' is set
      if (entityTypeId === undefined || entityTypeId === null) {
        throw new Error("Missing the required parameter 'entityTypeId' when calling getEntityType");
      }

      let pathParams = {
        'entityTypeId': entityTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityType;
      return this.apiClient.callApi(
        '/datastore/edm/entity/type/{entityTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntityTypeHierarchy operation.
     * @callback module:api/EdmApi~getEntityTypeHierarchyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the EntityType hierarchy for the given EntityType UUID.
     * @param {String} entityTypeId 
     * @param {module:api/EdmApi~getEntityTypeHierarchyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEntityTypeHierarchy(entityTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'entityTypeId' is set
      if (entityTypeId === undefined || entityTypeId === null) {
        throw new Error("Missing the required parameter 'entityTypeId' when calling getEntityTypeHierarchy");
      }

      let pathParams = {
        'entityTypeId': entityTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/entity/type/{entityTypeId}/hierarchy', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntityTypeId operation.
     * @callback module:api/EdmApi~getEntityTypeIdCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the EntityType UUID for the given EntityType FQN.
     * @param {String} namespace 
     * @param {String} name 
     * @param {module:api/EdmApi~getEntityTypeIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getEntityTypeId(namespace, name, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getEntityTypeId");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getEntityTypeId");
      }

      let pathParams = {
        'namespace': namespace,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/datastore/edm/ids/entity/type/{namespace}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPropertyType operation.
     * @callback module:api/EdmApi~getPropertyTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the PropertyType definition for the given PropertyType UUID.
     * @param {String} propertyTypeId 
     * @param {module:api/EdmApi~getPropertyTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyType}
     */
    getPropertyType(propertyTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'propertyTypeId' is set
      if (propertyTypeId === undefined || propertyTypeId === null) {
        throw new Error("Missing the required parameter 'propertyTypeId' when calling getPropertyType");
      }

      let pathParams = {
        'propertyTypeId': propertyTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyType;
      return this.apiClient.callApi(
        '/datastore/edm/property/type/{propertyTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPropertyTypeId operation.
     * @callback module:api/EdmApi~getPropertyTypeIdCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the PropertyType UUID for the given PropertyType FQN.
     * @param {String} namespace 
     * @param {String} name 
     * @param {module:api/EdmApi~getPropertyTypeIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getPropertyTypeId(namespace, name, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getPropertyTypeId");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getPropertyTypeId");
      }

      let pathParams = {
        'namespace': namespace,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/datastore/edm/ids/property/type/{namespace}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPropertyUsageSummary operation.
     * @callback module:api/EdmApi~getPropertyUsageSummaryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertyUsageSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Property Usage Summary for property with given ID.
     * @param {String} propertyTypeId 
     * @param {module:api/EdmApi~getPropertyUsageSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertyUsageSummary>}
     */
    getPropertyUsageSummary(propertyTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'propertyTypeId' is set
      if (propertyTypeId === undefined || propertyTypeId === null) {
        throw new Error("Missing the required parameter 'propertyTypeId' when calling getPropertyUsageSummary");
      }

      let pathParams = {
        'propertyTypeId': propertyTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertyUsageSummary];
      return this.apiClient.callApi(
        '/datastore/edm/summary/{propertyTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchemaContents operation.
     * @callback module:api/EdmApi~getSchemaContentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Schema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the schema contents for a corresponding namespace and name.
     * @param {String} namespace 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.fileType  (default to &#39;yaml&#39;)
     * @param {module:api/EdmApi~getSchemaContentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schema}
     */
    getSchemaContents(namespace, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getSchemaContents");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getSchemaContents");
      }

      let pathParams = {
        'namespace': namespace,
        'name': name
      };
      let queryParams = {
        'fileType': opts['fileType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Schema;
      return this.apiClient.callApi(
        '/datastore/edm/schema/{namespace}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchemas operation.
     * @callback module:api/EdmApi~getSchemasCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all schemas.
     * @param {module:api/EdmApi~getSchemasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schema>}
     */
    getSchemas(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Schema];
      return this.apiClient.callApi(
        '/datastore/edm/schema', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchemasInNamespace operation.
     * @callback module:api/EdmApi~getSchemasInNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all schemas associated with a given namespace and accessible by the caller.
     * @param {String} namespace 
     * @param {module:api/EdmApi~getSchemasInNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schema>}
     */
    getSchemasInNamespace(namespace, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getSchemasInNamespace");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Schema];
      return this.apiClient.callApi(
        '/datastore/edm/schema/{namespace}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeDstEntityTypeFromAssociationType operation.
     * @callback module:api/EdmApi~removeDstEntityTypeFromAssociationTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the AssociationType dst entity types for the given AssociationType UUID by removing the given EntityType UUID.
     * @param {String} associationTypeId 
     * @param {String} entityTypeId 
     * @param {module:api/EdmApi~removeDstEntityTypeFromAssociationTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeDstEntityTypeFromAssociationType(associationTypeId, entityTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'associationTypeId' is set
      if (associationTypeId === undefined || associationTypeId === null) {
        throw new Error("Missing the required parameter 'associationTypeId' when calling removeDstEntityTypeFromAssociationType");
      }
      // verify the required parameter 'entityTypeId' is set
      if (entityTypeId === undefined || entityTypeId === null) {
        throw new Error("Missing the required parameter 'entityTypeId' when calling removeDstEntityTypeFromAssociationType");
      }

      let pathParams = {
        'associationTypeId': associationTypeId,
        'entityTypeId': entityTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/association/type/{associationTypeId}/dst/{entityTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removePropertyTypeFromEntityType operation.
     * @callback module:api/EdmApi~removePropertyTypeFromEntityTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the EntityType definition for the given EntityType UUID by removing the given PropertyType UUID.
     * @param {String} entityTypeId 
     * @param {String} propertyTypeId 
     * @param {module:api/EdmApi~removePropertyTypeFromEntityTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removePropertyTypeFromEntityType(entityTypeId, propertyTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'entityTypeId' is set
      if (entityTypeId === undefined || entityTypeId === null) {
        throw new Error("Missing the required parameter 'entityTypeId' when calling removePropertyTypeFromEntityType");
      }
      // verify the required parameter 'propertyTypeId' is set
      if (propertyTypeId === undefined || propertyTypeId === null) {
        throw new Error("Missing the required parameter 'propertyTypeId' when calling removePropertyTypeFromEntityType");
      }

      let pathParams = {
        'entityTypeId': entityTypeId,
        'propertyTypeId': propertyTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeSrcEntityTypeFromAssociationType operation.
     * @callback module:api/EdmApi~removeSrcEntityTypeFromAssociationTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the AssociationType src entity types for the given AssociationType UUID by removing the given EntityType UUID.
     * @param {String} associationTypeId 
     * @param {String} entityTypeId 
     * @param {module:api/EdmApi~removeSrcEntityTypeFromAssociationTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeSrcEntityTypeFromAssociationType(associationTypeId, entityTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'associationTypeId' is set
      if (associationTypeId === undefined || associationTypeId === null) {
        throw new Error("Missing the required parameter 'associationTypeId' when calling removeSrcEntityTypeFromAssociationType");
      }
      // verify the required parameter 'entityTypeId' is set
      if (entityTypeId === undefined || entityTypeId === null) {
        throw new Error("Missing the required parameter 'entityTypeId' when calling removeSrcEntityTypeFromAssociationType");
      }

      let pathParams = {
        'associationTypeId': associationTypeId,
        'entityTypeId': entityTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/association/type/{associationTypeId}/src/{entityTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reorderPropertyTypesInEntityType operation.
     * @callback module:api/EdmApi~reorderPropertyTypesInEntityTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the EntityType definition for the given EntityType UUID by reordering its properties as specified by the provided list.
     * @param {String} entityTypeId 
     * @param {Array.<String>} propertyTypeIds 
     * @param {module:api/EdmApi~reorderPropertyTypesInEntityTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reorderPropertyTypesInEntityType(entityTypeId, propertyTypeIds, callback) {
      let postBody = null;
      // verify the required parameter 'entityTypeId' is set
      if (entityTypeId === undefined || entityTypeId === null) {
        throw new Error("Missing the required parameter 'entityTypeId' when calling reorderPropertyTypesInEntityType");
      }
      // verify the required parameter 'propertyTypeIds' is set
      if (propertyTypeIds === undefined || propertyTypeIds === null) {
        throw new Error("Missing the required parameter 'propertyTypeIds' when calling reorderPropertyTypesInEntityType");
      }

      let pathParams = {
        'entityTypeId': entityTypeId,
        'propertyTypeIds': propertyTypeIds
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/entity/type/{entityTypeId}/property/type', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEntityDataModel operation.
     * @callback module:api/EdmApi~updateEntityDataModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the entity data model, including schemas, entity types, association types, and property types.
     * @param {module:model/EDM} EDM 
     * @param {module:api/EdmApi~updateEntityDataModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEntityDataModel(EDM, callback) {
      let postBody = EDM;
      // verify the required parameter 'EDM' is set
      if (EDM === undefined || EDM === null) {
        throw new Error("Missing the required parameter 'EDM' when calling updateEntityDataModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEntitySetMetaData operation.
     * @callback module:api/EdmApi~updateEntitySetMetaDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the EntityType definition for the given EntitySet UUID with the given metadata.
     * @param {String} entitySetId 
     * @param {module:model/MetaDataUpdate} metaDataUpdate 
     * @param {module:api/EdmApi~updateEntitySetMetaDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEntitySetMetaData(entitySetId, metaDataUpdate, callback) {
      let postBody = metaDataUpdate;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling updateEntitySetMetaData");
      }
      // verify the required parameter 'metaDataUpdate' is set
      if (metaDataUpdate === undefined || metaDataUpdate === null) {
        throw new Error("Missing the required parameter 'metaDataUpdate' when calling updateEntitySetMetaData");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/entity/set/{entitySetId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEntitySetPropertyMetadata operation.
     * @callback module:api/EdmApi~updateEntitySetPropertyMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the property type metadata for the given entity set.
     * @param {String} entitySetId 
     * @param {String} propertyTypeId 
     * @param {module:model/PropertyType} propertyType 
     * @param {module:api/EdmApi~updateEntitySetPropertyMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEntitySetPropertyMetadata(entitySetId, propertyTypeId, propertyType, callback) {
      let postBody = propertyType;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling updateEntitySetPropertyMetadata");
      }
      // verify the required parameter 'propertyTypeId' is set
      if (propertyTypeId === undefined || propertyTypeId === null) {
        throw new Error("Missing the required parameter 'propertyTypeId' when calling updateEntitySetPropertyMetadata");
      }
      // verify the required parameter 'propertyType' is set
      if (propertyType === undefined || propertyType === null) {
        throw new Error("Missing the required parameter 'propertyType' when calling updateEntitySetPropertyMetadata");
      }

      let pathParams = {
        'entitySetId': entitySetId,
        'propertyTypeId': propertyTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/entity/set/{entitySetId}/property/type/{propertyTypeId}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEntityTypeMetaData operation.
     * @callback module:api/EdmApi~updateEntityTypeMetaDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the EntityType definition for the given EntityType UUID with the given metadata.
     * @param {String} entityTypeId 
     * @param {module:model/MetaDataUpdate} metaDataUpdate 
     * @param {module:api/EdmApi~updateEntityTypeMetaDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEntityTypeMetaData(entityTypeId, metaDataUpdate, callback) {
      let postBody = metaDataUpdate;
      // verify the required parameter 'entityTypeId' is set
      if (entityTypeId === undefined || entityTypeId === null) {
        throw new Error("Missing the required parameter 'entityTypeId' when calling updateEntityTypeMetaData");
      }
      // verify the required parameter 'metaDataUpdate' is set
      if (metaDataUpdate === undefined || metaDataUpdate === null) {
        throw new Error("Missing the required parameter 'metaDataUpdate' when calling updateEntityTypeMetaData");
      }

      let pathParams = {
        'entityTypeId': entityTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/entity/type/{entityTypeId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePropertyTypeMetaData operation.
     * @callback module:api/EdmApi~updatePropertyTypeMetaDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the PropertyType definition for the given PropertyType UUID with the given metadata.
     * @param {String} propertyTypeId 
     * @param {module:model/MetaDataUpdate} metaDataUpdate 
     * @param {module:api/EdmApi~updatePropertyTypeMetaDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePropertyTypeMetaData(propertyTypeId, metaDataUpdate, callback) {
      let postBody = metaDataUpdate;
      // verify the required parameter 'propertyTypeId' is set
      if (propertyTypeId === undefined || propertyTypeId === null) {
        throw new Error("Missing the required parameter 'propertyTypeId' when calling updatePropertyTypeMetaData");
      }
      // verify the required parameter 'metaDataUpdate' is set
      if (metaDataUpdate === undefined || metaDataUpdate === null) {
        throw new Error("Missing the required parameter 'metaDataUpdate' when calling updatePropertyTypeMetaData");
      }

      let pathParams = {
        'propertyTypeId': propertyTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/property/type/{propertyTypeId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSchema operation.
     * @callback module:api/EdmApi~updateSchemaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edits the schema contents for a corresponding namespace and name.
     * @param {String} namespace 
     * @param {String} name 
     * @param {module:model/EdmRequest} edmRequest 
     * @param {module:api/EdmApi~updateSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSchema(namespace, name, edmRequest, callback) {
      let postBody = edmRequest;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling updateSchema");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateSchema");
      }
      // verify the required parameter 'edmRequest' is set
      if (edmRequest === undefined || edmRequest === null) {
        throw new Error("Missing the required parameter 'edmRequest' when calling updateSchema");
      }

      let pathParams = {
        'namespace': namespace,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/edm/schema/{namespace}/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
