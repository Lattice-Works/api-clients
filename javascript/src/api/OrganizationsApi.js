/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Auth0userBasic from '../model/Auth0userBasic';
import InlineResponse200 from '../model/InlineResponse200';
import Organization from '../model/Organization';
import OrganizationMember from '../model/OrganizationMember';
import Role from '../model/Role';

/**
* Organizations service.
* @module api/OrganizationsApi
* @version 0.0.1
*/
export default class OrganizationsApi {

    /**
    * Constructs a new OrganizationsApi. 
    * @alias module:api/OrganizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addMember operation.
     * @callback module:api/OrganizationsApi~addMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add member to an organization
     * @param {String} organizationId 
     * @param {String} userId 
     * @param {module:api/OrganizationsApi~addMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMember(organizationId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling addMember");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addMember");
      }

      let pathParams = {
        'organizationId': organizationId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/principals/members/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addRoleToUser operation.
     * @callback module:api/OrganizationsApi~addRoleToUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a role to a user
     * @param {String} organizationId 
     * @param {String} roleId 
     * @param {String} userId 
     * @param {module:api/OrganizationsApi~addRoleToUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addRoleToUser(organizationId, roleId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling addRoleToUser");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling addRoleToUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addRoleToUser");
      }

      let pathParams = {
        'organizationId': organizationId,
        'roleId': roleId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/principals/roles/{roleId}/members/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assembleEntitySets operation.
     * @callback module:api/OrganizationsApi~assembleEntitySetsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: [String]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Materializes entity sets into the organization database.
     * @param {String} organizationId 
     * @param {Object.<String, {String: Number}>} requestBody 
     * @param {module:api/OrganizationsApi~assembleEntitySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: [String]}>}
     */
    assembleEntitySets(organizationId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling assembleEntitySets");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling assembleEntitySets");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': ['String']};
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/entity-sets/assemble', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationIfNotExists operation.
     * @callback module:api/OrganizationsApi~createOrganizationIfNotExistsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an organization if it doesn't exist.
     * @param {module:model/Organization} organization 
     * @param {module:api/OrganizationsApi~createOrganizationIfNotExistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    createOrganizationIfNotExists(organization, callback) {
      let postBody = organization;
      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling createOrganizationIfNotExists");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/datastore/organizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRole operation.
     * @callback module:api/OrganizationsApi~createRoleCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates role
     * @param {module:model/Role} role 
     * @param {module:api/OrganizationsApi~createRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    createRole(role, callback) {
      let postBody = role;
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling createRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/datastore/organizations/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRole operation.
     * @callback module:api/OrganizationsApi~deleteRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove role for an organization
     * @param {String} organizationId 
     * @param {String} roleId 
     * @param {module:api/OrganizationsApi~deleteRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRole(organizationId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling deleteRole");
      }

      let pathParams = {
        'organizationId': organizationId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/principals/roles/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destroyOrganization operation.
     * @callback module:api/OrganizationsApi~destroyOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an organization from the organizationId
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~destroyOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    destroyOrganization(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling destroyOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destroyTransportedEntitySet operation.
     * @callback module:api/OrganizationsApi~destroyTransportedEntitySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks entity set for transporter for materialized views
     * @param {String} organizationId 
     * @param {String} entitySetId 
     * @param {module:api/OrganizationsApi~destroyTransportedEntitySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    destroyTransportedEntitySet(organizationId, entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling destroyTransportedEntitySet");
      }
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling destroyTransportedEntitySet");
      }

      let pathParams = {
        'organizationId': organizationId,
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/{entitySetId}/destroy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsersOfRole operation.
     * @callback module:api/OrganizationsApi~getAllUsersOfRoleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Auth0userBasic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get members of a role for an organization from a roleId
     * @param {String} organizationId 
     * @param {String} roleId 
     * @param {module:api/OrganizationsApi~getAllUsersOfRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Auth0userBasic>}
     */
    getAllUsersOfRole(organizationId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getAllUsersOfRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling getAllUsersOfRole");
      }

      let pathParams = {
        'organizationId': organizationId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Auth0userBasic];
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/principals/roles/{roleId}/members/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutoApprovedEmailDomains operation.
     * @callback module:api/OrganizationsApi~getAutoApprovedEmailDomainsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get auto-approved email domains
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getAutoApprovedEmailDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getAutoApprovedEmailDomains(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getAutoApprovedEmailDomains");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/email-domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlaggedOrganizationEntitySets operation.
     * @callback module:api/OrganizationsApi~getFlaggedOrganizationEntitySetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{String: [String]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the entity sets for an organization for a certain flag
     * @param {String} organizationId 
     * @param {Object.<String, {String: [String]}>} requestBody 
     * @param {module:api/OrganizationsApi~getFlaggedOrganizationEntitySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<{String: [String]}>}
     */
    getFlaggedOrganizationEntitySets(organizationId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getFlaggedOrganizationEntitySets");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling getFlaggedOrganizationEntitySets");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [{'String': ['String']}];
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/entity-sets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembers operation.
     * @callback module:api/OrganizationsApi~getMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizationMember>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get members of a certain organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizationMember>}
     */
    getMembers(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getMembers");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrganizationMember];
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/principals/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganization operation.
     * @callback module:api/OrganizationsApi~getOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization from the organizationId
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    getOrganization(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDatabaseName operation.
     * @callback module:api/OrganizationsApi~getOrganizationDatabaseNameCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get database name for an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationDatabaseNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getOrganizationDatabaseName(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDatabaseName");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/database', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationEntitySets operation.
     * @callback module:api/OrganizationsApi~getOrganizationEntitySetsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: [String]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the entity sets for an organization for a certain filter
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationEntitySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: [String]}>}
     */
    getOrganizationEntitySets(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationEntitySets");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': ['String']};
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/entity-sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationIntegrationAccount operation.
     * @callback module:api/OrganizationsApi~getOrganizationIntegrationAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the integrations account for an organization from the organizationId
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationIntegrationAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    getOrganizationIntegrationAccount(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationIntegrationAccount");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/integration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizations operation.
     * @callback module:api/OrganizationsApi~getOrganizationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Organization>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all organizations
     * @param {module:api/OrganizationsApi~getOrganizationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Organization>}
     */
    getOrganizations(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Organization];
      return this.apiClient.callApi(
        '/datastore/organizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRole operation.
     * @callback module:api/OrganizationsApi~getRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get role for an organization from a roleId
     * @param {String} organizationId 
     * @param {String} roleId 
     * @param {module:api/OrganizationsApi~getRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    getRole(organizationId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling getRole");
      }

      let pathParams = {
        'organizationId': organizationId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/principals/roles/{roleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoles operation.
     * @callback module:api/OrganizationsApi~getRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get roles for an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    getRoles(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getRoles");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Role];
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/principals/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshDataChanges operation.
     * @callback module:api/OrganizationsApi~refreshDataChangesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refreshes the requested materialized entity set with data changes in the organization.
     * @param {String} organizationId 
     * @param {String} entitySetId 
     * @param {module:api/OrganizationsApi~refreshDataChangesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    refreshDataChanges(organizationId, entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling refreshDataChanges");
      }
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling refreshDataChanges");
      }

      let pathParams = {
        'organizationId': organizationId,
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/{entitySetId}/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAutoApprovedEmailDomains operation.
     * @callback module:api/OrganizationsApi~removeAutoApprovedEmailDomainsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove auto-approved email domains
     * @param {String} organizationId 
     * @param {Array.<String>} requestBody 
     * @param {module:api/OrganizationsApi~removeAutoApprovedEmailDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeAutoApprovedEmailDomains(organizationId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling removeAutoApprovedEmailDomains");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling removeAutoApprovedEmailDomains");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/email-domains', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeMember operation.
     * @callback module:api/OrganizationsApi~removeMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove member from an organization
     * @param {String} organizationId 
     * @param {String} userId 
     * @param {module:api/OrganizationsApi~removeMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeMember(organizationId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling removeMember");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeMember");
      }

      let pathParams = {
        'organizationId': organizationId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/principals/members/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeRoleFromUser operation.
     * @callback module:api/OrganizationsApi~removeRoleFromUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a role from a user
     * @param {String} organizationId 
     * @param {String} roleId 
     * @param {String} userId 
     * @param {module:api/OrganizationsApi~removeRoleFromUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeRoleFromUser(organizationId, roleId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling removeRoleFromUser");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling removeRoleFromUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeRoleFromUser");
      }

      let pathParams = {
        'organizationId': organizationId,
        'roleId': roleId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/principals/roles/{roleId}/members/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renameOrganizationDatabase operation.
     * @callback module:api/OrganizationsApi~renameOrganizationDatabaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename the database of organization
     * @param {String} organizationId 
     * @param {String} body 
     * @param {module:api/OrganizationsApi~renameOrganizationDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    renameOrganizationDatabase(organizationId, body, callback) {
      let postBody = body;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling renameOrganizationDatabase");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling renameOrganizationDatabase");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/database', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setAutoApprovedEmailDomain operation.
     * @callback module:api/OrganizationsApi~setAutoApprovedEmailDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set auto-approved email domains
     * @param {String} organizationId 
     * @param {Array.<String>} requestBody 
     * @param {module:api/OrganizationsApi~setAutoApprovedEmailDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setAutoApprovedEmailDomain(organizationId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling setAutoApprovedEmailDomain");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling setAutoApprovedEmailDomain");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/email-domains', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the synchronizeEdmChanges operation.
     * @callback module:api/OrganizationsApi~synchronizeEdmChangesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Synchronizes EDM changes to the requested materialized entity set in the organization.
     * @param {String} organizationId 
     * @param {String} entitySetId 
     * @param {module:api/OrganizationsApi~synchronizeEdmChangesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    synchronizeEdmChanges(organizationId, entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling synchronizeEdmChanges");
      }
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling synchronizeEdmChanges");
      }

      let pathParams = {
        'organizationId': organizationId,
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/{entitySetId}/synchronize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transportEntitySet operation.
     * @callback module:api/OrganizationsApi~transportEntitySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks entity set for transporter for materialized views
     * @param {String} organizationId 
     * @param {String} entitySetId 
     * @param {module:api/OrganizationsApi~transportEntitySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transportEntitySet(organizationId, entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling transportEntitySet");
      }
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling transportEntitySet");
      }

      let pathParams = {
        'organizationId': organizationId,
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/{entitySetId}/transport', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDescription operation.
     * @callback module:api/OrganizationsApi~updateDescriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the organization description
     * @param {String} organizationId 
     * @param {String} body 
     * @param {module:api/OrganizationsApi~updateDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDescription(organizationId, body, callback) {
      let postBody = body;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateDescription");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDescription");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/description', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoleDescription operation.
     * @callback module:api/OrganizationsApi~updateRoleDescriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update role description for an organization from a roleId
     * @param {String} organizationId 
     * @param {String} roleId 
     * @param {String} body 
     * @param {module:api/OrganizationsApi~updateRoleDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRoleDescription(organizationId, roleId, body, callback) {
      let postBody = body;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateRoleDescription");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling updateRoleDescription");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRoleDescription");
      }

      let pathParams = {
        'organizationId': organizationId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/principals/roles/{roleId}/description', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoleTitle operation.
     * @callback module:api/OrganizationsApi~updateRoleTitleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update role title for an organization from a roleId
     * @param {String} organizationId 
     * @param {String} roleId 
     * @param {String} body 
     * @param {module:api/OrganizationsApi~updateRoleTitleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRoleTitle(organizationId, roleId, body, callback) {
      let postBody = body;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateRoleTitle");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling updateRoleTitle");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRoleTitle");
      }

      let pathParams = {
        'organizationId': organizationId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/principals/roles/{roleId}/title', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTitle operation.
     * @callback module:api/OrganizationsApi~updateTitleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the organization title
     * @param {String} organizationId 
     * @param {String} body 
     * @param {module:api/OrganizationsApi~updateTitleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTitle(organizationId, body, callback) {
      let postBody = body;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateTitle");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTitle");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/organizations/{organizationId}/title', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
