/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdvancedSearch from '../model/AdvancedSearch';
import DataSearchResult from '../model/DataSearchResult';
import EntitySet from '../model/EntitySet';
import NeighborEntityDetails from '../model/NeighborEntityDetails';
import NeighborSearchFilter from '../model/NeighborSearchFilter';
import Search from '../model/Search';
import SearchConstraints from '../model/SearchConstraints';
import SearchResult from '../model/SearchResult';
import SearchTerm from '../model/SearchTerm';

/**
* Search service.
* @module api/SearchApi
* @version 0.0.1
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the executeAdvancedEntitySetDataQuery operation.
     * @callback module:api/SearchApi~executeAdvancedEntitySetDataQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes a search over the data of a given entity set to find rows that match the search term
     * @param {String} entitySetId 
     * @param {module:model/AdvancedSearch} advancedSearch 
     * @param {module:api/SearchApi~executeAdvancedEntitySetDataQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSearchResult}
     */
    executeAdvancedEntitySetDataQuery(entitySetId, advancedSearch, callback) {
      let postBody = advancedSearch;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling executeAdvancedEntitySetDataQuery");
      }
      // verify the required parameter 'advancedSearch' is set
      if (advancedSearch === undefined || advancedSearch === null) {
        throw new Error("Missing the required parameter 'advancedSearch' when calling executeAdvancedEntitySetDataQuery");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataSearchResult;
      return this.apiClient.callApi(
        '/datastore/search/advanced/{entitySetId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeEntityNeighborSearch operation.
     * @callback module:api/SearchApi~executeEntityNeighborSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NeighborEntityDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes a search for all neighbors of an entity that are connected by an association
     * @param {String} entitySetId 
     * @param {String} entityKeyId 
     * @param {module:api/SearchApi~executeEntityNeighborSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NeighborEntityDetails>}
     */
    executeEntityNeighborSearch(entitySetId, entityKeyId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling executeEntityNeighborSearch");
      }
      // verify the required parameter 'entityKeyId' is set
      if (entityKeyId === undefined || entityKeyId === null) {
        throw new Error("Missing the required parameter 'entityKeyId' when calling executeEntityNeighborSearch");
      }

      let pathParams = {
        'entitySetId': entitySetId,
        'entityKeyId': entityKeyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NeighborEntityDetails];
      return this.apiClient.callApi(
        '/datastore/search/{entitySetId}/{entityKeyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeEntityNeighborSearchBulk operation.
     * @callback module:api/SearchApi~executeEntityNeighborSearchBulkCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: [NeighborEntityDetails]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association
     * @param {String} entitySetId 
     * @param {Array.<String>} requestBody 
     * @param {module:api/SearchApi~executeEntityNeighborSearchBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: [NeighborEntityDetails]}>}
     */
    executeEntityNeighborSearchBulk(entitySetId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling executeEntityNeighborSearchBulk");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling executeEntityNeighborSearchBulk");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': [NeighborEntityDetails]};
      return this.apiClient.callApi(
        '/datastore/search/{entitySetId}/neighbors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeEntitySetDataQuery operation.
     * @callback module:api/SearchApi~executeEntitySetDataQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes a search over the data of a given entity set to find rows that match the search term
     * @param {String} entitySetId 
     * @param {module:model/SearchTerm} searchTerm A JSON object that contains three parameters, \"start\", which specifies the hit number to start returning results on for paging, \"maxHits\", which specifies the maximum number of hits to return, and \"searchTerm\", which is the search term results will match on.
     * @param {module:api/SearchApi~executeEntitySetDataQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSearchResult}
     */
    executeEntitySetDataQuery(entitySetId, searchTerm, callback) {
      let postBody = searchTerm;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling executeEntitySetDataQuery");
      }
      // verify the required parameter 'searchTerm' is set
      if (searchTerm === undefined || searchTerm === null) {
        throw new Error("Missing the required parameter 'searchTerm' when calling executeEntitySetDataQuery");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataSearchResult;
      return this.apiClient.callApi(
        '/datastore/search/{entitySetId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeEntitySetKeywordQuery operation.
     * @callback module:api/SearchApi~executeEntitySetKeywordQueryCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: {String: {String: [NeighborEntityIds]}}}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The query, entityType, and propertyTypes params are all optional, but at least one must be specified otherwise an error will be thrown. All specified params are required to be present in each entity set returned. If entityType and propertyTypes are both specified, the propertyTypes param will be ignored.
     * @param {module:model/Search} search 
     * @param {module:api/SearchApi~executeEntitySetKeywordQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: {String: {String: [NeighborEntityIds]}}}>}
     */
    executeEntitySetKeywordQuery(search, callback) {
      let postBody = search;
      // verify the required parameter 'search' is set
      if (search === undefined || search === null) {
        throw new Error("Missing the required parameter 'search' when calling executeEntitySetKeywordQuery");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': {'String': {'String': [NeighborEntityIds]}}};
      return this.apiClient.callApi(
        '/datastore/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeFilteredEntityNeighborIdSearch operation.
     * @callback module:api/SearchApi~executeFilteredEntityNeighborIdSearchCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: {String: {String: [NeighborEntityIds]}}}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association and returns a simple version of the neighborDetails
     * @param {String} entitySetId 
     * @param {module:model/NeighborSearchFilter} neighborSearchFilter 
     * @param {module:api/SearchApi~executeFilteredEntityNeighborIdSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: {String: {String: [NeighborEntityIds]}}}>}
     */
    executeFilteredEntityNeighborIdSearch(entitySetId, neighborSearchFilter, callback) {
      let postBody = neighborSearchFilter;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling executeFilteredEntityNeighborIdSearch");
      }
      // verify the required parameter 'neighborSearchFilter' is set
      if (neighborSearchFilter === undefined || neighborSearchFilter === null) {
        throw new Error("Missing the required parameter 'neighborSearchFilter' when calling executeFilteredEntityNeighborIdSearch");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': {'String': {'String': [NeighborEntityIds]}}};
      return this.apiClient.callApi(
        '/datastore/search/{entitySetId}/neighbors/advanced/ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeFilteredEntityNeighborSearch operation.
     * @callback module:api/SearchApi~executeFilteredEntityNeighborSearchCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: [NeighborEntityDetails]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association
     * @param {String} entitySetId 
     * @param {module:model/NeighborSearchFilter} neighborSearchFilter 
     * @param {module:api/SearchApi~executeFilteredEntityNeighborSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: [NeighborEntityDetails]}>}
     */
    executeFilteredEntityNeighborSearch(entitySetId, neighborSearchFilter, callback) {
      let postBody = neighborSearchFilter;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling executeFilteredEntityNeighborSearch");
      }
      // verify the required parameter 'neighborSearchFilter' is set
      if (neighborSearchFilter === undefined || neighborSearchFilter === null) {
        throw new Error("Missing the required parameter 'neighborSearchFilter' when calling executeFilteredEntityNeighborSearch");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': [NeighborEntityDetails]};
      return this.apiClient.callApi(
        '/datastore/search/{entitySetId}/neighbors/advanced', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySets operation.
     * @callback module:api/SearchApi~getEntitySetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes a search over all existing entity sets to populate the home page. The path parameters instruct which page to return and how large the page should be.
     * @param {Number} start The first result number to return
     * @param {Number} numResults The total number of results to return
     * @param {module:api/SearchApi~getEntitySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SearchResult>}
     */
    getEntitySets(start, numResults, callback) {
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling getEntitySets");
      }
      // verify the required parameter 'numResults' is set
      if (numResults === undefined || numResults === null) {
        throw new Error("Missing the required parameter 'numResults' when calling getEntitySets");
      }

      let pathParams = {
        'start': start,
        'numResults': numResults
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SearchResult];
      return this.apiClient.callApi(
        '/datastore/search/entity-sets/{start}/{numResults}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPopularEntitySet operation.
     * @callback module:api/SearchApi~getPopularEntitySetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntitySet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the most popular entity sets.
     * @param {module:api/SearchApi~getPopularEntitySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntitySet>}
     */
    getPopularEntitySet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntitySet];
      return this.apiClient.callApi(
        '/datastore/search/popular', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchEntitySetData operation.
     * @callback module:api/SearchApi~searchEntitySetDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes a search over the data of a given entity set to find rows that match the search term
     * @param {module:model/SearchConstraints} searchConstraints 
     * @param {module:api/SearchApi~searchEntitySetDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSearchResult}
     */
    searchEntitySetData(searchConstraints, callback) {
      let postBody = searchConstraints;
      // verify the required parameter 'searchConstraints' is set
      if (searchConstraints === undefined || searchConstraints === null) {
        throw new Error("Missing the required parameter 'searchConstraints' when calling searchEntitySetData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataSearchResult;
      return this.apiClient.callApi(
        '/datastore/search', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
