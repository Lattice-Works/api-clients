/**
 * OpenLattice API
 * OpenLattice API
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NeighborEntityDetails from '../model/NeighborEntityDetails';
import NeighborSearchFilter from '../model/NeighborSearchFilter';

/**
* Search service.
* @module api/SearchApi
* @version 0.0.1
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the executeEntityNeighborSearch operation.
     * @callback module:api/SearchApi~executeEntityNeighborSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NeighborEntityDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes a search for all neighbors of an entity that are connected by an association
     * @param {String} entitySetId 
     * @param {String} entityKeyId 
     * @param {module:api/SearchApi~executeEntityNeighborSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NeighborEntityDetails>}
     */
    executeEntityNeighborSearch(entitySetId, entityKeyId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling executeEntityNeighborSearch");
      }
      // verify the required parameter 'entityKeyId' is set
      if (entityKeyId === undefined || entityKeyId === null) {
        throw new Error("Missing the required parameter 'entityKeyId' when calling executeEntityNeighborSearch");
      }

      let pathParams = {
        'entitySetId': entitySetId,
        'entityKeyId': entityKeyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NeighborEntityDetails];
      return this.apiClient.callApi(
        '/datastore/search/{entitySetId}/{entityKeyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeFilteredEntityNeighborIdSearch operation.
     * @callback module:api/SearchApi~executeFilteredEntityNeighborIdSearchCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: {String: [NeighborEntityDetailsReduced]}}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association and returns a simple version of the neighborDetails
     * @param {String} entitySetId 
     * @param {module:model/NeighborSearchFilter} neighborSearchFilter 
     * @param {module:api/SearchApi~executeFilteredEntityNeighborIdSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: {String: [NeighborEntityDetailsReduced]}}>}
     */
    executeFilteredEntityNeighborIdSearch(entitySetId, neighborSearchFilter, callback) {
      let postBody = neighborSearchFilter;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling executeFilteredEntityNeighborIdSearch");
      }
      // verify the required parameter 'neighborSearchFilter' is set
      if (neighborSearchFilter === undefined || neighborSearchFilter === null) {
        throw new Error("Missing the required parameter 'neighborSearchFilter' when calling executeFilteredEntityNeighborIdSearch");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': {'String': [NeighborEntityDetailsReduced]}};
      return this.apiClient.callApi(
        '/datastore/search/{entitySetId}/neighbors/advanced/ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeFilteredEntityNeighborSearch operation.
     * @callback module:api/SearchApi~executeFilteredEntityNeighborSearchCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: [NeighborEntityDetails]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association
     * @param {String} entitySetId 
     * @param {module:model/NeighborSearchFilter} neighborSearchFilter 
     * @param {module:api/SearchApi~executeFilteredEntityNeighborSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: [NeighborEntityDetails]}>}
     */
    executeFilteredEntityNeighborSearch(entitySetId, neighborSearchFilter, callback) {
      let postBody = neighborSearchFilter;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling executeFilteredEntityNeighborSearch");
      }
      // verify the required parameter 'neighborSearchFilter' is set
      if (neighborSearchFilter === undefined || neighborSearchFilter === null) {
        throw new Error("Missing the required parameter 'neighborSearchFilter' when calling executeFilteredEntityNeighborSearch");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': [NeighborEntityDetails]};
      return this.apiClient.callApi(
        '/datastore/search/{entitySetId}/neighbors/advanced', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
