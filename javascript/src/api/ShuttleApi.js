/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Integration from '../model/Integration';
import IntegrationJob from '../model/IntegrationJob';
import IntegrationUpdate from '../model/IntegrationUpdate';

/**
* Shuttle service.
* @module api/ShuttleApi
* @version 0.0.1
*/
export default class ShuttleApi {

    /**
    * Constructs a new ShuttleApi. 
    * @alias module:api/ShuttleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createIntegrationDefinition operation.
     * @callback module:api/ShuttleApi~createIntegrationDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new integration definition for running recurring integrations
     * @param {String} integrationName 
     * @param {module:model/Integration} integration 
     * @param {module:api/ShuttleApi~createIntegrationDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    createIntegrationDefinition(integrationName, integration, callback) {
      let postBody = integration;
      // verify the required parameter 'integrationName' is set
      if (integrationName === undefined || integrationName === null) {
        throw new Error("Missing the required parameter 'integrationName' when calling createIntegrationDefinition");
      }
      // verify the required parameter 'integration' is set
      if (integration === undefined || integration === null) {
        throw new Error("Missing the required parameter 'integration' when calling createIntegrationDefinition");
      }

      let pathParams = {
        'integrationName': integrationName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/shuttle/integration/definition/{integrationName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIntegrationDefinition operation.
     * @callback module:api/ShuttleApi~deleteIntegrationDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces any number of fields within an existing integration definition
     * @param {String} integrationName 
     * @param {module:api/ShuttleApi~deleteIntegrationDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIntegrationDefinition(integrationName, callback) {
      let postBody = null;
      // verify the required parameter 'integrationName' is set
      if (integrationName === undefined || integrationName === null) {
        throw new Error("Missing the required parameter 'integrationName' when calling deleteIntegrationDefinition");
      }

      let pathParams = {
        'integrationName': integrationName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shuttle/integration/definition/{integrationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIntegrationJobStatus operation.
     * @callback module:api/ShuttleApi~deleteIntegrationJobStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an integration job status from the integrationJobs map
     * @param {String} jobId the unique id of the integration job
     * @param {module:api/ShuttleApi~deleteIntegrationJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIntegrationJobStatus(jobId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling deleteIntegrationJobStatus");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shuttle/integration/status/{jobId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enqueueIntegration operation.
     * @callback module:api/ShuttleApi~enqueueIntegrationCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enqueues an integration on Shuttle Server for a given integration
     * @param {String} integrationName the name of the integration to be run
     * @param {String} integrationKey the unique id used to authenticate an integration run
     * @param {module:api/ShuttleApi~enqueueIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    enqueueIntegration(integrationName, integrationKey, callback) {
      let postBody = null;
      // verify the required parameter 'integrationName' is set
      if (integrationName === undefined || integrationName === null) {
        throw new Error("Missing the required parameter 'integrationName' when calling enqueueIntegration");
      }
      // verify the required parameter 'integrationKey' is set
      if (integrationKey === undefined || integrationKey === null) {
        throw new Error("Missing the required parameter 'integrationKey' when calling enqueueIntegration");
      }

      let pathParams = {
        'integrationName': integrationName,
        'integrationKey': integrationKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/shuttle/integration/{integrationName}/{integrationKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pollAllIntegrations operation.
     * @callback module:api/ShuttleApi~pollAllIntegrationsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: IntegrationJob}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Polls the statuses of all running integrations
     * @param {module:api/ShuttleApi~pollAllIntegrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: IntegrationJob}>}
     */
    pollAllIntegrations(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': IntegrationJob};
      return this.apiClient.callApi(
        '/shuttle/integration/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pollIntegration operation.
     * @callback module:api/ShuttleApi~pollIntegrationCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Polls the status of an integration
     * @param {String} jobId the unique id of the integration job
     * @param {module:api/ShuttleApi~pollIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    pollIntegration(jobId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling pollIntegration");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/shuttle/integration/status/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readIntegrationDefinition operation.
     * @callback module:api/ShuttleApi~readIntegrationDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Integration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an existing integration definition
     * @param {String} integrationName 
     * @param {module:api/ShuttleApi~readIntegrationDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Integration}
     */
    readIntegrationDefinition(integrationName, callback) {
      let postBody = null;
      // verify the required parameter 'integrationName' is set
      if (integrationName === undefined || integrationName === null) {
        throw new Error("Missing the required parameter 'integrationName' when calling readIntegrationDefinition");
      }

      let pathParams = {
        'integrationName': integrationName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Integration;
      return this.apiClient.callApi(
        '/shuttle/integration/definition/{integrationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIntegrationDefinition operation.
     * @callback module:api/ShuttleApi~updateIntegrationDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces any number of fields within an existing integration definition
     * @param {String} integrationName 
     * @param {module:model/IntegrationUpdate} integrationUpdate 
     * @param {module:api/ShuttleApi~updateIntegrationDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateIntegrationDefinition(integrationName, integrationUpdate, callback) {
      let postBody = integrationUpdate;
      // verify the required parameter 'integrationName' is set
      if (integrationName === undefined || integrationName === null) {
        throw new Error("Missing the required parameter 'integrationName' when calling updateIntegrationDefinition");
      }
      // verify the required parameter 'integrationUpdate' is set
      if (integrationUpdate === undefined || integrationUpdate === null) {
        throw new Error("Missing the required parameter 'integrationUpdate' when calling updateIntegrationDefinition");
      }

      let pathParams = {
        'integrationName': integrationName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shuttle/integration/definition/{integrationName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
