/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FullQualifiedName from './FullQualifiedName';
import PropertyDefinition from './PropertyDefinition';

/**
 * The EntityDefinition model module.
 * @module model/EntityDefinition
 * @version 0.0.1
 */
class EntityDefinition {
    /**
     * Constructs a new <code>EntityDefinition</code>.
     * @alias module:model/EntityDefinition
     */
    constructor() { 
        
        EntityDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntityDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityDefinition} obj Optional instance to populate.
     * @return {module:model/EntityDefinition} The populated <code>EntityDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityDefinition();

            if (data.hasOwnProperty('fqn')) {
                obj['fqn'] = FullQualifiedName.constructFromObject(data['fqn']);
            }
            if (data.hasOwnProperty('entitySetName')) {
                obj['entitySetName'] = ApiClient.convertToType(data['entitySetName'], 'String');
            }
            if (data.hasOwnProperty('propertyDefinitions')) {
                obj['propertyDefinitions'] = ApiClient.convertToType(data['propertyDefinitions'], {'String': PropertyDefinition});
            }
            if (data.hasOwnProperty('updateType')) {
                obj['updateType'] = ApiClient.convertToType(data['updateType'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/FullQualifiedName} fqn
 */
EntityDefinition.prototype['fqn'] = undefined;

/**
 * @member {String} entitySetName
 */
EntityDefinition.prototype['entitySetName'] = undefined;

/**
 * @member {Object.<String, module:model/PropertyDefinition>} propertyDefinitions
 */
EntityDefinition.prototype['propertyDefinitions'] = undefined;

/**
 * @member {module:model/EntityDefinition.UpdateTypeEnum} updateType
 */
EntityDefinition.prototype['updateType'] = undefined;





/**
 * Allowed values for the <code>updateType</code> property.
 * @enum {String}
 * @readonly
 */
EntityDefinition['UpdateTypeEnum'] = {

    /**
     * value: "Replace"
     * @const
     */
    "Replace": "Replace",

    /**
     * value: "PartialReplace"
     * @const
     */
    "PartialReplace": "PartialReplace",

    /**
     * value: "Merge"
     * @const
     */
    "Merge": "Merge"
};



export default EntityDefinition;

