/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Search model module.
 * @module model/Search
 * @version 0.0.1
 */
class Search {
    /**
     * Constructs a new <code>Search</code>.
     * A JSON object that contains between three and five parameters. Required parameters are \&quot;start\&quot; and \&quot;maxHits, which specify the hit number to start returning results on for paging and the maximum number of hits to return. Optional parameters are \&quot;query\&quot; (specifies the keywords used to perform the search), \&quot;eid\&quot; (UUID of the entity type of the entity sets that will be returned), and \&quot;pid\&quot; (a set of UUIDs of property types belonging to the entity sets that will be returned). All three of these parameters are optional, but at least one must be specified otherwise an error will be thrown. If eid and pid are both specified, the pid param will be ignored.
     * @alias module:model/Search
     */
    constructor() { 
        
        Search.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Search</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Search} obj Optional instance to populate.
     * @return {module:model/Search} The populated <code>Search</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Search();

            if (data.hasOwnProperty('keyword')) {
                obj['keyword'] = ApiClient.convertToType(data['keyword'], 'String');
            }
            if (data.hasOwnProperty('entityTypeId')) {
                obj['entityTypeId'] = ApiClient.convertToType(data['entityTypeId'], 'String');
            }
            if (data.hasOwnProperty('propertyTypeIds')) {
                obj['propertyTypeIds'] = ApiClient.convertToType(data['propertyTypeIds'], ['String']);
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
            if (data.hasOwnProperty('maxHits')) {
                obj['maxHits'] = ApiClient.convertToType(data['maxHits'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {String} keyword
 */
Search.prototype['keyword'] = undefined;

/**
 * @member {String} entityTypeId
 */
Search.prototype['entityTypeId'] = undefined;

/**
 * @member {Array.<String>} propertyTypeIds
 */
Search.prototype['propertyTypeIds'] = undefined;

/**
 * @member {Number} start
 */
Search.prototype['start'] = undefined;

/**
 * @member {Number} maxHits
 */
Search.prototype['maxHits'] = undefined;






export default Search;

