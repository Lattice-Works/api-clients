/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FullQualifiedName from './FullQualifiedName';

/**
 * The MetadataUpdate model module.
 * @module model/MetadataUpdate
 * @version 0.0.1
 */
class MetadataUpdate {
    /**
     * Constructs a new <code>MetadataUpdate</code>.
     * @alias module:model/MetadataUpdate
     */
    constructor() { 
        
        MetadataUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetadataUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetadataUpdate} obj Optional instance to populate.
     * @return {module:model/MetadataUpdate} The populated <code>MetadataUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetadataUpdate();

            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('contacts')) {
                obj['contacts'] = ApiClient.convertToType(data['contacts'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = FullQualifiedName.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('pii')) {
                obj['pii'] = ApiClient.convertToType(data['pii'], 'Boolean');
            }
            if (data.hasOwnProperty('defaultShow')) {
                obj['defaultShow'] = ApiClient.convertToType(data['defaultShow'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('propertyTags')) {
                obj['propertyTags'] = ApiClient.convertToType(data['propertyTags'], {'String': ['String']});
            }
            if (data.hasOwnProperty('indexType')) {
                obj['indexType'] = ApiClient.convertToType(data['indexType'], 'String');
            }
            if (data.hasOwnProperty('organizationId')) {
                obj['organizationId'] = ApiClient.convertToType(data['organizationId'], 'String');
            }
            if (data.hasOwnProperty('partitions')) {
                obj['partitions'] = ApiClient.convertToType(data['partitions'], ['Number']);
            }
            if (data.hasOwnProperty('enumValues')) {
                obj['enumValues'] = ApiClient.convertToType(data['enumValues'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} title
 */
MetadataUpdate.prototype['title'] = undefined;

/**
 * @member {String} description
 */
MetadataUpdate.prototype['description'] = undefined;

/**
 * @member {String} name
 */
MetadataUpdate.prototype['name'] = undefined;

/**
 * @member {Array.<String>} contacts
 */
MetadataUpdate.prototype['contacts'] = undefined;

/**
 * @member {module:model/FullQualifiedName} type
 */
MetadataUpdate.prototype['type'] = undefined;

/**
 * @member {Boolean} pii
 */
MetadataUpdate.prototype['pii'] = undefined;

/**
 * @member {Boolean} defaultShow
 */
MetadataUpdate.prototype['defaultShow'] = undefined;

/**
 * @member {String} url
 */
MetadataUpdate.prototype['url'] = undefined;

/**
 * @member {Object.<String, Array.<String>>} propertyTags
 */
MetadataUpdate.prototype['propertyTags'] = undefined;

/**
 * @member {module:model/MetadataUpdate.IndexTypeEnum} indexType
 */
MetadataUpdate.prototype['indexType'] = undefined;

/**
 * @member {String} organizationId
 */
MetadataUpdate.prototype['organizationId'] = undefined;

/**
 * @member {Array.<Number>} partitions
 */
MetadataUpdate.prototype['partitions'] = undefined;

/**
 * @member {Array.<String>} enumValues
 */
MetadataUpdate.prototype['enumValues'] = undefined;





/**
 * Allowed values for the <code>indexType</code> property.
 * @enum {String}
 * @readonly
 */
MetadataUpdate['IndexTypeEnum'] = {

    /**
     * value: "BTREE"
     * @const
     */
    "BTREE": "BTREE",

    /**
     * value: "HASH"
     * @const
     */
    "HASH": "HASH",

    /**
     * value: "GIN"
     * @const
     */
    "GIN": "GIN",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE"
};



export default MetadataUpdate;

