/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FullQualifiedName from './FullQualifiedName';

/**
 * The EntityType model module.
 * @module model/EntityType
 * @version 0.0.1
 */
class EntityType {
    /**
     * Constructs a new <code>EntityType</code>.
     * @alias module:model/EntityType
     */
    constructor() { 
        
        EntityType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntityType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityType} obj Optional instance to populate.
     * @return {module:model/EntityType} The populated <code>EntityType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityType();

            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = FullQualifiedName.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], [FullQualifiedName]);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], ['String']);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], ['String']);
            }
            if (data.hasOwnProperty('propertyTags')) {
                obj['propertyTags'] = ApiClient.convertToType(data['propertyTags'], {'String': ['String']});
            }
            if (data.hasOwnProperty('basetype')) {
                obj['basetype'] = ApiClient.convertToType(data['basetype'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} title
 */
EntityType.prototype['title'] = undefined;

/**
 * @member {String} description
 */
EntityType.prototype['description'] = undefined;

/**
 * @member {String} id
 */
EntityType.prototype['id'] = undefined;

/**
 * @member {module:model/FullQualifiedName} type
 */
EntityType.prototype['type'] = undefined;

/**
 * @member {Array.<module:model/FullQualifiedName>} schemas
 */
EntityType.prototype['schemas'] = undefined;

/**
 * @member {Array.<String>} key
 */
EntityType.prototype['key'] = undefined;

/**
 * @member {Array.<String>} properties
 */
EntityType.prototype['properties'] = undefined;

/**
 * @member {Object.<String, Array.<String>>} propertyTags
 */
EntityType.prototype['propertyTags'] = undefined;

/**
 * @member {String} basetype
 */
EntityType.prototype['basetype'] = undefined;

/**
 * @member {module:model/EntityType.CategoryEnum} category
 */
EntityType.prototype['category'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
EntityType['CategoryEnum'] = {

    /**
     * value: "AssociationType"
     * @const
     */
    "AssociationType": "AssociationType",

    /**
     * value: "EntityType"
     * @const
     */
    "EntityType": "EntityType"
};



export default EntityType;

