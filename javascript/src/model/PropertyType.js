/**
 * OpenLattice API
 * OpenLattice API
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FullQualifiedName from './FullQualifiedName';

/**
 * The PropertyType model module.
 * @module model/PropertyType
 * @version 0.0.1
 */
class PropertyType {
    /**
     * Constructs a new <code>PropertyType</code>.
     * @alias module:model/PropertyType
     */
    constructor() { 
        
        PropertyType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PropertyType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropertyType} obj Optional instance to populate.
     * @return {module:model/PropertyType} The populated <code>PropertyType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropertyType();

            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = FullQualifiedName.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], [FullQualifiedName]);
            }
            if (data.hasOwnProperty('datatype')) {
                obj['datatype'] = ApiClient.convertToType(data['datatype'], 'String');
            }
            if (data.hasOwnProperty('piiField')) {
                obj['piiField'] = ApiClient.convertToType(data['piiField'], 'Boolean');
            }
            if (data.hasOwnProperty('multiValued')) {
                obj['multiValued'] = ApiClient.convertToType(data['multiValued'], 'Boolean');
            }
            if (data.hasOwnProperty('analyzer')) {
                obj['analyzer'] = ApiClient.convertToType(data['analyzer'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} title
 */
PropertyType.prototype['title'] = undefined;

/**
 * @member {String} id
 */
PropertyType.prototype['id'] = undefined;

/**
 * @member {module:model/FullQualifiedName} type
 */
PropertyType.prototype['type'] = undefined;

/**
 * @member {String} description
 */
PropertyType.prototype['description'] = undefined;

/**
 * @member {Array.<module:model/FullQualifiedName>} schemas
 */
PropertyType.prototype['schemas'] = undefined;

/**
 * @member {String} datatype
 */
PropertyType.prototype['datatype'] = undefined;

/**
 * @member {Boolean} piiField
 */
PropertyType.prototype['piiField'] = undefined;

/**
 * @member {Boolean} multiValued
 */
PropertyType.prototype['multiValued'] = undefined;

/**
 * @member {String} analyzer
 */
PropertyType.prototype['analyzer'] = undefined;






export default PropertyType;

