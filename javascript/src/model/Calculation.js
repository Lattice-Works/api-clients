/**
 * OpenLattice API
 * OpenLattice API
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Calculation model module.
 * @module model/Calculation
 * @version 0.0.1
 */
class Calculation {
    /**
     * Constructs a new <code>Calculation</code>.
     * @alias module:model/Calculation
     */
    constructor() { 
        
        Calculation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Calculation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Calculation} obj Optional instance to populate.
     * @return {module:model/Calculation} The populated <code>Calculation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Calculation();

            if (data.hasOwnProperty('aggregationType')) {
                obj['aggregationType'] = ApiClient.convertToType(data['aggregationType'], 'String');
            }
            if (data.hasOwnProperty('firstPropertyId')) {
                obj['firstPropertyId'] = ApiClient.convertToType(data['firstPropertyId'], 'String');
            }
            if (data.hasOwnProperty('secondPropertyId')) {
                obj['secondPropertyId'] = ApiClient.convertToType(data['secondPropertyId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Calculation.AggregationTypeEnum} aggregationType
 */
Calculation.prototype['aggregationType'] = undefined;

/**
 * @member {String} firstPropertyId
 */
Calculation.prototype['firstPropertyId'] = undefined;

/**
 * @member {String} secondPropertyId
 */
Calculation.prototype['secondPropertyId'] = undefined;





/**
 * Allowed values for the <code>aggregationType</code> property.
 * @enum {String}
 * @readonly
 */
Calculation['AggregationTypeEnum'] = {

    /**
     * value: "DURATION_YEAR"
     * @const
     */
    "YEAR": "DURATION_YEAR",

    /**
     * value: "DURATION_DAY"
     * @const
     */
    "DAY": "DURATION_DAY",

    /**
     * value: "DURATION_HOUR"
     * @const
     */
    "HOUR": "DURATION_HOUR"
};



export default Calculation;

