/**
 * OpenLattice API
 * OpenLattice API
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrientedPropertyTypeId model module.
 * @module model/OrientedPropertyTypeId
 * @version 0.0.1
 */
class OrientedPropertyTypeId {
    /**
     * Constructs a new <code>OrientedPropertyTypeId</code>.
     * @alias module:model/OrientedPropertyTypeId
     */
    constructor() { 
        
        OrientedPropertyTypeId.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrientedPropertyTypeId</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrientedPropertyTypeId} obj Optional instance to populate.
     * @return {module:model/OrientedPropertyTypeId} The populated <code>OrientedPropertyTypeId</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrientedPropertyTypeId();

            if (data.hasOwnProperty('propertyTypeId')) {
                obj['propertyTypeId'] = ApiClient.convertToType(data['propertyTypeId'], 'String');
            }
            if (data.hasOwnProperty('orientation')) {
                obj['orientation'] = ApiClient.convertToType(data['orientation'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} propertyTypeId
 */
OrientedPropertyTypeId.prototype['propertyTypeId'] = undefined;

/**
 * @member {module:model/OrientedPropertyTypeId.OrientationEnum} orientation
 */
OrientedPropertyTypeId.prototype['orientation'] = undefined;





/**
 * Allowed values for the <code>orientation</code> property.
 * @enum {String}
 * @readonly
 */
OrientedPropertyTypeId['OrientationEnum'] = {

    /**
     * value: "SRC"
     * @const
     */
    "SRC": "SRC",

    /**
     * value: "EDGE"
     * @const
     */
    "EDGE": "EDGE",

    /**
     * value: "DSt"
     * @const
     */
    "DSt": "DSt"
};



export default OrientedPropertyTypeId;

