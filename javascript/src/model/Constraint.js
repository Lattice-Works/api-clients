/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SearchDetails from './SearchDetails';

/**
 * The Constraint model module.
 * @module model/Constraint
 * @version 0.0.1
 */
class Constraint {
    /**
     * Constructs a new <code>Constraint</code>.
     * @alias module:model/Constraint
     */
    constructor() { 
        
        Constraint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Constraint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Constraint} obj Optional instance to populate.
     * @return {module:model/Constraint} The populated <code>Constraint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Constraint();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('searchTerm')) {
                obj['searchTerm'] = ApiClient.convertToType(data['searchTerm'], 'String');
            }
            if (data.hasOwnProperty('fuzzy')) {
                obj['fuzzy'] = ApiClient.convertToType(data['fuzzy'], 'Boolean');
            }
            if (data.hasOwnProperty('searchFields')) {
                obj['searchFields'] = ApiClient.convertToType(data['searchFields'], [SearchDetails]);
            }
            if (data.hasOwnProperty('propertyTypeId')) {
                obj['propertyTypeId'] = ApiClient.convertToType(data['propertyTypeId'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('radius')) {
                obj['radius'] = ApiClient.convertToType(data['radius'], 'Number');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('zones')) {
                obj['zones'] = ApiClient.convertToType(data['zones'], [[['Number']]]);
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Date');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Constraint.TypeEnum} type
 */
Constraint.prototype['type'] = undefined;

/**
 * @member {String} searchTerm
 */
Constraint.prototype['searchTerm'] = undefined;

/**
 * @member {Boolean} fuzzy
 */
Constraint.prototype['fuzzy'] = undefined;

/**
 * @member {Array.<module:model/SearchDetails>} searchFields
 */
Constraint.prototype['searchFields'] = undefined;

/**
 * @member {String} propertyTypeId
 */
Constraint.prototype['propertyTypeId'] = undefined;

/**
 * @member {Number} latitude
 */
Constraint.prototype['latitude'] = undefined;

/**
 * @member {Number} longitude
 */
Constraint.prototype['longitude'] = undefined;

/**
 * @member {Number} radius
 */
Constraint.prototype['radius'] = undefined;

/**
 * @member {module:model/Constraint.UnitEnum} unit
 */
Constraint.prototype['unit'] = undefined;

/**
 * @member {Array.<Array.<Array.<Number>>>} zones
 */
Constraint.prototype['zones'] = undefined;

/**
 * @member {Date} start
 */
Constraint.prototype['start'] = undefined;

/**
 * @member {Date} end
 */
Constraint.prototype['end'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Constraint['TypeEnum'] = {

    /**
     * value: "simple"
     * @const
     */
    "simple": "simple",

    /**
     * value: "advanced"
     * @const
     */
    "advanced": "advanced",

    /**
     * value: "geoDistance"
     * @const
     */
    "geoDistance": "geoDistance",

    /**
     * value: "geoPolygon"
     * @const
     */
    "geoPolygon": "geoPolygon",

    /**
     * value: "writeDateTimeFilter"
     * @const
     */
    "writeDateTimeFilter": "writeDateTimeFilter"
};


/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
Constraint['UnitEnum'] = {

    /**
     * value: "miles"
     * @const
     */
    "miles": "miles",

    /**
     * value: "mi"
     * @const
     */
    "mi": "mi",

    /**
     * value: "yards"
     * @const
     */
    "yards": "yards",

    /**
     * value: "yd"
     * @const
     */
    "yd": "yd",

    /**
     * value: "feet"
     * @const
     */
    "feet": "feet",

    /**
     * value: "ft"
     * @const
     */
    "ft": "ft",

    /**
     * value: "inch"
     * @const
     */
    "inch": "inch",

    /**
     * value: "in"
     * @const
     */
    "in": "in",

    /**
     * value: "kilometers"
     * @const
     */
    "kilometers": "kilometers",

    /**
     * value: "km"
     * @const
     */
    "km": "km",

    /**
     * value: "meters"
     * @const
     */
    "meters": "meters",

    /**
     * value: "m"
     * @const
     */
    "m": "m",

    /**
     * value: "centimeters"
     * @const
     */
    "centimeters": "centimeters",

    /**
     * value: "cm"
     * @const
     */
    "cm": "cm",

    /**
     * value: "millimeters"
     * @const
     */
    "millimeters": "millimeters",

    /**
     * value: "mm"
     * @const
     */
    "mm": "mm",

    /**
     * value: "nauticalmiles"
     * @const
     */
    "nauticalmiles": "nauticalmiles",

    /**
     * value: "nmi"
     * @const
     */
    "nmi": "nmi",

    /**
     * value: "NM"
     * @const
     */
    "NM": "NM"
};



export default Constraint;

