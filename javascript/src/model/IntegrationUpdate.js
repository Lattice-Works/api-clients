/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FlightPlanParametersUpdate from './FlightPlanParametersUpdate';

/**
 * The IntegrationUpdate model module.
 * @module model/IntegrationUpdate
 * @version 0.0.1
 */
class IntegrationUpdate {
    /**
     * Constructs a new <code>IntegrationUpdate</code>.
     * @alias module:model/IntegrationUpdate
     */
    constructor() { 
        
        IntegrationUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IntegrationUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntegrationUpdate} obj Optional instance to populate.
     * @return {module:model/IntegrationUpdate} The populated <code>IntegrationUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntegrationUpdate();

            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ApiClient.convertToType(data['environment'], 'String');
            }
            if (data.hasOwnProperty('s3Bucket')) {
                obj['s3Bucket'] = ApiClient.convertToType(data['s3Bucket'], 'String');
            }
            if (data.hasOwnProperty('contacts')) {
                obj['contacts'] = ApiClient.convertToType(data['contacts'], ['String']);
            }
            if (data.hasOwnProperty('organizationId')) {
                obj['organizationId'] = ApiClient.convertToType(data['organizationId'], 'String');
            }
            if (data.hasOwnProperty('maxConnections')) {
                obj['maxConnections'] = ApiClient.convertToType(data['maxConnections'], 'Number');
            }
            if (data.hasOwnProperty('callbackUrls')) {
                obj['callbackUrls'] = ApiClient.convertToType(data['callbackUrls'], ['String']);
            }
            if (data.hasOwnProperty('flightPlanParameters')) {
                obj['flightPlanParameters'] = ApiClient.convertToType(data['flightPlanParameters'], {'String': FlightPlanParametersUpdate});
            }
        }
        return obj;
    }


}

/**
 * the retrofit environment (e.g. PROD_INTEGRATION, LOCAL)
 * @member {module:model/IntegrationUpdate.EnvironmentEnum} environment
 */
IntegrationUpdate.prototype['environment'] = undefined;

/**
 * the url of the s3bucket to be used
 * @member {String} s3Bucket
 */
IntegrationUpdate.prototype['s3Bucket'] = undefined;

/**
 * the set of email addresses of those responsible for the integration
 * @member {Array.<String>} contacts
 */
IntegrationUpdate.prototype['contacts'] = undefined;

/**
 * the id of the organization that owns the integration
 * @member {String} organizationId
 */
IntegrationUpdate.prototype['organizationId'] = undefined;

/**
 * maximum number of connections to postgres allowed for this integration
 * @member {Number} maxConnections
 */
IntegrationUpdate.prototype['maxConnections'] = undefined;

/**
 * urls to receive a POST when integration has completed
 * @member {Array.<String>} callbackUrls
 */
IntegrationUpdate.prototype['callbackUrls'] = undefined;

/**
 * a map from [Flight] name to [FlightPlanParametersUpdate]
 * @member {Object.<String, module:model/FlightPlanParametersUpdate>} flightPlanParameters
 */
IntegrationUpdate.prototype['flightPlanParameters'] = undefined;





/**
 * Allowed values for the <code>environment</code> property.
 * @enum {String}
 * @readonly
 */
IntegrationUpdate['EnvironmentEnum'] = {

    /**
     * value: "PROD_INTEGRATION"
     * @const
     */
    "PROD_INTEGRATION": "PROD_INTEGRATION",

    /**
     * value: "STAGING_INTEGRATION"
     * @const
     */
    "STAGING_INTEGRATION": "STAGING_INTEGRATION",

    /**
     * value: "LOCAL"
     * @const
     */
    "LOCAL": "LOCAL"
};



export default IntegrationUpdate;

