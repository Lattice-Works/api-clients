/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SortDefinition model module.
 * @module model/SortDefinition
 * @version 0.0.1
 */
class SortDefinition {
    /**
     * Constructs a new <code>SortDefinition</code>.
     * @alias module:model/SortDefinition
     */
    constructor() { 
        
        SortDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SortDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SortDefinition} obj Optional instance to populate.
     * @return {module:model/SortDefinition} The populated <code>SortDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SortDefinition();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('isDescending')) {
                obj['isDescending'] = ApiClient.convertToType(data['isDescending'], 'Boolean');
            }
            if (data.hasOwnProperty('propertyTypeId')) {
                obj['propertyTypeId'] = ApiClient.convertToType(data['propertyTypeId'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/SortDefinition.TypeEnum} type
 */
SortDefinition.prototype['type'] = undefined;

/**
 * @member {Boolean} isDescending
 */
SortDefinition.prototype['isDescending'] = undefined;

/**
 * @member {String} propertyTypeId
 */
SortDefinition.prototype['propertyTypeId'] = undefined;

/**
 * @member {Number} latitude
 */
SortDefinition.prototype['latitude'] = undefined;

/**
 * @member {Number} longitude
 */
SortDefinition.prototype['longitude'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SortDefinition['TypeEnum'] = {

    /**
     * value: "field"
     * @const
     */
    "field": "field",

    /**
     * value: "score"
     * @const
     */
    "score": "score",

    /**
     * value: "geoDistance"
     * @const
     */
    "geoDistance": "geoDistance"
};



export default SortDefinition;

