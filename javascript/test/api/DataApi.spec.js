/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenLatticeApi);
  }
}(this, function(expect, OpenLatticeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenLatticeApi.DataApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DataApi', function() {
    describe('createAssociations', function() {
      it('should call createAssociations successfully', function(done) {
        //uncomment below and update the code to test createAssociations
        //instance.createAssociations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEdges', function() {
      it('should call createEdges successfully', function(done) {
        //uncomment below and update the code to test createEdges
        //instance.createEdges(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEntities', function() {
      it('should call createEntities successfully', function(done) {
        //uncomment below and update the code to test createEntities
        //instance.createEntities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEntityAndAssociationData', function() {
      it('should call createEntityAndAssociationData successfully', function(done) {
        //uncomment below and update the code to test createEntityAndAssociationData
        //instance.createEntityAndAssociationData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAllEntitiesFromEntitySet', function() {
      it('should call deleteAllEntitiesFromEntitySet successfully', function(done) {
        //uncomment below and update the code to test deleteAllEntitiesFromEntitySet
        //instance.deleteAllEntitiesFromEntitySet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEntities', function() {
      it('should call deleteEntities successfully', function(done) {
        //uncomment below and update the code to test deleteEntities
        //instance.deleteEntities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEntitiesAndNeighbors', function() {
      it('should call deleteEntitiesAndNeighbors successfully', function(done) {
        //uncomment below and update the code to test deleteEntitiesAndNeighbors
        //instance.deleteEntitiesAndNeighbors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEntity', function() {
      it('should call deleteEntity successfully', function(done) {
        //uncomment below and update the code to test deleteEntity
        //instance.deleteEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEntityProperties', function() {
      it('should call deleteEntityProperties successfully', function(done) {
        //uncomment below and update the code to test deleteEntityProperties
        //instance.deleteEntityProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEntity', function() {
      it('should call getEntity successfully', function(done) {
        //uncomment below and update the code to test getEntity
        //instance.getEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEntityPropertyValues', function() {
      it('should call getEntityPropertyValues successfully', function(done) {
        //uncomment below and update the code to test getEntityPropertyValues
        //instance.getEntityPropertyValues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEntitySetSize', function() {
      it('should call getEntitySetSize successfully', function(done) {
        //uncomment below and update the code to test getEntitySetSize
        //instance.getEntitySetSize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadEntitySetData', function() {
      it('should call loadEntitySetData successfully', function(done) {
        //uncomment below and update the code to test loadEntitySetData
        //instance.loadEntitySetData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadLinkedEntitySetBreakdown', function() {
      it('should call loadLinkedEntitySetBreakdown successfully', function(done) {
        //uncomment below and update the code to test loadLinkedEntitySetBreakdown
        //instance.loadLinkedEntitySetBreakdown(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadSelectedEntitySetData', function() {
      it('should call loadSelectedEntitySetData successfully', function(done) {
        //uncomment below and update the code to test loadSelectedEntitySetData
        //instance.loadSelectedEntitySetData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceAssociationData', function() {
      it('should call replaceAssociationData successfully', function(done) {
        //uncomment below and update the code to test replaceAssociationData
        //instance.replaceAssociationData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceEntityProperties', function() {
      it('should call replaceEntityProperties successfully', function(done) {
        //uncomment below and update the code to test replaceEntityProperties
        //instance.replaceEntityProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEntitiesInEntitySet', function() {
      it('should call updateEntitiesInEntitySet successfully', function(done) {
        //uncomment below and update the code to test updateEntitiesInEntitySet
        //instance.updateEntitiesInEntitySet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
