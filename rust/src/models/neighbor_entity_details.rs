/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NeighborEntityDetails {
    #[serde(rename = "associationEntitySet", skip_serializing_if = "Option::is_none")]
    pub association_entity_set: Option<crate::models::EntitySet>,
    #[serde(rename = "associationDetails", skip_serializing_if = "Option::is_none")]
    pub association_details: Option<::std::collections::HashMap<String, Vec<String>>>,
    #[serde(rename = "neighborEntitySet", skip_serializing_if = "Option::is_none")]
    pub neighbor_entity_set: Option<crate::models::EntitySet>,
    #[serde(rename = "neighborId", skip_serializing_if = "Option::is_none")]
    pub neighbor_id: Option<String>,
    #[serde(rename = "neighborDetails", skip_serializing_if = "Option::is_none")]
    pub neighbor_details: Option<::std::collections::HashMap<String, Vec<String>>>,
}

impl NeighborEntityDetails {
    pub fn new() -> NeighborEntityDetails {
        NeighborEntityDetails {
            association_entity_set: None,
            association_details: None,
            neighbor_entity_set: None,
            neighbor_id: None,
            neighbor_details: None,
        }
    }
}


