/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssociationType {
    #[serde(rename = "entityType", skip_serializing_if = "Option::is_none")]
    pub entity_type: Option<crate::models::EntityType>,
    #[serde(rename = "src", skip_serializing_if = "Option::is_none")]
    pub src: Option<Vec<String>>,
    #[serde(rename = "dst", skip_serializing_if = "Option::is_none")]
    pub dst: Option<Vec<String>>,
    #[serde(rename = "bidirectional", skip_serializing_if = "Option::is_none")]
    pub bidirectional: Option<bool>,
}

impl AssociationType {
    pub fn new() -> AssociationType {
        AssociationType {
            entity_type: None,
            src: None,
            dst: None,
            bidirectional: None,
        }
    }
}


