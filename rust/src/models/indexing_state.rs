/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IndexingState {
    #[serde(rename = "indexing", skip_serializing_if = "Option::is_none")]
    pub indexing: Option<::std::collections::HashMap<String, Vec<String>>>,
    #[serde(rename = "queue", skip_serializing_if = "Option::is_none")]
    pub queue: Option<Vec<String>>,
    #[serde(rename = "currentEntitySet", skip_serializing_if = "Option::is_none")]
    pub current_entity_set: Option<String>,
    #[serde(rename = "queueSize", skip_serializing_if = "Option::is_none")]
    pub queue_size: Option<i32>,
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}

impl IndexingState {
    pub fn new() -> IndexingState {
        IndexingState {
            indexing: None,
            queue: None,
            current_entity_set: None,
            queue_size: None,
            count: None,
        }
    }
}


