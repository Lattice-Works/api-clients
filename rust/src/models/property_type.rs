/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PropertyType {
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<crate::models::FullQualifiedName>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "schemas", skip_serializing_if = "Option::is_none")]
    pub schemas: Option<Vec<crate::models::FullQualifiedName>>,
    #[serde(rename = "datatype", skip_serializing_if = "Option::is_none")]
    pub datatype: Option<Datatype>,
    #[serde(rename = "pii", skip_serializing_if = "Option::is_none")]
    pub pii: Option<bool>,
    #[serde(rename = "multiValued", skip_serializing_if = "Option::is_none")]
    pub multi_valued: Option<bool>,
    #[serde(rename = "analyzer", skip_serializing_if = "Option::is_none")]
    pub analyzer: Option<Analyzer>,
    #[serde(rename = "enumValues", skip_serializing_if = "Option::is_none")]
    pub enum_values: Option<Vec<String>>,
    #[serde(rename = "indexType", skip_serializing_if = "Option::is_none")]
    pub index_type: Option<IndexType>,
}

impl PropertyType {
    pub fn new() -> PropertyType {
        PropertyType {
            title: None,
            id: None,
            _type: None,
            description: None,
            schemas: None,
            datatype: None,
            pii: None,
            multi_valued: None,
            analyzer: None,
            enum_values: None,
            index_type: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Datatype {
    #[serde(rename = "Binary")]
    Binary,
    #[serde(rename = "Boolean")]
    Boolean,
    #[serde(rename = "Byte")]
    Byte,
    #[serde(rename = "SByte")]
    SByte,
    #[serde(rename = "Date")]
    Date,
    #[serde(rename = "DateTimeOffset")]
    DateTimeOffset,
    #[serde(rename = "TimeOfDay")]
    TimeOfDay,
    #[serde(rename = "Duration")]
    Duration,
    #[serde(rename = "Decimal")]
    Decimal,
    #[serde(rename = "Single")]
    Single,
    #[serde(rename = "Double")]
    Double,
    #[serde(rename = "Guid")]
    Guid,
    #[serde(rename = "Int16")]
    Int16,
    #[serde(rename = "Int32")]
    Int32,
    #[serde(rename = "Int64")]
    Int64,
    #[serde(rename = "String")]
    String,
    #[serde(rename = "Stream")]
    Stream,
    #[serde(rename = "Geography")]
    Geography,
    #[serde(rename = "GeographyPoint")]
    GeographyPoint,
    #[serde(rename = "GeographyLineString")]
    GeographyLineString,
    #[serde(rename = "GeographyPolygon")]
    GeographyPolygon,
    #[serde(rename = "GeographyMultiPoint")]
    GeographyMultiPoint,
    #[serde(rename = "GeographyMultiLineString")]
    GeographyMultiLineString,
    #[serde(rename = "GeographyMultiPolygon")]
    GeographyMultiPolygon,
    #[serde(rename = "GeographyCollection")]
    GeographyCollection,
    #[serde(rename = "Geometry")]
    Geometry,
    #[serde(rename = "GeometryPoint")]
    GeometryPoint,
    #[serde(rename = "GeometryLineString")]
    GeometryLineString,
    #[serde(rename = "GeometryPolygon")]
    GeometryPolygon,
    #[serde(rename = "GeometryMultiPoint")]
    GeometryMultiPoint,
    #[serde(rename = "GeometryMultiLineString")]
    GeometryMultiLineString,
    #[serde(rename = "GeometryMultiPolygon")]
    GeometryMultiPolygon,
    #[serde(rename = "GeometryCollection")]
    GeometryCollection,
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Analyzer {
    #[serde(rename = "NONE")]
    NONE,
    #[serde(rename = "METAPHONE")]
    METAPHONE,
    #[serde(rename = "STANDARD")]
    STANDARD,
    #[serde(rename = "NOT_ANALYZED")]
    NOTANALYZED,
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IndexType {
    #[serde(rename = "BTREE")]
    BTREE,
    #[serde(rename = "HASH")]
    HASH,
    #[serde(rename = "GIN")]
    GIN,
    #[serde(rename = "NONE")]
    NONE,
}

