/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EntityType {
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<crate::models::FullQualifiedName>,
    #[serde(rename = "schemas", skip_serializing_if = "Option::is_none")]
    pub schemas: Option<Vec<crate::models::FullQualifiedName>>,
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<Vec<String>>,
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<String>>,
    #[serde(rename = "propertyTags", skip_serializing_if = "Option::is_none")]
    pub property_tags: Option<::std::collections::HashMap<String, Vec<String>>>,
    #[serde(rename = "basetype", skip_serializing_if = "Option::is_none")]
    pub basetype: Option<String>,
    #[serde(rename = "category", skip_serializing_if = "Option::is_none")]
    pub category: Option<Category>,
}

impl EntityType {
    pub fn new() -> EntityType {
        EntityType {
            title: None,
            description: None,
            id: None,
            _type: None,
            schemas: None,
            key: None,
            properties: None,
            property_tags: None,
            basetype: None,
            category: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Category {
    #[serde(rename = "AssociationType")]
    AssociationType,
    #[serde(rename = "EntityType")]
    EntityType,
}

