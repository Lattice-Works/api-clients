/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Organization {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "principal", skip_serializing_if = "Option::is_none")]
    pub principal: Option<crate::models::Principal>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "emails", skip_serializing_if = "Option::is_none")]
    pub emails: Option<Vec<String>>,
    #[serde(rename = "members", skip_serializing_if = "Option::is_none")]
    pub members: Option<Vec<crate::models::Principal>>,
    #[serde(rename = "roles", skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<crate::models::Role>>,
    #[serde(rename = "apps", skip_serializing_if = "Option::is_none")]
    pub apps: Option<Vec<String>>,
    #[serde(rename = "smsEntitySetInfo", skip_serializing_if = "Option::is_none")]
    pub sms_entity_set_info: Option<Vec<crate::models::SmsEntitySetInformation>>,
    #[serde(rename = "partitions", skip_serializing_if = "Option::is_none")]
    pub partitions: Option<Vec<i32>>,
}

impl Organization {
    pub fn new() -> Organization {
        Organization {
            id: None,
            principal: None,
            title: None,
            description: None,
            emails: None,
            members: None,
            roles: None,
            apps: None,
            sms_entity_set_info: None,
            partitions: None,
        }
    }
}


