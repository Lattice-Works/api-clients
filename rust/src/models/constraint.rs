/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Constraint {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    #[serde(rename = "searchTerm", skip_serializing_if = "Option::is_none")]
    pub search_term: Option<String>,
    #[serde(rename = "fuzzy", skip_serializing_if = "Option::is_none")]
    pub fuzzy: Option<bool>,
    #[serde(rename = "searchFields", skip_serializing_if = "Option::is_none")]
    pub search_fields: Option<Vec<crate::models::SearchDetails>>,
    #[serde(rename = "propertyTypeId", skip_serializing_if = "Option::is_none")]
    pub property_type_id: Option<String>,
    #[serde(rename = "latitude", skip_serializing_if = "Option::is_none")]
    pub latitude: Option<f32>,
    #[serde(rename = "longitude", skip_serializing_if = "Option::is_none")]
    pub longitude: Option<f32>,
    #[serde(rename = "radius", skip_serializing_if = "Option::is_none")]
    pub radius: Option<f32>,
    #[serde(rename = "unit", skip_serializing_if = "Option::is_none")]
    pub unit: Option<Unit>,
    #[serde(rename = "zones", skip_serializing_if = "Option::is_none")]
    pub zones: Option<Vec<Vec<Vec<f32>>>>,
    #[serde(rename = "start", skip_serializing_if = "Option::is_none")]
    pub start: Option<String>,
    #[serde(rename = "end", skip_serializing_if = "Option::is_none")]
    pub end: Option<String>,
}

impl Constraint {
    pub fn new() -> Constraint {
        Constraint {
            _type: None,
            search_term: None,
            fuzzy: None,
            search_fields: None,
            property_type_id: None,
            latitude: None,
            longitude: None,
            radius: None,
            unit: None,
            zones: None,
            start: None,
            end: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "simple")]
    Simple,
    #[serde(rename = "advanced")]
    Advanced,
    #[serde(rename = "geoDistance")]
    GeoDistance,
    #[serde(rename = "geoPolygon")]
    GeoPolygon,
    #[serde(rename = "writeDateTimeFilter")]
    WriteDateTimeFilter,
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Unit {
    #[serde(rename = "miles")]
    Miles,
    #[serde(rename = "mi")]
    Mi,
    #[serde(rename = "yards")]
    Yards,
    #[serde(rename = "yd")]
    Yd,
    #[serde(rename = "feet")]
    Feet,
    #[serde(rename = "ft")]
    Ft,
    #[serde(rename = "inch")]
    Inch,
    #[serde(rename = "in")]
    _In,
    #[serde(rename = "kilometers")]
    Kilometers,
    #[serde(rename = "km")]
    Km,
    #[serde(rename = "meters")]
    Meters,
    #[serde(rename = "m")]
    M,
    #[serde(rename = "centimeters")]
    Centimeters,
    #[serde(rename = "cm")]
    Cm,
    #[serde(rename = "millimeters")]
    Millimeters,
    #[serde(rename = "mm")]
    Mm,
    #[serde(rename = "nauticalmiles")]
    Nauticalmiles,
    #[serde(rename = "nmi")]
    Nmi,
    #[serde(rename = "NM")]
    NM,
}

