/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Auth0userBasic {
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "nickname", skip_serializing_if = "Option::is_none")]
    pub nickname: Option<String>,
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    #[serde(rename = "roles", skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    #[serde(rename = "com/openlattice/organization", skip_serializing_if = "Option::is_none")]
    pub com_openlattice_organization: Option<Vec<String>>,
}

impl Auth0userBasic {
    pub fn new() -> Auth0userBasic {
        Auth0userBasic {
            user_id: None,
            email: None,
            nickname: None,
            username: None,
            roles: None,
            com_openlattice_organization: None,
        }
    }
}


