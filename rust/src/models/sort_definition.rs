/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SortDefinition {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    #[serde(rename = "isDescending", skip_serializing_if = "Option::is_none")]
    pub is_descending: Option<bool>,
    #[serde(rename = "propertyTypeId", skip_serializing_if = "Option::is_none")]
    pub property_type_id: Option<String>,
    #[serde(rename = "latitude", skip_serializing_if = "Option::is_none")]
    pub latitude: Option<f32>,
    #[serde(rename = "longitude", skip_serializing_if = "Option::is_none")]
    pub longitude: Option<f32>,
}

impl SortDefinition {
    pub fn new() -> SortDefinition {
        SortDefinition {
            _type: None,
            is_descending: None,
            property_type_id: None,
            latitude: None,
            longitude: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "field")]
    Field,
    #[serde(rename = "score")]
    Score,
    #[serde(rename = "geoDistance")]
    GeoDistance,
}

