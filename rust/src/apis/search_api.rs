/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct SearchApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> SearchApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> SearchApiClient<C> {
        SearchApiClient {
            configuration,
        }
    }
}

pub trait SearchApi {
    fn execute_advanced_entity_set_data_query(&self, entity_set_id: &str, advanced_search: crate::models::AdvancedSearch) -> Box<dyn Future<Item = crate::models::DataSearchResult, Error = Error<serde_json::Value>>>;
    fn execute_entity_neighbor_search(&self, entity_set_id: &str, entity_key_id: &str) -> Box<dyn Future<Item = Vec<crate::models::NeighborEntityDetails>, Error = Error<serde_json::Value>>>;
    fn execute_entity_neighbor_search_bulk(&self, entity_set_id: &str, request_body: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, Vec<crate::models::NeighborEntityDetails>>, Error = Error<serde_json::Value>>>;
    fn execute_entity_set_data_query(&self, entity_set_id: &str, search_term: crate::models::SearchTerm) -> Box<dyn Future<Item = crate::models::DataSearchResult, Error = Error<serde_json::Value>>>;
    fn execute_entity_set_keyword_query(&self, search: crate::models::Search) -> Box<dyn Future<Item = ::std::collections::HashMap<String, ::std::collections::HashMap<String, ::std::collections::HashMap<String, Vec<crate::models::NeighborEntityIds>>>>, Error = Error<serde_json::Value>>>;
    fn execute_filtered_entity_neighbor_id_search(&self, entity_set_id: &str, neighbor_search_filter: crate::models::NeighborSearchFilter) -> Box<dyn Future<Item = ::std::collections::HashMap<String, ::std::collections::HashMap<String, ::std::collections::HashMap<String, Vec<crate::models::NeighborEntityIds>>>>, Error = Error<serde_json::Value>>>;
    fn execute_filtered_entity_neighbor_search(&self, entity_set_id: &str, neighbor_search_filter: crate::models::NeighborSearchFilter) -> Box<dyn Future<Item = ::std::collections::HashMap<String, Vec<crate::models::NeighborEntityDetails>>, Error = Error<serde_json::Value>>>;
    fn get_entity_sets(&self, start: i32, num_results: i32) -> Box<dyn Future<Item = Vec<crate::models::SearchResult>, Error = Error<serde_json::Value>>>;
    fn get_popular_entity_set(&self, ) -> Box<dyn Future<Item = Vec<crate::models::EntitySet>, Error = Error<serde_json::Value>>>;
    fn search_entity_set_data(&self, search_constraints: crate::models::SearchConstraints) -> Box<dyn Future<Item = crate::models::DataSearchResult, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>SearchApi for SearchApiClient<C> {
    fn execute_advanced_entity_set_data_query(&self, entity_set_id: &str, advanced_search: crate::models::AdvancedSearch) -> Box<dyn Future<Item = crate::models::DataSearchResult, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/datastore/search/advanced/{entitySetId}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("entitySetId".to_string(), entity_set_id.to_string());
        req = req.with_body_param(advanced_search);

        req.execute(self.configuration.borrow())
    }

    fn execute_entity_neighbor_search(&self, entity_set_id: &str, entity_key_id: &str) -> Box<dyn Future<Item = Vec<crate::models::NeighborEntityDetails>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/search/{entitySetId}/{entityKeyId}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("entitySetId".to_string(), entity_set_id.to_string());
        req = req.with_path_param("entityKeyId".to_string(), entity_key_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn execute_entity_neighbor_search_bulk(&self, entity_set_id: &str, request_body: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, Vec<crate::models::NeighborEntityDetails>>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/datastore/search/{entitySetId}/neighbors".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("entitySetId".to_string(), entity_set_id.to_string());
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    fn execute_entity_set_data_query(&self, entity_set_id: &str, search_term: crate::models::SearchTerm) -> Box<dyn Future<Item = crate::models::DataSearchResult, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/datastore/search/{entitySetId}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("entitySetId".to_string(), entity_set_id.to_string());
        req = req.with_body_param(search_term);

        req.execute(self.configuration.borrow())
    }

    fn execute_entity_set_keyword_query(&self, search: crate::models::Search) -> Box<dyn Future<Item = ::std::collections::HashMap<String, ::std::collections::HashMap<String, ::std::collections::HashMap<String, Vec<crate::models::NeighborEntityIds>>>>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/datastore/search".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_body_param(search);

        req.execute(self.configuration.borrow())
    }

    fn execute_filtered_entity_neighbor_id_search(&self, entity_set_id: &str, neighbor_search_filter: crate::models::NeighborSearchFilter) -> Box<dyn Future<Item = ::std::collections::HashMap<String, ::std::collections::HashMap<String, ::std::collections::HashMap<String, Vec<crate::models::NeighborEntityIds>>>>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/datastore/search/{entitySetId}/neighbors/advanced/ids".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("entitySetId".to_string(), entity_set_id.to_string());
        req = req.with_body_param(neighbor_search_filter);

        req.execute(self.configuration.borrow())
    }

    fn execute_filtered_entity_neighbor_search(&self, entity_set_id: &str, neighbor_search_filter: crate::models::NeighborSearchFilter) -> Box<dyn Future<Item = ::std::collections::HashMap<String, Vec<crate::models::NeighborEntityDetails>>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/datastore/search/{entitySetId}/neighbors/advanced".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("entitySetId".to_string(), entity_set_id.to_string());
        req = req.with_body_param(neighbor_search_filter);

        req.execute(self.configuration.borrow())
    }

    fn get_entity_sets(&self, start: i32, num_results: i32) -> Box<dyn Future<Item = Vec<crate::models::SearchResult>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/search/entity-sets/{start}/{numResults}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("start".to_string(), start.to_string());
        req = req.with_path_param("numResults".to_string(), num_results.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_popular_entity_set(&self, ) -> Box<dyn Future<Item = Vec<crate::models::EntitySet>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/search/popular".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;

        req.execute(self.configuration.borrow())
    }

    fn search_entity_set_data(&self, search_constraints: crate::models::SearchConstraints) -> Box<dyn Future<Item = crate::models::DataSearchResult, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/datastore/search".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_body_param(search_constraints);

        req.execute(self.configuration.borrow())
    }

}
