/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct AuthorizationsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> AuthorizationsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> AuthorizationsApiClient<C> {
        AuthorizationsApiClient {
            configuration,
        }
    }
}

pub trait AuthorizationsApi {
    fn check_authorizations(&self, access_check: crate::models::AccessCheck) -> Box<dyn Future<Item = Vec<crate::models::Authorization>, Error = Error<serde_json::Value>>>;
    fn get_accessible_objects(&self, object_type: Option<&str>, permission: Option<&str>, paging_token: Option<&str>) -> Box<dyn Future<Item = crate::models::AuthorizedObjectsSearchResult, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>AuthorizationsApi for AuthorizationsApiClient<C> {
    fn check_authorizations(&self, access_check: crate::models::AccessCheck) -> Box<dyn Future<Item = Vec<crate::models::Authorization>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/datastore/authorizations".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_body_param(access_check);

        req.execute(self.configuration.borrow())
    }

    fn get_accessible_objects(&self, object_type: Option<&str>, permission: Option<&str>, paging_token: Option<&str>) -> Box<dyn Future<Item = crate::models::AuthorizedObjectsSearchResult, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/authorizations".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        if let Some(ref s) = object_type {
            req = req.with_query_param("objectType".to_string(), s.to_string());
        }
        if let Some(ref s) = permission {
            req = req.with_query_param("permission".to_string(), s.to_string());
        }
        if let Some(ref s) = paging_token {
            req = req.with_query_param("pagingToken".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

}
