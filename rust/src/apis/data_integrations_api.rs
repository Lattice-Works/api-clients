/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct DataIntegrationsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> DataIntegrationsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DataIntegrationsApiClient<C> {
        DataIntegrationsApiClient {
            configuration,
        }
    }
}

pub trait DataIntegrationsApi {
    fn get_entity_key_ids(&self, entity_key: Vec<crate::models::EntityKey>) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>>;
    fn integrate_entity_and_association_data(&self, detailed_results: bool, bulk_data_creation: crate::models::BulkDataCreation) -> Box<dyn Future<Item = crate::models::IntegrationResults, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>DataIntegrationsApi for DataIntegrationsApiClient<C> {
    fn get_entity_key_ids(&self, entity_key: Vec<crate::models::EntityKey>) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/datastore/integration/entityKeyIds".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_body_param(entity_key);

        req.execute(self.configuration.borrow())
    }

    fn integrate_entity_and_association_data(&self, detailed_results: bool, bulk_data_creation: crate::models::BulkDataCreation) -> Box<dyn Future<Item = crate::models::IntegrationResults, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/datastore/integration".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_query_param("detailedResults".to_string(), detailed_results.to_string());
        req = req.with_body_param(bulk_data_creation);

        req.execute(self.configuration.borrow())
    }

}
