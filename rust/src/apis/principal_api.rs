/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PrincipalApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PrincipalApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PrincipalApiClient<C> {
        PrincipalApiClient {
            configuration,
        }
    }
}

pub trait PrincipalApi {
    fn get_all_users(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::Auth0userBasic>, Error = Error<serde_json::Value>>>;
    fn get_current_roles(&self, ) -> Box<dyn Future<Item = Vec<crate::models::SecurablePrincipal>, Error = Error<serde_json::Value>>>;
    fn get_materialized_view_account(&self, ) -> Box<dyn Future<Item = crate::models::MaterializedViewAccount, Error = Error<serde_json::Value>>>;
    fn get_user(&self, user_id: &str) -> Box<dyn Future<Item = crate::models::Auth0userBasic, Error = Error<serde_json::Value>>>;
    fn search_all_users_by_email(&self, email_address: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::Auth0userBasic>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PrincipalApi for PrincipalApiClient<C> {
    fn get_all_users(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::Auth0userBasic>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/principals/users/".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_current_roles(&self, ) -> Box<dyn Future<Item = Vec<crate::models::SecurablePrincipal>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/principals/roles/current/".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_materialized_view_account(&self, ) -> Box<dyn Future<Item = crate::models::MaterializedViewAccount, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/principals/db".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_user(&self, user_id: &str) -> Box<dyn Future<Item = crate::models::Auth0userBasic, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/principals/users/{userId}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("userId".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn search_all_users_by_email(&self, email_address: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::Auth0userBasic>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/principals/users/search/email/"{emailAddress}"".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("emailAddress".to_string(), email_address.to_string());

        req.execute(self.configuration.borrow())
    }

}
