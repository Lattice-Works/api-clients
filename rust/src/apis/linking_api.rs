/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct LinkingApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> LinkingApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> LinkingApiClient<C> {
        LinkingApiClient {
            configuration,
        }
    }
}

pub trait LinkingApi {
    fn add_linking_feedback(&self, linking_feedback: crate::models::LinkingFeedback) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn delete_linking_feedback(&self, entity_key_pair: crate::models::EntityKeyPair) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn get_all_linking_feedback(&self, ) -> Box<dyn Future<Item = Vec<crate::models::EntityLinkingFeedback>, Error = Error<serde_json::Value>>>;
    fn get_all_linking_feedback_with_features(&self, ) -> Box<dyn Future<Item = Vec<crate::models::EntityLinkingFeatures>, Error = Error<serde_json::Value>>>;
    fn get_linking_feedback_with_features(&self, entity_key_pair: crate::models::EntityKeyPair) -> Box<dyn Future<Item = crate::models::EntityLinkingFeatures, Error = Error<serde_json::Value>>>;
    fn get_linking_feedbacks_on_entity(&self, feedback_type: &str, entity_data_key: crate::models::EntityDataKey) -> Box<dyn Future<Item = Vec<crate::models::EntityLinkingFeedback>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>LinkingApi for LinkingApiClient<C> {
    fn add_linking_feedback(&self, linking_feedback: crate::models::LinkingFeedback) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/linker/linkingfeedback".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_body_param(linking_feedback);

        req.execute(self.configuration.borrow())
    }

    fn delete_linking_feedback(&self, entity_key_pair: crate::models::EntityKeyPair) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/linker/linkingfeedback".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_body_param(entity_key_pair);

        req.execute(self.configuration.borrow())
    }

    fn get_all_linking_feedback(&self, ) -> Box<dyn Future<Item = Vec<crate::models::EntityLinkingFeedback>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/linker/linkingfeedback/all".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_all_linking_feedback_with_features(&self, ) -> Box<dyn Future<Item = Vec<crate::models::EntityLinkingFeatures>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/linker/linkingfeedback/features/all".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_linking_feedback_with_features(&self, entity_key_pair: crate::models::EntityKeyPair) -> Box<dyn Future<Item = crate::models::EntityLinkingFeatures, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/linker/linkingfeedback/features".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_body_param(entity_key_pair);

        req.execute(self.configuration.borrow())
    }

    fn get_linking_feedbacks_on_entity(&self, feedback_type: &str, entity_data_key: crate::models::EntityDataKey) -> Box<dyn Future<Item = Vec<crate::models::EntityLinkingFeedback>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/linker/linkingfeedback/entity".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_query_param("feedbackType".to_string(), feedback_type.to_string());
        req = req.with_body_param(entity_data_key);

        req.execute(self.configuration.borrow())
    }

}
