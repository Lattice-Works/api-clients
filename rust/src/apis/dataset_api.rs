/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct DatasetApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> DatasetApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DatasetApiClient<C> {
        DatasetApiClient {
            configuration,
        }
    }
}

pub trait DatasetApi {
    fn get_external_database_table_with_columns(&self, organization_id: &str, table_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::OrganizationExternalDatabaseTableColumnsPair>, Error = Error<serde_json::Value>>>;
    fn get_external_database_tables(&self, organization_id: &str) -> Box<dyn Future<Item = Vec<crate::models::OrganizationExternalDatabaseTable>, Error = Error<serde_json::Value>>>;
    fn get_external_database_tables_with_columns(&self, organization_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, Vec<crate::models::OrganizationExternalDatabaseColumn>>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>DatasetApi for DatasetApiClient<C> {
    fn get_external_database_table_with_columns(&self, organization_id: &str, table_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::OrganizationExternalDatabaseTableColumnsPair>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/organization-database/{organizationId}/{tableId}/external-database-table/external-database-column".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("organizationId".to_string(), organization_id.to_string());
        req = req.with_path_param("tableId".to_string(), table_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_external_database_tables(&self, organization_id: &str) -> Box<dyn Future<Item = Vec<crate::models::OrganizationExternalDatabaseTable>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/organization-database/{organizationId}/external-database-table".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("organizationId".to_string(), organization_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_external_database_tables_with_columns(&self, organization_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, Vec<crate::models::OrganizationExternalDatabaseColumn>>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/organization-database/{organizationId}/external-database-table/external-database-column".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("organizationId".to_string(), organization_id.to_string());

        req.execute(self.configuration.borrow())
    }

}
