/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PermissionsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PermissionsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PermissionsApiClient<C> {
        PermissionsApiClient {
            configuration,
        }
    }
}

pub trait PermissionsApi {
    fn get_acl(&self, request_body: Vec<String>) -> Box<dyn Future<Item = crate::models::Acl, Error = Error<serde_json::Value>>>;
    fn update_acl(&self, acl_data: crate::models::AclData) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PermissionsApi for PermissionsApiClient<C> {
    fn get_acl(&self, request_body: Vec<String>) -> Box<dyn Future<Item = crate::models::Acl, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/datastore/permissions".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    fn update_acl(&self, acl_data: crate::models::AclData) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/datastore/permissions".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_body_param(acl_data);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
