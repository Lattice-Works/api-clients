/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct AdminApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> AdminApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> AdminApiClient<C> {
        AdminApiClient {
            configuration,
        }
    }
}

pub trait AdminApi {
    fn clear_indexing_queue(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn get_indexing_state(&self, ) -> Box<dyn Future<Item = crate::models::IndexingState, Error = Error<serde_json::Value>>>;
    fn reindex(&self, request_body: ::std::collections::HashMap<String, Vec<String>>) -> Box<dyn Future<Item = crate::models::IndexingState, Error = Error<serde_json::Value>>>;
    fn update_reindex(&self, request_body: ::std::collections::HashMap<String, Vec<String>>) -> Box<dyn Future<Item = crate::models::IndexingState, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>AdminApi for AdminApiClient<C> {
    fn clear_indexing_queue(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/indexer/index/reindex".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_indexing_state(&self, ) -> Box<dyn Future<Item = crate::models::IndexingState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/indexer/index/reindex".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;

        req.execute(self.configuration.borrow())
    }

    fn reindex(&self, request_body: ::std::collections::HashMap<String, Vec<String>>) -> Box<dyn Future<Item = crate::models::IndexingState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/indexer/index/reindex".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    fn update_reindex(&self, request_body: ::std::collections::HashMap<String, Vec<String>>) -> Box<dyn Future<Item = crate::models::IndexingState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/indexer/index/reindex".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

}
