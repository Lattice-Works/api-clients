/*
 * OpenLattice API
 *
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct EntitySetsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> EntitySetsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> EntitySetsApiClient<C> {
        EntitySetsApiClient {
            configuration,
        }
    }
}

pub trait EntitySetsApi {
    fn add_entity_sets_to_linking_entity_set(&self, linking_entity_set_id: &str, request_body: Option<Vec<String>>) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn add_entity_sets_to_linking_entity_sets(&self, linking_entity_set_id: &str, request_body: ::std::collections::HashMap<String, Vec<String>>) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn create_entity_sets(&self, entity_set: Vec<crate::models::EntitySet>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_entity_set(&self, entity_set_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_all_entity_set_property_metadata(&self, entity_set_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::EntitySetPropertyMetaData>, Error = Error<serde_json::Value>>>;
    fn get_all_entity_sets(&self, ) -> Box<dyn Future<Item = Vec<crate::models::EntitySet>, Error = Error<serde_json::Value>>>;
    fn get_entity_set(&self, entity_set_id: &str) -> Box<dyn Future<Item = crate::models::EntitySet, Error = Error<serde_json::Value>>>;
    fn get_entity_set_id(&self, entity_set_name: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_entity_set_ids(&self, request_body: Option<Vec<String>>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>>;
    fn get_entity_set_property_metadata(&self, entity_set_id: &str, property_type_id: &str) -> Box<dyn Future<Item = crate::models::EntitySetPropertyMetaData, Error = Error<serde_json::Value>>>;
    fn get_property_metadata_for_entity_sets(&self, request_body: Option<Vec<String>>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, ::std::collections::HashMap<String, crate::models::EntitySetPropertyMetaData>>, Error = Error<serde_json::Value>>>;
    fn get_property_types_for_entity_set(&self, entity_set_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::PropertyType>, Error = Error<serde_json::Value>>>;
    fn remove_entity_sets_from_linking_entity_set(&self, linking_entity_set_id: &str, request_body: Option<Vec<String>>) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn remove_entity_sets_from_linking_entity_sets(&self, linking_entity_set_id: &str, request_body: ::std::collections::HashMap<String, Vec<String>>) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn update_entity_set_meta_data(&self, entity_set_id: &str, metadata_update: crate::models::MetadataUpdate) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn update_entity_set_property_metadata(&self, entity_set_id: &str, property_type_id: &str, metadata_update: crate::models::MetadataUpdate) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>EntitySetsApi for EntitySetsApiClient<C> {
    fn add_entity_sets_to_linking_entity_set(&self, linking_entity_set_id: &str, request_body: Option<Vec<String>>) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/datastore/entity-sets/linking/{linkingEntitySetId}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("linkingEntitySetId".to_string(), linking_entity_set_id.to_string());
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    fn add_entity_sets_to_linking_entity_sets(&self, linking_entity_set_id: &str, request_body: ::std::collections::HashMap<String, Vec<String>>) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/datastore/entity-sets/linking/".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("linkingEntitySetId".to_string(), linking_entity_set_id.to_string());
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    fn create_entity_sets(&self, entity_set: Vec<crate::models::EntitySet>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/datastore/entity-sets".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_body_param(entity_set);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_entity_set(&self, entity_set_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/datastore/entity-sets/all/{entitySetId}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("entitySetId".to_string(), entity_set_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_all_entity_set_property_metadata(&self, entity_set_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::EntitySetPropertyMetaData>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/entity-sets/all/{entitySetId}/metadata".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("entitySetId".to_string(), entity_set_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_all_entity_sets(&self, ) -> Box<dyn Future<Item = Vec<crate::models::EntitySet>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/entity-sets".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_entity_set(&self, entity_set_id: &str) -> Box<dyn Future<Item = crate::models::EntitySet, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/entity-sets/all/{entitySetId}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("entitySetId".to_string(), entity_set_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_entity_set_id(&self, entity_set_name: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/entity-sets/ids/{entitySetName}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("entitySetName".to_string(), entity_set_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_entity_set_ids(&self, request_body: Option<Vec<String>>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/datastore/entity-sets/ids/".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    fn get_entity_set_property_metadata(&self, entity_set_id: &str, property_type_id: &str) -> Box<dyn Future<Item = crate::models::EntitySetPropertyMetaData, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("entitySetId".to_string(), entity_set_id.to_string());
        req = req.with_path_param("propertyTypeId".to_string(), property_type_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_property_metadata_for_entity_sets(&self, request_body: Option<Vec<String>>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, ::std::collections::HashMap<String, crate::models::EntitySetPropertyMetaData>>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/datastore/entity-sets/all/metadata".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    fn get_property_types_for_entity_set(&self, entity_set_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::PropertyType>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/datastore/entity-sets/all/{entitySetId}/properties".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("entitySetId".to_string(), entity_set_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn remove_entity_sets_from_linking_entity_set(&self, linking_entity_set_id: &str, request_body: Option<Vec<String>>) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/datastore/entity-sets/linking/{linkingEntitySetId}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("linkingEntitySetId".to_string(), linking_entity_set_id.to_string());
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    fn remove_entity_sets_from_linking_entity_sets(&self, linking_entity_set_id: &str, request_body: ::std::collections::HashMap<String, Vec<String>>) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/datastore/entity-sets/linking/".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("linkingEntitySetId".to_string(), linking_entity_set_id.to_string());
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    fn update_entity_set_meta_data(&self, entity_set_id: &str, metadata_update: crate::models::MetadataUpdate) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/datastore/entity-sets/all/{entitySetId}/metadata/".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("entitySetId".to_string(), entity_set_id.to_string());
        req = req.with_body_param(metadata_update);

        req.execute(self.configuration.borrow())
    }

    fn update_entity_set_property_metadata(&self, entity_set_id: &str, property_type_id: &str, metadata_update: crate::models::MetadataUpdate) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/datastore/entity-sets/all/{entitySetId}/properties/{propertyTypeId}/".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
        ;
        req = req.with_path_param("entitySetId".to_string(), entity_set_id.to_string());
        req = req.with_path_param("propertyTypeId".to_string(), property_type_id.to_string());
        req = req.with_body_param(metadata_update);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
