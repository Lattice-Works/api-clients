# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MetadataUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'description': 'str',
        'name': 'str',
        'contacts': 'list[str]',
        'type': 'FullQualifiedName',
        'pii': 'bool',
        'default_show': 'bool',
        'url': 'str',
        'property_tags': 'dict(str, list[str])',
        'index_type': 'str',
        'organization_id': 'str',
        'partitions': 'list[int]'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'name': 'name',
        'contacts': 'contacts',
        'type': 'type',
        'pii': 'pii',
        'default_show': 'defaultShow',
        'url': 'url',
        'property_tags': 'propertyTags',
        'index_type': 'indexType',
        'organization_id': 'organizationId',
        'partitions': 'partitions'
    }

    def __init__(self, title=None, description=None, name=None, contacts=None, type=None, pii=None, default_show=None, url=None, property_tags=None, index_type=None, organization_id=None, partitions=None):  # noqa: E501
        """MetadataUpdate - a model defined in OpenAPI"""  # noqa: E501

        self._title = None
        self._description = None
        self._name = None
        self._contacts = None
        self._type = None
        self._pii = None
        self._default_show = None
        self._url = None
        self._property_tags = None
        self._index_type = None
        self._organization_id = None
        self._partitions = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if contacts is not None:
            self.contacts = contacts
        if type is not None:
            self.type = type
        if pii is not None:
            self.pii = pii
        if default_show is not None:
            self.default_show = default_show
        if url is not None:
            self.url = url
        if property_tags is not None:
            self.property_tags = property_tags
        if index_type is not None:
            self.index_type = index_type
        if organization_id is not None:
            self.organization_id = organization_id
        if partitions is not None:
            self.partitions = partitions

    @property
    def title(self):
        """Gets the title of this MetadataUpdate.  # noqa: E501


        :return: The title of this MetadataUpdate.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MetadataUpdate.


        :param title: The title of this MetadataUpdate.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this MetadataUpdate.  # noqa: E501


        :return: The description of this MetadataUpdate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MetadataUpdate.


        :param description: The description of this MetadataUpdate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this MetadataUpdate.  # noqa: E501


        :return: The name of this MetadataUpdate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetadataUpdate.


        :param name: The name of this MetadataUpdate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def contacts(self):
        """Gets the contacts of this MetadataUpdate.  # noqa: E501


        :return: The contacts of this MetadataUpdate.  # noqa: E501
        :rtype: list[str]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this MetadataUpdate.


        :param contacts: The contacts of this MetadataUpdate.  # noqa: E501
        :type: list[str]
        """

        self._contacts = contacts

    @property
    def type(self):
        """Gets the type of this MetadataUpdate.  # noqa: E501


        :return: The type of this MetadataUpdate.  # noqa: E501
        :rtype: FullQualifiedName
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MetadataUpdate.


        :param type: The type of this MetadataUpdate.  # noqa: E501
        :type: FullQualifiedName
        """

        self._type = type

    @property
    def pii(self):
        """Gets the pii of this MetadataUpdate.  # noqa: E501


        :return: The pii of this MetadataUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._pii

    @pii.setter
    def pii(self, pii):
        """Sets the pii of this MetadataUpdate.


        :param pii: The pii of this MetadataUpdate.  # noqa: E501
        :type: bool
        """

        self._pii = pii

    @property
    def default_show(self):
        """Gets the default_show of this MetadataUpdate.  # noqa: E501


        :return: The default_show of this MetadataUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._default_show

    @default_show.setter
    def default_show(self, default_show):
        """Sets the default_show of this MetadataUpdate.


        :param default_show: The default_show of this MetadataUpdate.  # noqa: E501
        :type: bool
        """

        self._default_show = default_show

    @property
    def url(self):
        """Gets the url of this MetadataUpdate.  # noqa: E501


        :return: The url of this MetadataUpdate.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MetadataUpdate.


        :param url: The url of this MetadataUpdate.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def property_tags(self):
        """Gets the property_tags of this MetadataUpdate.  # noqa: E501


        :return: The property_tags of this MetadataUpdate.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._property_tags

    @property_tags.setter
    def property_tags(self, property_tags):
        """Sets the property_tags of this MetadataUpdate.


        :param property_tags: The property_tags of this MetadataUpdate.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._property_tags = property_tags

    @property
    def index_type(self):
        """Gets the index_type of this MetadataUpdate.  # noqa: E501


        :return: The index_type of this MetadataUpdate.  # noqa: E501
        :rtype: str
        """
        return self._index_type

    @index_type.setter
    def index_type(self, index_type):
        """Sets the index_type of this MetadataUpdate.


        :param index_type: The index_type of this MetadataUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["BTREE", "HASH", "GIN", "NONE"]  # noqa: E501
        if index_type not in allowed_values:
            raise ValueError(
                "Invalid value for `index_type` ({0}), must be one of {1}"  # noqa: E501
                .format(index_type, allowed_values)
            )

        self._index_type = index_type

    @property
    def organization_id(self):
        """Gets the organization_id of this MetadataUpdate.  # noqa: E501


        :return: The organization_id of this MetadataUpdate.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this MetadataUpdate.


        :param organization_id: The organization_id of this MetadataUpdate.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def partitions(self):
        """Gets the partitions of this MetadataUpdate.  # noqa: E501


        :return: The partitions of this MetadataUpdate.  # noqa: E501
        :rtype: list[int]
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """Sets the partitions of this MetadataUpdate.


        :param partitions: The partitions of this MetadataUpdate.  # noqa: E501
        :type: list[int]
        """

        self._partitions = partitions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
