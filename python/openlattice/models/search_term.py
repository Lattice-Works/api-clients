# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SearchTerm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'search_term': 'str',
        'start': 'int',
        'max_hits': 'int',
        'fuzzy': 'bool'
    }

    attribute_map = {
        'search_term': 'searchTerm',
        'start': 'start',
        'max_hits': 'maxHits',
        'fuzzy': 'fuzzy'
    }

    def __init__(self, search_term=None, start=None, max_hits=None, fuzzy=None):  # noqa: E501
        """SearchTerm - a model defined in OpenAPI"""  # noqa: E501

        self._search_term = None
        self._start = None
        self._max_hits = None
        self._fuzzy = None
        self.discriminator = None

        if search_term is not None:
            self.search_term = search_term
        if start is not None:
            self.start = start
        if max_hits is not None:
            self.max_hits = max_hits
        if fuzzy is not None:
            self.fuzzy = fuzzy

    @property
    def search_term(self):
        """Gets the search_term of this SearchTerm.  # noqa: E501


        :return: The search_term of this SearchTerm.  # noqa: E501
        :rtype: str
        """
        return self._search_term

    @search_term.setter
    def search_term(self, search_term):
        """Sets the search_term of this SearchTerm.


        :param search_term: The search_term of this SearchTerm.  # noqa: E501
        :type: str
        """

        self._search_term = search_term

    @property
    def start(self):
        """Gets the start of this SearchTerm.  # noqa: E501


        :return: The start of this SearchTerm.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SearchTerm.


        :param start: The start of this SearchTerm.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def max_hits(self):
        """Gets the max_hits of this SearchTerm.  # noqa: E501


        :return: The max_hits of this SearchTerm.  # noqa: E501
        :rtype: int
        """
        return self._max_hits

    @max_hits.setter
    def max_hits(self, max_hits):
        """Sets the max_hits of this SearchTerm.


        :param max_hits: The max_hits of this SearchTerm.  # noqa: E501
        :type: int
        """

        self._max_hits = max_hits

    @property
    def fuzzy(self):
        """Gets the fuzzy of this SearchTerm.  # noqa: E501


        :return: The fuzzy of this SearchTerm.  # noqa: E501
        :rtype: bool
        """
        return self._fuzzy

    @fuzzy.setter
    def fuzzy(self, fuzzy):
        """Sets the fuzzy of this SearchTerm.


        :param fuzzy: The fuzzy of this SearchTerm.  # noqa: E501
        :type: bool
        """

        self._fuzzy = fuzzy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchTerm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
