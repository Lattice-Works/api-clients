# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice.configuration import Configuration


class EntitySetCollection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'title': 'str',
        'description': 'str',
        'entity_type_collection_id': 'str',
        'template': 'dict(str, str)',
        'contacts': 'list[str]',
        'organization_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'title': 'title',
        'description': 'description',
        'entity_type_collection_id': 'entityTypeCollectionId',
        'template': 'template',
        'contacts': 'contacts',
        'organization_id': 'organizationId'
    }

    def __init__(self, id=None, name=None, title=None, description=None, entity_type_collection_id=None, template=None, contacts=None, organization_id=None, local_vars_configuration=None):  # noqa: E501
        """EntitySetCollection - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._title = None
        self._description = None
        self._entity_type_collection_id = None
        self._template = None
        self._contacts = None
        self._organization_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if entity_type_collection_id is not None:
            self.entity_type_collection_id = entity_type_collection_id
        if template is not None:
            self.template = template
        if contacts is not None:
            self.contacts = contacts
        if organization_id is not None:
            self.organization_id = organization_id

    @property
    def id(self):
        """Gets the id of this EntitySetCollection.  # noqa: E501

        An optional UUID for the entity set collection.  # noqa: E501

        :return: The id of this EntitySetCollection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EntitySetCollection.

        An optional UUID for the entity set collection.  # noqa: E501

        :param id: The id of this EntitySetCollection.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EntitySetCollection.  # noqa: E501

        The unique name of the entity set collection.  # noqa: E501

        :return: The name of this EntitySetCollection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntitySetCollection.

        The unique name of the entity set collection.  # noqa: E501

        :param name: The name of this EntitySetCollection.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this EntitySetCollection.  # noqa: E501

        The friendly name for the entity set collection.  # noqa: E501

        :return: The title of this EntitySetCollection.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EntitySetCollection.

        The friendly name for the entity set collection.  # noqa: E501

        :param title: The title of this EntitySetCollection.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this EntitySetCollection.  # noqa: E501

        A description of the entity set collection.  # noqa: E501

        :return: The description of this EntitySetCollection.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EntitySetCollection.

        A description of the entity set collection.  # noqa: E501

        :param description: The description of this EntitySetCollection.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def entity_type_collection_id(self):
        """Gets the entity_type_collection_id of this EntitySetCollection.  # noqa: E501

        The id of the entity type collection that this entity set collection maps to.  # noqa: E501

        :return: The entity_type_collection_id of this EntitySetCollection.  # noqa: E501
        :rtype: str
        """
        return self._entity_type_collection_id

    @entity_type_collection_id.setter
    def entity_type_collection_id(self, entity_type_collection_id):
        """Sets the entity_type_collection_id of this EntitySetCollection.

        The id of the entity type collection that this entity set collection maps to.  # noqa: E501

        :param entity_type_collection_id: The entity_type_collection_id of this EntitySetCollection.  # noqa: E501
        :type: str
        """

        self._entity_type_collection_id = entity_type_collection_id

    @property
    def template(self):
        """Gets the template of this EntitySetCollection.  # noqa: E501

        A mapping from collection template type ids to entity set ids.  # noqa: E501

        :return: The template of this EntitySetCollection.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this EntitySetCollection.

        A mapping from collection template type ids to entity set ids.  # noqa: E501

        :param template: The template of this EntitySetCollection.  # noqa: E501
        :type: dict(str, str)
        """

        self._template = template

    @property
    def contacts(self):
        """Gets the contacts of this EntitySetCollection.  # noqa: E501

        A set of contact methods for the owners of this entity set collection.  # noqa: E501

        :return: The contacts of this EntitySetCollection.  # noqa: E501
        :rtype: list[str]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this EntitySetCollection.

        A set of contact methods for the owners of this entity set collection.  # noqa: E501

        :param contacts: The contacts of this EntitySetCollection.  # noqa: E501
        :type: list[str]
        """

        self._contacts = contacts

    @property
    def organization_id(self):
        """Gets the organization_id of this EntitySetCollection.  # noqa: E501

        The id of the organization that this entity set collection belongs to.  # noqa: E501

        :return: The organization_id of this EntitySetCollection.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this EntitySetCollection.

        The id of the organization that this entity set collection belongs to.  # noqa: E501

        :param organization_id: The organization_id of this EntitySetCollection.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntitySetCollection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntitySetCollection):
            return True

        return self.to_dict() != other.to_dict()
