# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AssociationType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'entity_type': 'EntityType',
        'src': 'list[str]',
        'dst': 'list[str]',
        'bidirectional': 'bool'
    }

    attribute_map = {
        'entity_type': 'entityType',
        'src': 'src',
        'dst': 'dst',
        'bidirectional': 'bidirectional'
    }

    def __init__(self, entity_type=None, src=None, dst=None, bidirectional=None):  # noqa: E501
        """AssociationType - a model defined in OpenAPI"""  # noqa: E501

        self._entity_type = None
        self._src = None
        self._dst = None
        self._bidirectional = None
        self.discriminator = None

        if entity_type is not None:
            self.entity_type = entity_type
        if src is not None:
            self.src = src
        if dst is not None:
            self.dst = dst
        if bidirectional is not None:
            self.bidirectional = bidirectional

    @property
    def entity_type(self):
        """Gets the entity_type of this AssociationType.  # noqa: E501


        :return: The entity_type of this AssociationType.  # noqa: E501
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this AssociationType.


        :param entity_type: The entity_type of this AssociationType.  # noqa: E501
        :type: EntityType
        """

        self._entity_type = entity_type

    @property
    def src(self):
        """Gets the src of this AssociationType.  # noqa: E501


        :return: The src of this AssociationType.  # noqa: E501
        :rtype: list[str]
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this AssociationType.


        :param src: The src of this AssociationType.  # noqa: E501
        :type: list[str]
        """

        self._src = src

    @property
    def dst(self):
        """Gets the dst of this AssociationType.  # noqa: E501


        :return: The dst of this AssociationType.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst

    @dst.setter
    def dst(self, dst):
        """Sets the dst of this AssociationType.


        :param dst: The dst of this AssociationType.  # noqa: E501
        :type: list[str]
        """

        self._dst = dst

    @property
    def bidirectional(self):
        """Gets the bidirectional of this AssociationType.  # noqa: E501


        :return: The bidirectional of this AssociationType.  # noqa: E501
        :rtype: bool
        """
        return self._bidirectional

    @bidirectional.setter
    def bidirectional(self, bidirectional):
        """Sets the bidirectional of this AssociationType.


        :param bidirectional: The bidirectional of this AssociationType.  # noqa: E501
        :type: bool
        """

        self._bidirectional = bidirectional

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssociationType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
