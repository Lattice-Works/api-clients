# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice.configuration import Configuration


class UserAppConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'organization_id': 'str',
        'entity_set_collection_id': 'str',
        'roles': 'list[str]',
        'settings': 'dict(str, object)'
    }

    attribute_map = {
        'organization_id': 'organizationId',
        'entity_set_collection_id': 'entitySetCollectionId',
        'roles': 'roles',
        'settings': 'settings'
    }

    def __init__(self, organization_id=None, entity_set_collection_id=None, roles=None, settings=None, local_vars_configuration=None):  # noqa: E501
        """UserAppConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._organization_id = None
        self._entity_set_collection_id = None
        self._roles = None
        self._settings = None
        self.discriminator = None

        if organization_id is not None:
            self.organization_id = organization_id
        if entity_set_collection_id is not None:
            self.entity_set_collection_id = entity_set_collection_id
        if roles is not None:
            self.roles = roles
        if settings is not None:
            self.settings = settings

    @property
    def organization_id(self):
        """Gets the organization_id of this UserAppConfig.  # noqa: E501


        :return: The organization_id of this UserAppConfig.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this UserAppConfig.


        :param organization_id: The organization_id of this UserAppConfig.  # noqa: E501
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def entity_set_collection_id(self):
        """Gets the entity_set_collection_id of this UserAppConfig.  # noqa: E501


        :return: The entity_set_collection_id of this UserAppConfig.  # noqa: E501
        :rtype: str
        """
        return self._entity_set_collection_id

    @entity_set_collection_id.setter
    def entity_set_collection_id(self, entity_set_collection_id):
        """Sets the entity_set_collection_id of this UserAppConfig.


        :param entity_set_collection_id: The entity_set_collection_id of this UserAppConfig.  # noqa: E501
        :type entity_set_collection_id: str
        """

        self._entity_set_collection_id = entity_set_collection_id

    @property
    def roles(self):
        """Gets the roles of this UserAppConfig.  # noqa: E501


        :return: The roles of this UserAppConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UserAppConfig.


        :param roles: The roles of this UserAppConfig.  # noqa: E501
        :type roles: list[str]
        """

        self._roles = roles

    @property
    def settings(self):
        """Gets the settings of this UserAppConfig.  # noqa: E501


        :return: The settings of this UserAppConfig.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this UserAppConfig.


        :param settings: The settings of this UserAppConfig.  # noqa: E501
        :type settings: dict(str, object)
        """

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAppConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserAppConfig):
            return True

        return self.to_dict() != other.to_dict()
