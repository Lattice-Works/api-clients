# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EntitySet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'id': 'str',
        'title': 'str',
        'contacts': 'list[str]',
        'entity_type_id': 'str',
        'description': 'str',
        'linking': 'bool',
        'linked_entity_sets': 'list[str]',
        'external': 'bool',
        'organization_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'title': 'title',
        'contacts': 'contacts',
        'entity_type_id': 'entityTypeId',
        'description': 'description',
        'linking': 'linking',
        'linked_entity_sets': 'linked_entity_sets',
        'external': 'external',
        'organization_id': 'organizationId'
    }

    def __init__(self, name=None, id=None, title=None, contacts=None, entity_type_id=None, description=None, linking=None, linked_entity_sets=None, external=None, organization_id=None):  # noqa: E501
        """EntitySet - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._id = None
        self._title = None
        self._contacts = None
        self._entity_type_id = None
        self._description = None
        self._linking = None
        self._linked_entity_sets = None
        self._external = None
        self._organization_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if contacts is not None:
            self.contacts = contacts
        if entity_type_id is not None:
            self.entity_type_id = entity_type_id
        if description is not None:
            self.description = description
        if linking is not None:
            self.linking = linking
        if linked_entity_sets is not None:
            self.linked_entity_sets = linked_entity_sets
        if external is not None:
            self.external = external
        if organization_id is not None:
            self.organization_id = organization_id

    @property
    def name(self):
        """Gets the name of this EntitySet.  # noqa: E501


        :return: The name of this EntitySet.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntitySet.


        :param name: The name of this EntitySet.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this EntitySet.  # noqa: E501


        :return: The id of this EntitySet.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EntitySet.


        :param id: The id of this EntitySet.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this EntitySet.  # noqa: E501


        :return: The title of this EntitySet.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EntitySet.


        :param title: The title of this EntitySet.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def contacts(self):
        """Gets the contacts of this EntitySet.  # noqa: E501


        :return: The contacts of this EntitySet.  # noqa: E501
        :rtype: list[str]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this EntitySet.


        :param contacts: The contacts of this EntitySet.  # noqa: E501
        :type: list[str]
        """

        self._contacts = contacts

    @property
    def entity_type_id(self):
        """Gets the entity_type_id of this EntitySet.  # noqa: E501


        :return: The entity_type_id of this EntitySet.  # noqa: E501
        :rtype: str
        """
        return self._entity_type_id

    @entity_type_id.setter
    def entity_type_id(self, entity_type_id):
        """Sets the entity_type_id of this EntitySet.


        :param entity_type_id: The entity_type_id of this EntitySet.  # noqa: E501
        :type: str
        """

        self._entity_type_id = entity_type_id

    @property
    def description(self):
        """Gets the description of this EntitySet.  # noqa: E501


        :return: The description of this EntitySet.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EntitySet.


        :param description: The description of this EntitySet.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def linking(self):
        """Gets the linking of this EntitySet.  # noqa: E501


        :return: The linking of this EntitySet.  # noqa: E501
        :rtype: bool
        """
        return self._linking

    @linking.setter
    def linking(self, linking):
        """Sets the linking of this EntitySet.


        :param linking: The linking of this EntitySet.  # noqa: E501
        :type: bool
        """

        self._linking = linking

    @property
    def linked_entity_sets(self):
        """Gets the linked_entity_sets of this EntitySet.  # noqa: E501


        :return: The linked_entity_sets of this EntitySet.  # noqa: E501
        :rtype: list[str]
        """
        return self._linked_entity_sets

    @linked_entity_sets.setter
    def linked_entity_sets(self, linked_entity_sets):
        """Sets the linked_entity_sets of this EntitySet.


        :param linked_entity_sets: The linked_entity_sets of this EntitySet.  # noqa: E501
        :type: list[str]
        """

        self._linked_entity_sets = linked_entity_sets

    @property
    def external(self):
        """Gets the external of this EntitySet.  # noqa: E501


        :return: The external of this EntitySet.  # noqa: E501
        :rtype: bool
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this EntitySet.


        :param external: The external of this EntitySet.  # noqa: E501
        :type: bool
        """

        self._external = external

    @property
    def organization_id(self):
        """Gets the organization_id of this EntitySet.  # noqa: E501


        :return: The organization_id of this EntitySet.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this EntitySet.


        :param organization_id: The organization_id of this EntitySet.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntitySet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
