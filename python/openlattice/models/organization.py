# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Organization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'principal': 'Principal',
        'title': 'str',
        'description': 'str',
        'emails': 'list[str]',
        'members': 'list[Principal]',
        'roles': 'list[Role]',
        'apps': 'list[str]',
        'sms_entity_set_info': 'list[SmsEntitySetInformation]',
        'partitions': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'principal': 'principal',
        'title': 'title',
        'description': 'description',
        'emails': 'emails',
        'members': 'members',
        'roles': 'roles',
        'apps': 'apps',
        'sms_entity_set_info': 'smsEntitySetInfo',
        'partitions': 'partitions'
    }

    def __init__(self, id=None, principal=None, title=None, description=None, emails=None, members=None, roles=None, apps=None, sms_entity_set_info=None, partitions=None):  # noqa: E501
        """Organization - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._principal = None
        self._title = None
        self._description = None
        self._emails = None
        self._members = None
        self._roles = None
        self._apps = None
        self._sms_entity_set_info = None
        self._partitions = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if principal is not None:
            self.principal = principal
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if emails is not None:
            self.emails = emails
        if members is not None:
            self.members = members
        if roles is not None:
            self.roles = roles
        if apps is not None:
            self.apps = apps
        if sms_entity_set_info is not None:
            self.sms_entity_set_info = sms_entity_set_info
        if partitions is not None:
            self.partitions = partitions

    @property
    def id(self):
        """Gets the id of this Organization.  # noqa: E501


        :return: The id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.


        :param id: The id of this Organization.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def principal(self):
        """Gets the principal of this Organization.  # noqa: E501


        :return: The principal of this Organization.  # noqa: E501
        :rtype: Principal
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this Organization.


        :param principal: The principal of this Organization.  # noqa: E501
        :type: Principal
        """

        self._principal = principal

    @property
    def title(self):
        """Gets the title of this Organization.  # noqa: E501


        :return: The title of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Organization.


        :param title: The title of this Organization.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Organization.  # noqa: E501


        :return: The description of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Organization.


        :param description: The description of this Organization.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def emails(self):
        """Gets the emails of this Organization.  # noqa: E501


        :return: The emails of this Organization.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Organization.


        :param emails: The emails of this Organization.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def members(self):
        """Gets the members of this Organization.  # noqa: E501


        :return: The members of this Organization.  # noqa: E501
        :rtype: list[Principal]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Organization.


        :param members: The members of this Organization.  # noqa: E501
        :type: list[Principal]
        """

        self._members = members

    @property
    def roles(self):
        """Gets the roles of this Organization.  # noqa: E501


        :return: The roles of this Organization.  # noqa: E501
        :rtype: list[Role]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Organization.


        :param roles: The roles of this Organization.  # noqa: E501
        :type: list[Role]
        """

        self._roles = roles

    @property
    def apps(self):
        """Gets the apps of this Organization.  # noqa: E501


        :return: The apps of this Organization.  # noqa: E501
        :rtype: list[str]
        """
        return self._apps

    @apps.setter
    def apps(self, apps):
        """Sets the apps of this Organization.


        :param apps: The apps of this Organization.  # noqa: E501
        :type: list[str]
        """

        self._apps = apps

    @property
    def sms_entity_set_info(self):
        """Gets the sms_entity_set_info of this Organization.  # noqa: E501


        :return: The sms_entity_set_info of this Organization.  # noqa: E501
        :rtype: list[SmsEntitySetInformation]
        """
        return self._sms_entity_set_info

    @sms_entity_set_info.setter
    def sms_entity_set_info(self, sms_entity_set_info):
        """Sets the sms_entity_set_info of this Organization.


        :param sms_entity_set_info: The sms_entity_set_info of this Organization.  # noqa: E501
        :type: list[SmsEntitySetInformation]
        """

        self._sms_entity_set_info = sms_entity_set_info

    @property
    def partitions(self):
        """Gets the partitions of this Organization.  # noqa: E501


        :return: The partitions of this Organization.  # noqa: E501
        :rtype: list[int]
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """Sets the partitions of this Organization.


        :param partitions: The partitions of this Organization.  # noqa: E501
        :type: list[int]
        """

        self._partitions = partitions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
