# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PropertyType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'id': 'str',
        'type': 'FullQualifiedName',
        'description': 'str',
        'schemas': 'list[FullQualifiedName]',
        'datatype': 'str',
        'pii_field': 'bool',
        'multi_valued': 'bool',
        'analyzer': 'str'
    }

    attribute_map = {
        'title': 'title',
        'id': 'id',
        'type': 'type',
        'description': 'description',
        'schemas': 'schemas',
        'datatype': 'datatype',
        'pii_field': 'piiField',
        'multi_valued': 'multiValued',
        'analyzer': 'analyzer'
    }

    def __init__(self, title=None, id=None, type=None, description=None, schemas=None, datatype=None, pii_field=None, multi_valued=None, analyzer=None):  # noqa: E501
        """PropertyType - a model defined in OpenAPI"""  # noqa: E501

        self._title = None
        self._id = None
        self._type = None
        self._description = None
        self._schemas = None
        self._datatype = None
        self._pii_field = None
        self._multi_valued = None
        self._analyzer = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if description is not None:
            self.description = description
        if schemas is not None:
            self.schemas = schemas
        if datatype is not None:
            self.datatype = datatype
        if pii_field is not None:
            self.pii_field = pii_field
        if multi_valued is not None:
            self.multi_valued = multi_valued
        if analyzer is not None:
            self.analyzer = analyzer

    @property
    def title(self):
        """Gets the title of this PropertyType.  # noqa: E501


        :return: The title of this PropertyType.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PropertyType.


        :param title: The title of this PropertyType.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def id(self):
        """Gets the id of this PropertyType.  # noqa: E501


        :return: The id of this PropertyType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PropertyType.


        :param id: The id of this PropertyType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this PropertyType.  # noqa: E501


        :return: The type of this PropertyType.  # noqa: E501
        :rtype: FullQualifiedName
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PropertyType.


        :param type: The type of this PropertyType.  # noqa: E501
        :type: FullQualifiedName
        """

        self._type = type

    @property
    def description(self):
        """Gets the description of this PropertyType.  # noqa: E501


        :return: The description of this PropertyType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PropertyType.


        :param description: The description of this PropertyType.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def schemas(self):
        """Gets the schemas of this PropertyType.  # noqa: E501


        :return: The schemas of this PropertyType.  # noqa: E501
        :rtype: list[FullQualifiedName]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this PropertyType.


        :param schemas: The schemas of this PropertyType.  # noqa: E501
        :type: list[FullQualifiedName]
        """

        self._schemas = schemas

    @property
    def datatype(self):
        """Gets the datatype of this PropertyType.  # noqa: E501


        :return: The datatype of this PropertyType.  # noqa: E501
        :rtype: str
        """
        return self._datatype

    @datatype.setter
    def datatype(self, datatype):
        """Sets the datatype of this PropertyType.


        :param datatype: The datatype of this PropertyType.  # noqa: E501
        :type: str
        """

        self._datatype = datatype

    @property
    def pii_field(self):
        """Gets the pii_field of this PropertyType.  # noqa: E501


        :return: The pii_field of this PropertyType.  # noqa: E501
        :rtype: bool
        """
        return self._pii_field

    @pii_field.setter
    def pii_field(self, pii_field):
        """Sets the pii_field of this PropertyType.


        :param pii_field: The pii_field of this PropertyType.  # noqa: E501
        :type: bool
        """

        self._pii_field = pii_field

    @property
    def multi_valued(self):
        """Gets the multi_valued of this PropertyType.  # noqa: E501


        :return: The multi_valued of this PropertyType.  # noqa: E501
        :rtype: bool
        """
        return self._multi_valued

    @multi_valued.setter
    def multi_valued(self, multi_valued):
        """Sets the multi_valued of this PropertyType.


        :param multi_valued: The multi_valued of this PropertyType.  # noqa: E501
        :type: bool
        """

        self._multi_valued = multi_valued

    @property
    def analyzer(self):
        """Gets the analyzer of this PropertyType.  # noqa: E501


        :return: The analyzer of this PropertyType.  # noqa: E501
        :rtype: str
        """
        return self._analyzer

    @analyzer.setter
    def analyzer(self, analyzer):
        """Sets the analyzer of this PropertyType.


        :param analyzer: The analyzer of this PropertyType.  # noqa: E501
        :type: str
        """

        self._analyzer = analyzer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
