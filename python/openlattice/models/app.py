# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice.configuration import Configuration


class App(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'title': 'str',
        'description': 'str',
        'url': 'str',
        'entity_type_collection_id': 'str',
        'app_roles': 'list[AppRole]',
        'default_settings': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'title': 'title',
        'description': 'description',
        'url': 'url',
        'entity_type_collection_id': 'entityTypeCollectionId',
        'app_roles': 'appRoles',
        'default_settings': 'defaultSettings'
    }

    def __init__(self, id=None, name=None, title=None, description=None, url=None, entity_type_collection_id=None, app_roles=None, default_settings=None, local_vars_configuration=None):  # noqa: E501
        """App - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._title = None
        self._description = None
        self._url = None
        self._entity_type_collection_id = None
        self._app_roles = None
        self._default_settings = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if url is not None:
            self.url = url
        if entity_type_collection_id is not None:
            self.entity_type_collection_id = entity_type_collection_id
        if app_roles is not None:
            self.app_roles = app_roles
        if default_settings is not None:
            self.default_settings = default_settings

    @property
    def id(self):
        """Gets the id of this App.  # noqa: E501


        :return: The id of this App.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this App.


        :param id: The id of this App.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this App.  # noqa: E501


        :return: The name of this App.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this App.


        :param name: The name of this App.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this App.  # noqa: E501


        :return: The title of this App.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this App.


        :param title: The title of this App.  # noqa: E501
        :type title: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this App.  # noqa: E501


        :return: The description of this App.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this App.


        :param description: The description of this App.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def url(self):
        """Gets the url of this App.  # noqa: E501


        :return: The url of this App.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this App.


        :param url: The url of this App.  # noqa: E501
        :type url: str
        """

        self._url = url

    @property
    def entity_type_collection_id(self):
        """Gets the entity_type_collection_id of this App.  # noqa: E501


        :return: The entity_type_collection_id of this App.  # noqa: E501
        :rtype: str
        """
        return self._entity_type_collection_id

    @entity_type_collection_id.setter
    def entity_type_collection_id(self, entity_type_collection_id):
        """Sets the entity_type_collection_id of this App.


        :param entity_type_collection_id: The entity_type_collection_id of this App.  # noqa: E501
        :type entity_type_collection_id: str
        """

        self._entity_type_collection_id = entity_type_collection_id

    @property
    def app_roles(self):
        """Gets the app_roles of this App.  # noqa: E501


        :return: The app_roles of this App.  # noqa: E501
        :rtype: list[AppRole]
        """
        return self._app_roles

    @app_roles.setter
    def app_roles(self, app_roles):
        """Sets the app_roles of this App.


        :param app_roles: The app_roles of this App.  # noqa: E501
        :type app_roles: list[AppRole]
        """

        self._app_roles = app_roles

    @property
    def default_settings(self):
        """Gets the default_settings of this App.  # noqa: E501


        :return: The default_settings of this App.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._default_settings

    @default_settings.setter
    def default_settings(self, default_settings):
        """Sets the default_settings of this App.


        :param default_settings: The default_settings of this App.  # noqa: E501
        :type default_settings: dict(str, object)
        """

        self._default_settings = default_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, App):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, App):
            return True

        return self.to_dict() != other.to_dict()
