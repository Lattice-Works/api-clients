# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice.configuration import Configuration


class EntityType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'description': 'str',
        'id': 'str',
        'type': 'FullQualifiedName',
        'schemas': 'list[FullQualifiedName]',
        'key': 'list[str]',
        'properties': 'list[str]',
        'property_tags': 'dict(str, list[str])',
        'basetype': 'str',
        'category': 'str'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'id': 'id',
        'type': 'type',
        'schemas': 'schemas',
        'key': 'key',
        'properties': 'properties',
        'property_tags': 'propertyTags',
        'basetype': 'basetype',
        'category': 'category'
    }

    def __init__(self, title=None, description=None, id=None, type=None, schemas=None, key=None, properties=None, property_tags=None, basetype=None, category=None, local_vars_configuration=None):  # noqa: E501
        """EntityType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._description = None
        self._id = None
        self._type = None
        self._schemas = None
        self._key = None
        self._properties = None
        self._property_tags = None
        self._basetype = None
        self._category = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if schemas is not None:
            self.schemas = schemas
        if key is not None:
            self.key = key
        if properties is not None:
            self.properties = properties
        if property_tags is not None:
            self.property_tags = property_tags
        if basetype is not None:
            self.basetype = basetype
        if category is not None:
            self.category = category

    @property
    def title(self):
        """Gets the title of this EntityType.  # noqa: E501


        :return: The title of this EntityType.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EntityType.


        :param title: The title of this EntityType.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this EntityType.  # noqa: E501


        :return: The description of this EntityType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EntityType.


        :param description: The description of this EntityType.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this EntityType.  # noqa: E501


        :return: The id of this EntityType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EntityType.


        :param id: The id of this EntityType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this EntityType.  # noqa: E501


        :return: The type of this EntityType.  # noqa: E501
        :rtype: FullQualifiedName
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EntityType.


        :param type: The type of this EntityType.  # noqa: E501
        :type: FullQualifiedName
        """

        self._type = type

    @property
    def schemas(self):
        """Gets the schemas of this EntityType.  # noqa: E501


        :return: The schemas of this EntityType.  # noqa: E501
        :rtype: list[FullQualifiedName]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this EntityType.


        :param schemas: The schemas of this EntityType.  # noqa: E501
        :type: list[FullQualifiedName]
        """

        self._schemas = schemas

    @property
    def key(self):
        """Gets the key of this EntityType.  # noqa: E501


        :return: The key of this EntityType.  # noqa: E501
        :rtype: list[str]
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this EntityType.


        :param key: The key of this EntityType.  # noqa: E501
        :type: list[str]
        """

        self._key = key

    @property
    def properties(self):
        """Gets the properties of this EntityType.  # noqa: E501


        :return: The properties of this EntityType.  # noqa: E501
        :rtype: list[str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this EntityType.


        :param properties: The properties of this EntityType.  # noqa: E501
        :type: list[str]
        """

        self._properties = properties

    @property
    def property_tags(self):
        """Gets the property_tags of this EntityType.  # noqa: E501


        :return: The property_tags of this EntityType.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._property_tags

    @property_tags.setter
    def property_tags(self, property_tags):
        """Sets the property_tags of this EntityType.


        :param property_tags: The property_tags of this EntityType.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._property_tags = property_tags

    @property
    def basetype(self):
        """Gets the basetype of this EntityType.  # noqa: E501


        :return: The basetype of this EntityType.  # noqa: E501
        :rtype: str
        """
        return self._basetype

    @basetype.setter
    def basetype(self, basetype):
        """Sets the basetype of this EntityType.


        :param basetype: The basetype of this EntityType.  # noqa: E501
        :type: str
        """

        self._basetype = basetype

    @property
    def category(self):
        """Gets the category of this EntityType.  # noqa: E501


        :return: The category of this EntityType.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EntityType.


        :param category: The category of this EntityType.  # noqa: E501
        :type: str
        """
        allowed_values = ["AssociationType", "EntityType"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntityType):
            return True

        return self.to_dict() != other.to_dict()
