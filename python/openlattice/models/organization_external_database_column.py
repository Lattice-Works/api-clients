# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice.configuration import Configuration


class OrganizationExternalDatabaseColumn(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'title': 'str',
        'description': 'str',
        'table_id': 'str',
        'organization_id': 'str',
        'data_type': 'str',
        'primary_key': 'bool',
        'ordinal_position': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'title': 'title',
        'description': 'description',
        'table_id': 'tableId',
        'organization_id': 'organizationId',
        'data_type': 'dataType',
        'primary_key': 'primaryKey',
        'ordinal_position': 'ordinalPosition'
    }

    def __init__(self, id=None, name=None, title=None, description=None, table_id=None, organization_id=None, data_type=None, primary_key=None, ordinal_position=None, local_vars_configuration=None):  # noqa: E501
        """OrganizationExternalDatabaseColumn - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._title = None
        self._description = None
        self._table_id = None
        self._organization_id = None
        self._data_type = None
        self._primary_key = None
        self._ordinal_position = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if table_id is not None:
            self.table_id = table_id
        if organization_id is not None:
            self.organization_id = organization_id
        if data_type is not None:
            self.data_type = data_type
        if primary_key is not None:
            self.primary_key = primary_key
        if ordinal_position is not None:
            self.ordinal_position = ordinal_position

    @property
    def id(self):
        """Gets the id of this OrganizationExternalDatabaseColumn.  # noqa: E501


        :return: The id of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationExternalDatabaseColumn.


        :param id: The id of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this OrganizationExternalDatabaseColumn.  # noqa: E501


        :return: The name of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationExternalDatabaseColumn.


        :param name: The name of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this OrganizationExternalDatabaseColumn.  # noqa: E501


        :return: The title of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OrganizationExternalDatabaseColumn.


        :param title: The title of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :type title: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this OrganizationExternalDatabaseColumn.  # noqa: E501


        :return: The description of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrganizationExternalDatabaseColumn.


        :param description: The description of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def table_id(self):
        """Gets the table_id of this OrganizationExternalDatabaseColumn.  # noqa: E501


        :return: The table_id of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :rtype: str
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this OrganizationExternalDatabaseColumn.


        :param table_id: The table_id of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :type table_id: str
        """

        self._table_id = table_id

    @property
    def organization_id(self):
        """Gets the organization_id of this OrganizationExternalDatabaseColumn.  # noqa: E501


        :return: The organization_id of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this OrganizationExternalDatabaseColumn.


        :param organization_id: The organization_id of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def data_type(self):
        """Gets the data_type of this OrganizationExternalDatabaseColumn.  # noqa: E501


        :return: The data_type of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this OrganizationExternalDatabaseColumn.


        :param data_type: The data_type of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :type data_type: str
        """
        allowed_values = ["SMALLINT", "SMALLINT_ARRAY", "INTEGER", "INTEGER_ARRAY", "BIGINT", "BIGINT_ARRAY", "DECIMAL", "NUMERIC", "DOUBLE", "DOUBLE_ARRAY", "SERIAL", "BIGSERIAL", "BYTEA", "BYTEA_ARRAY", "BOOLEAN", "BOOLEAN_ARRAY", "DATE", "DATE_ARRAY", "TIME", "TIME_ARRAY", "TIMETZ", "TIMETZ_ARRAY", "TIMESTAMPTZ", "TIMESTAMPTZ_ARRAY", "UUID", "UUID_ARRAY", "UUID_ARRAY_ARRAY", "TEXT", "TEXT_ARRAY", "JSONB"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and data_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def primary_key(self):
        """Gets the primary_key of this OrganizationExternalDatabaseColumn.  # noqa: E501


        :return: The primary_key of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :rtype: bool
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this OrganizationExternalDatabaseColumn.


        :param primary_key: The primary_key of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :type primary_key: bool
        """

        self._primary_key = primary_key

    @property
    def ordinal_position(self):
        """Gets the ordinal_position of this OrganizationExternalDatabaseColumn.  # noqa: E501


        :return: The ordinal_position of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :rtype: int
        """
        return self._ordinal_position

    @ordinal_position.setter
    def ordinal_position(self, ordinal_position):
        """Sets the ordinal_position of this OrganizationExternalDatabaseColumn.


        :param ordinal_position: The ordinal_position of this OrganizationExternalDatabaseColumn.  # noqa: E501
        :type ordinal_position: int
        """

        self._ordinal_position = ordinal_position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationExternalDatabaseColumn):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationExternalDatabaseColumn):
            return True

        return self.to_dict() != other.to_dict()
