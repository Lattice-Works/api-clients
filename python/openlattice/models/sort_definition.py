# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice.configuration import Configuration


class SortDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'is_descending': 'bool',
        'property_type_id': 'str',
        'latitude': 'float',
        'longitude': 'float'
    }

    attribute_map = {
        'type': 'type',
        'is_descending': 'isDescending',
        'property_type_id': 'propertyTypeId',
        'latitude': 'latitude',
        'longitude': 'longitude'
    }

    def __init__(self, type=None, is_descending=None, property_type_id=None, latitude=None, longitude=None, local_vars_configuration=None):  # noqa: E501
        """SortDefinition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._is_descending = None
        self._property_type_id = None
        self._latitude = None
        self._longitude = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if is_descending is not None:
            self.is_descending = is_descending
        if property_type_id is not None:
            self.property_type_id = property_type_id
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude

    @property
    def type(self):
        """Gets the type of this SortDefinition.  # noqa: E501


        :return: The type of this SortDefinition.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SortDefinition.


        :param type: The type of this SortDefinition.  # noqa: E501
        :type: str
        """
        allowed_values = ["field", "score", "geoDistance"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def is_descending(self):
        """Gets the is_descending of this SortDefinition.  # noqa: E501


        :return: The is_descending of this SortDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_descending

    @is_descending.setter
    def is_descending(self, is_descending):
        """Sets the is_descending of this SortDefinition.


        :param is_descending: The is_descending of this SortDefinition.  # noqa: E501
        :type: bool
        """

        self._is_descending = is_descending

    @property
    def property_type_id(self):
        """Gets the property_type_id of this SortDefinition.  # noqa: E501


        :return: The property_type_id of this SortDefinition.  # noqa: E501
        :rtype: str
        """
        return self._property_type_id

    @property_type_id.setter
    def property_type_id(self, property_type_id):
        """Sets the property_type_id of this SortDefinition.


        :param property_type_id: The property_type_id of this SortDefinition.  # noqa: E501
        :type: str
        """

        self._property_type_id = property_type_id

    @property
    def latitude(self):
        """Gets the latitude of this SortDefinition.  # noqa: E501


        :return: The latitude of this SortDefinition.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this SortDefinition.


        :param latitude: The latitude of this SortDefinition.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this SortDefinition.  # noqa: E501


        :return: The longitude of this SortDefinition.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this SortDefinition.


        :param longitude: The longitude of this SortDefinition.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SortDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SortDefinition):
            return True

        return self.to_dict() != other.to_dict()
