# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice.configuration import Configuration


class SearchConstraints(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'entity_set_ids': 'list[str]',
        'start': 'int',
        'max_hits': 'int',
        'constraints': 'list[ConstraintGroup]',
        'sort': 'SortDefinition'
    }

    attribute_map = {
        'entity_set_ids': 'entitySetIds',
        'start': 'start',
        'max_hits': 'maxHits',
        'constraints': 'constraints',
        'sort': 'sort'
    }

    def __init__(self, entity_set_ids=None, start=None, max_hits=None, constraints=None, sort=None, local_vars_configuration=None):  # noqa: E501
        """SearchConstraints - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._entity_set_ids = None
        self._start = None
        self._max_hits = None
        self._constraints = None
        self._sort = None
        self.discriminator = None

        if entity_set_ids is not None:
            self.entity_set_ids = entity_set_ids
        if start is not None:
            self.start = start
        if max_hits is not None:
            self.max_hits = max_hits
        if constraints is not None:
            self.constraints = constraints
        if sort is not None:
            self.sort = sort

    @property
    def entity_set_ids(self):
        """Gets the entity_set_ids of this SearchConstraints.  # noqa: E501


        :return: The entity_set_ids of this SearchConstraints.  # noqa: E501
        :rtype: list[str]
        """
        return self._entity_set_ids

    @entity_set_ids.setter
    def entity_set_ids(self, entity_set_ids):
        """Sets the entity_set_ids of this SearchConstraints.


        :param entity_set_ids: The entity_set_ids of this SearchConstraints.  # noqa: E501
        :type: list[str]
        """

        self._entity_set_ids = entity_set_ids

    @property
    def start(self):
        """Gets the start of this SearchConstraints.  # noqa: E501


        :return: The start of this SearchConstraints.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SearchConstraints.


        :param start: The start of this SearchConstraints.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def max_hits(self):
        """Gets the max_hits of this SearchConstraints.  # noqa: E501


        :return: The max_hits of this SearchConstraints.  # noqa: E501
        :rtype: int
        """
        return self._max_hits

    @max_hits.setter
    def max_hits(self, max_hits):
        """Sets the max_hits of this SearchConstraints.


        :param max_hits: The max_hits of this SearchConstraints.  # noqa: E501
        :type: int
        """

        self._max_hits = max_hits

    @property
    def constraints(self):
        """Gets the constraints of this SearchConstraints.  # noqa: E501


        :return: The constraints of this SearchConstraints.  # noqa: E501
        :rtype: list[ConstraintGroup]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this SearchConstraints.


        :param constraints: The constraints of this SearchConstraints.  # noqa: E501
        :type: list[ConstraintGroup]
        """

        self._constraints = constraints

    @property
    def sort(self):
        """Gets the sort of this SearchConstraints.  # noqa: E501


        :return: The sort of this SearchConstraints.  # noqa: E501
        :rtype: SortDefinition
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this SearchConstraints.


        :param sort: The sort of this SearchConstraints.  # noqa: E501
        :type: SortDefinition
        """

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchConstraints):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchConstraints):
            return True

        return self.to_dict() != other.to_dict()
