# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice.configuration import Configuration


class EntitySetPropertyMetaData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'description': 'str',
        'property_tags': 'list[str]',
        'default_show': 'bool'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'property_tags': 'propertyTags',
        'default_show': 'defaultShow'
    }

    def __init__(self, title=None, description=None, property_tags=None, default_show=None, local_vars_configuration=None):  # noqa: E501
        """EntitySetPropertyMetaData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._description = None
        self._property_tags = None
        self._default_show = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if property_tags is not None:
            self.property_tags = property_tags
        if default_show is not None:
            self.default_show = default_show

    @property
    def title(self):
        """Gets the title of this EntitySetPropertyMetaData.  # noqa: E501


        :return: The title of this EntitySetPropertyMetaData.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EntitySetPropertyMetaData.


        :param title: The title of this EntitySetPropertyMetaData.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this EntitySetPropertyMetaData.  # noqa: E501


        :return: The description of this EntitySetPropertyMetaData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EntitySetPropertyMetaData.


        :param description: The description of this EntitySetPropertyMetaData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def property_tags(self):
        """Gets the property_tags of this EntitySetPropertyMetaData.  # noqa: E501


        :return: The property_tags of this EntitySetPropertyMetaData.  # noqa: E501
        :rtype: list[str]
        """
        return self._property_tags

    @property_tags.setter
    def property_tags(self, property_tags):
        """Sets the property_tags of this EntitySetPropertyMetaData.


        :param property_tags: The property_tags of this EntitySetPropertyMetaData.  # noqa: E501
        :type: list[str]
        """

        self._property_tags = property_tags

    @property
    def default_show(self):
        """Gets the default_show of this EntitySetPropertyMetaData.  # noqa: E501


        :return: The default_show of this EntitySetPropertyMetaData.  # noqa: E501
        :rtype: bool
        """
        return self._default_show

    @default_show.setter
    def default_show(self, default_show):
        """Sets the default_show of this EntitySetPropertyMetaData.


        :param default_show: The default_show of this EntitySetPropertyMetaData.  # noqa: E501
        :type: bool
        """

        self._default_show = default_show

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntitySetPropertyMetaData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntitySetPropertyMetaData):
            return True

        return self.to_dict() != other.to_dict()
