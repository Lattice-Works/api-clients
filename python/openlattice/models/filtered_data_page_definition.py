# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice.configuration import Configuration


class FilteredDataPageDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'page_size': 'float',
        'bookmark_id': 'str',
        'property_type_id': 'str',
        'filter': 'dict(str, Filter)'
    }

    attribute_map = {
        'page_size': 'pageSize',
        'bookmark_id': 'bookmarkId',
        'property_type_id': 'propertyTypeId',
        'filter': 'filter'
    }

    def __init__(self, page_size=None, bookmark_id=None, property_type_id=None, filter=None, local_vars_configuration=None):  # noqa: E501
        """FilteredDataPageDefinition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._page_size = None
        self._bookmark_id = None
        self._property_type_id = None
        self._filter = None
        self.discriminator = None

        if page_size is not None:
            self.page_size = page_size
        if bookmark_id is not None:
            self.bookmark_id = bookmark_id
        if property_type_id is not None:
            self.property_type_id = property_type_id
        if filter is not None:
            self.filter = filter

    @property
    def page_size(self):
        """Gets the page_size of this FilteredDataPageDefinition.  # noqa: E501


        :return: The page_size of this FilteredDataPageDefinition.  # noqa: E501
        :rtype: float
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this FilteredDataPageDefinition.


        :param page_size: The page_size of this FilteredDataPageDefinition.  # noqa: E501
        :type page_size: float
        """

        self._page_size = page_size

    @property
    def bookmark_id(self):
        """Gets the bookmark_id of this FilteredDataPageDefinition.  # noqa: E501


        :return: The bookmark_id of this FilteredDataPageDefinition.  # noqa: E501
        :rtype: str
        """
        return self._bookmark_id

    @bookmark_id.setter
    def bookmark_id(self, bookmark_id):
        """Sets the bookmark_id of this FilteredDataPageDefinition.


        :param bookmark_id: The bookmark_id of this FilteredDataPageDefinition.  # noqa: E501
        :type bookmark_id: str
        """

        self._bookmark_id = bookmark_id

    @property
    def property_type_id(self):
        """Gets the property_type_id of this FilteredDataPageDefinition.  # noqa: E501


        :return: The property_type_id of this FilteredDataPageDefinition.  # noqa: E501
        :rtype: str
        """
        return self._property_type_id

    @property_type_id.setter
    def property_type_id(self, property_type_id):
        """Sets the property_type_id of this FilteredDataPageDefinition.


        :param property_type_id: The property_type_id of this FilteredDataPageDefinition.  # noqa: E501
        :type property_type_id: str
        """

        self._property_type_id = property_type_id

    @property
    def filter(self):
        """Gets the filter of this FilteredDataPageDefinition.  # noqa: E501


        :return: The filter of this FilteredDataPageDefinition.  # noqa: E501
        :rtype: dict(str, Filter)
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this FilteredDataPageDefinition.


        :param filter: The filter of this FilteredDataPageDefinition.  # noqa: E501
        :type filter: dict(str, Filter)
        """

        self._filter = filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilteredDataPageDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilteredDataPageDefinition):
            return True

        return self.to_dict() != other.to_dict()
