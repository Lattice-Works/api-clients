# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Auth0userBasic(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'str',
        'email': 'str',
        'nickname': 'str',
        'roles': 'list[str]',
        'organization': 'list[str]'
    }

    attribute_map = {
        'user_id': 'userId',
        'email': 'email',
        'nickname': 'nickname',
        'roles': 'roles',
        'organization': 'organization'
    }

    def __init__(self, user_id=None, email=None, nickname=None, roles=None, organization=None):  # noqa: E501
        """Auth0userBasic - a model defined in OpenAPI"""  # noqa: E501

        self._user_id = None
        self._email = None
        self._nickname = None
        self._roles = None
        self._organization = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if email is not None:
            self.email = email
        if nickname is not None:
            self.nickname = nickname
        if roles is not None:
            self.roles = roles
        if organization is not None:
            self.organization = organization

    @property
    def user_id(self):
        """Gets the user_id of this Auth0userBasic.  # noqa: E501


        :return: The user_id of this Auth0userBasic.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Auth0userBasic.


        :param user_id: The user_id of this Auth0userBasic.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def email(self):
        """Gets the email of this Auth0userBasic.  # noqa: E501


        :return: The email of this Auth0userBasic.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Auth0userBasic.


        :param email: The email of this Auth0userBasic.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def nickname(self):
        """Gets the nickname of this Auth0userBasic.  # noqa: E501


        :return: The nickname of this Auth0userBasic.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this Auth0userBasic.


        :param nickname: The nickname of this Auth0userBasic.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def roles(self):
        """Gets the roles of this Auth0userBasic.  # noqa: E501


        :return: The roles of this Auth0userBasic.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Auth0userBasic.


        :param roles: The roles of this Auth0userBasic.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def organization(self):
        """Gets the organization of this Auth0userBasic.  # noqa: E501


        :return: The organization of this Auth0userBasic.  # noqa: E501
        :rtype: list[str]
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Auth0userBasic.


        :param organization: The organization of this Auth0userBasic.  # noqa: E501
        :type: list[str]
        """

        self._organization = organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Auth0userBasic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
