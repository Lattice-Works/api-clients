# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice.configuration import Configuration


class IntegrationUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'environment': 'str',
        's3_bucket': 'str',
        'contacts': 'list[str]',
        'organization_id': 'str',
        'max_connections': 'int',
        'callback_urls': 'list[str]',
        'flight_plan_parameters': 'dict(str, FlightPlanParametersUpdate)'
    }

    attribute_map = {
        'environment': 'environment',
        's3_bucket': 's3Bucket',
        'contacts': 'contacts',
        'organization_id': 'organizationId',
        'max_connections': 'maxConnections',
        'callback_urls': 'callbackUrls',
        'flight_plan_parameters': 'flightPlanParameters'
    }

    def __init__(self, environment=None, s3_bucket=None, contacts=None, organization_id=None, max_connections=None, callback_urls=None, flight_plan_parameters=None, local_vars_configuration=None):  # noqa: E501
        """IntegrationUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._environment = None
        self._s3_bucket = None
        self._contacts = None
        self._organization_id = None
        self._max_connections = None
        self._callback_urls = None
        self._flight_plan_parameters = None
        self.discriminator = None

        if environment is not None:
            self.environment = environment
        if s3_bucket is not None:
            self.s3_bucket = s3_bucket
        if contacts is not None:
            self.contacts = contacts
        if organization_id is not None:
            self.organization_id = organization_id
        if max_connections is not None:
            self.max_connections = max_connections
        if callback_urls is not None:
            self.callback_urls = callback_urls
        if flight_plan_parameters is not None:
            self.flight_plan_parameters = flight_plan_parameters

    @property
    def environment(self):
        """Gets the environment of this IntegrationUpdate.  # noqa: E501

        the retrofit environment (e.g. PROD_INTEGRATION, LOCAL)  # noqa: E501

        :return: The environment of this IntegrationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this IntegrationUpdate.

        the retrofit environment (e.g. PROD_INTEGRATION, LOCAL)  # noqa: E501

        :param environment: The environment of this IntegrationUpdate.  # noqa: E501
        :type environment: str
        """
        allowed_values = ["PROD_INTEGRATION", "STAGING_INTEGRATION", "LOCAL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and environment not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"  # noqa: E501
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def s3_bucket(self):
        """Gets the s3_bucket of this IntegrationUpdate.  # noqa: E501

        the url of the s3bucket to be used  # noqa: E501

        :return: The s3_bucket of this IntegrationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._s3_bucket

    @s3_bucket.setter
    def s3_bucket(self, s3_bucket):
        """Sets the s3_bucket of this IntegrationUpdate.

        the url of the s3bucket to be used  # noqa: E501

        :param s3_bucket: The s3_bucket of this IntegrationUpdate.  # noqa: E501
        :type s3_bucket: str
        """

        self._s3_bucket = s3_bucket

    @property
    def contacts(self):
        """Gets the contacts of this IntegrationUpdate.  # noqa: E501

        the set of email addresses of those responsible for the integration  # noqa: E501

        :return: The contacts of this IntegrationUpdate.  # noqa: E501
        :rtype: list[str]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this IntegrationUpdate.

        the set of email addresses of those responsible for the integration  # noqa: E501

        :param contacts: The contacts of this IntegrationUpdate.  # noqa: E501
        :type contacts: list[str]
        """

        self._contacts = contacts

    @property
    def organization_id(self):
        """Gets the organization_id of this IntegrationUpdate.  # noqa: E501

        the id of the organization that owns the integration  # noqa: E501

        :return: The organization_id of this IntegrationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this IntegrationUpdate.

        the id of the organization that owns the integration  # noqa: E501

        :param organization_id: The organization_id of this IntegrationUpdate.  # noqa: E501
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def max_connections(self):
        """Gets the max_connections of this IntegrationUpdate.  # noqa: E501

        maximum number of connections to postgres allowed for this integration  # noqa: E501

        :return: The max_connections of this IntegrationUpdate.  # noqa: E501
        :rtype: int
        """
        return self._max_connections

    @max_connections.setter
    def max_connections(self, max_connections):
        """Sets the max_connections of this IntegrationUpdate.

        maximum number of connections to postgres allowed for this integration  # noqa: E501

        :param max_connections: The max_connections of this IntegrationUpdate.  # noqa: E501
        :type max_connections: int
        """

        self._max_connections = max_connections

    @property
    def callback_urls(self):
        """Gets the callback_urls of this IntegrationUpdate.  # noqa: E501

        urls to receive a POST when integration has completed  # noqa: E501

        :return: The callback_urls of this IntegrationUpdate.  # noqa: E501
        :rtype: list[str]
        """
        return self._callback_urls

    @callback_urls.setter
    def callback_urls(self, callback_urls):
        """Sets the callback_urls of this IntegrationUpdate.

        urls to receive a POST when integration has completed  # noqa: E501

        :param callback_urls: The callback_urls of this IntegrationUpdate.  # noqa: E501
        :type callback_urls: list[str]
        """

        self._callback_urls = callback_urls

    @property
    def flight_plan_parameters(self):
        """Gets the flight_plan_parameters of this IntegrationUpdate.  # noqa: E501

        a map from [Flight] name to [FlightPlanParametersUpdate]  # noqa: E501

        :return: The flight_plan_parameters of this IntegrationUpdate.  # noqa: E501
        :rtype: dict(str, FlightPlanParametersUpdate)
        """
        return self._flight_plan_parameters

    @flight_plan_parameters.setter
    def flight_plan_parameters(self, flight_plan_parameters):
        """Sets the flight_plan_parameters of this IntegrationUpdate.

        a map from [Flight] name to [FlightPlanParametersUpdate]  # noqa: E501

        :param flight_plan_parameters: The flight_plan_parameters of this IntegrationUpdate.  # noqa: E501
        :type flight_plan_parameters: dict(str, FlightPlanParametersUpdate)
        """

        self._flight_plan_parameters = flight_plan_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IntegrationUpdate):
            return True

        return self.to_dict() != other.to_dict()
