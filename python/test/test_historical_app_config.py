# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openlattice
from openlattice.models.historical_app_config import HistoricalAppConfig  # noqa: E501
from openlattice.rest import ApiException

class TestHistoricalAppConfig(unittest.TestCase):
    """HistoricalAppConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test HistoricalAppConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openlattice.models.historical_app_config.HistoricalAppConfig()  # noqa: E501
        if include_optional :
            return HistoricalAppConfig(
                id = '0', 
                principal = openlattice.models.principal.Principal(
                    type = '0', 
                    id = '0', ), 
                title = '0', 
                description = '0', 
                app_id = '0', 
                organization = openlattice.models.organization.Organization(
                    id = '0', 
                    principal = openlattice.models.principal.Principal(
                        type = '0', 
                        id = '0', ), 
                    title = '0', 
                    description = '0', 
                    emails = [
                        '0'
                        ], 
                    members = [
                        openlattice.models.principal.Principal(
                            type = '0', 
                            id = '0', )
                        ], 
                    roles = [
                        openlattice.models.role.Role(
                            id = '0', 
                            organization_id = '0', 
                            title = '0', 
                            description = '0', )
                        ], 
                    apps = [
                        '0'
                        ], 
                    sms_entity_set_info = [
                        openlattice.models.sms_entity_set_information.SmsEntitySetInformation(
                            phone_number = '0', 
                            organization_id = '0', 
                            entityset_ids = [
                                '0'
                                ], 
                            tags = [
                                '0'
                                ], )
                        ], 
                    partitions = [
                        56
                        ], ), 
                config = {
                    'key' : openlattice.models.historical_app_type_setting.HistoricalAppTypeSetting(
                        entity_set_id = '0', 
                        permissions = [
                            '0'
                            ], )
                    }
            )
        else :
            return HistoricalAppConfig(
        )

    def testHistoricalAppConfig(self):
        """Test HistoricalAppConfig"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
